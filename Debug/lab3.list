
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d1c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006ed0  08006ed0  00016ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007128  08007128  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007128  08007128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007130  08007130  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007134  08007134  00017134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08007138  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          0000025c  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102b2  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ab  00000000  00000000  000303d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d90  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025022  00000000  00000000  000348d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c9c  00000000  00000000  000598f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b42  00000000  00000000  0006b58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001450d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c8  00000000  00000000  00145120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006eb4 	.word	0x08006eb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	08006eb4 	.word	0x08006eb4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8000ee6:	200c      	movs	r0, #12
 8000ee8:	f004 fbb4 	bl	8005654 <malloc>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fbae 	bl	8005654 <malloc>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 f896 	bl	8001038 <bufferClear>
    return buffer;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	889a      	ldrh	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	88db      	ldrh	r3, [r3, #6]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d21f      	bcs.n	8000f6e <bufferPush+0x58>
        disableInt();
 8000f2e:	f000 f8f7 	bl	8001120 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	88d2      	ldrh	r2, [r2, #6]
 8000f4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f4e:	fb01 f202 	mul.w	r2, r1, r2
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000f66:	f000 f8ef 	bl	8001148 <enableInt>
        return 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <bufferPush+0x5a>
    } else
        return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	82fb      	strh	r3, [r7, #22]
 8000f8a:	e00f      	b.n	8000fac <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000f8c:	8afb      	ldrh	r3, [r7, #22]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff ffbd 	bl	8000f16 <bufferPush>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <bufferPushValues+0x2e>
            return pushed;
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	e007      	b.n	8000fb6 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000fa6:	8afb      	ldrh	r3, [r7, #22]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	82fb      	strh	r3, [r7, #22]
 8000fac:	8afa      	ldrh	r2, [r7, #22]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3eb      	bcc.n	8000f8c <bufferPushValues+0x14>
    }
    return pushed;
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <bufferPop+0x14>
        return 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01e      	b.n	8001010 <bufferPop+0x52>

    disableInt();
 8000fd2:	f000 f8a5 	bl	8001120 <disableInt>

    buffer->size--;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	889b      	ldrh	r3, [r3, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	8852      	ldrh	r2, [r2, #2]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	885b      	ldrh	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	88d2      	ldrh	r2, [r2, #6]
 8000ffa:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ffe:	fb01 f202 	mul.w	r2, r1, r2
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	805a      	strh	r2, [r3, #2]

    enableInt();
 800100a:	f000 f89d 	bl	8001148 <enableInt>

    return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <bufferPeek>:

uint8_t bufferPeek(const Buffer * const buffer) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    return buffer->data[buffer->ptrOut];
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	8852      	ldrh	r2, [r2, #2]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <bufferClear>:

void bufferClear(Buffer * const buffer) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    disableInt();
 8001040:	f000 f86e 	bl	8001120 <disableInt>
    buffer->size = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
    enableInt();
 8001056:	f000 f877 	bl	8001148 <enableInt>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff ffe5 	bl	8001062 <bufferHasValues>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <bufferPopValues+0x1e>
        return 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	e01d      	b.n	80010de <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f81f 	bl	80010e6 <bufferGetSize>
 80010a8:	4603      	mov	r3, r0
 80010aa:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 80010ac:	8afa      	ldrh	r2, [r7, #22]
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d901      	bls.n	80010b8 <bufferPopValues+0x34>
        popSize = bufSize;
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	82bb      	strh	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 80010be:	8abb      	ldrh	r3, [r7, #20]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	18d4      	adds	r4, r2, r3
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff ff7a 	bl	8000fbe <bufferPop>
 80010ca:	4603      	mov	r3, r0
 80010cc:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 80010ce:	8abb      	ldrh	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	82bb      	strh	r3, [r7, #20]
 80010d4:	8aba      	ldrh	r2, [r7, #20]
 80010d6:	8afb      	ldrh	r3, [r7, #22]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3f0      	bcc.n	80010be <bufferPopValues+0x3a>
    return popSize;
 80010dc:	8afb      	ldrh	r3, [r7, #22]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}

080010e6 <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    return buffer->size;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	889b      	ldrh	r3, [r3, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	88da      	ldrh	r2, [r3, #6]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	889b      	ldrh	r3, [r3, #4]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	b29b      	uxth	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <disableInt>:
uint16_t bufferPeekValues(const Buffer * const buffer, uint8_t **values) {
    *values = buffer->data + buffer->ptrOut;
    return buffer->size;
}

static void disableInt() {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001126:	f3ef 8310 	mrs	r3, PRIMASK
 800112a:	607b      	str	r3, [r7, #4]
  return(result);
 800112c:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <disableInt+0x24>)
 8001130:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001132:	b672      	cpsid	i
}
 8001134:	bf00      	nop
    __disable_irq();
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000110 	.word	0x20000110

08001148 <enableInt>:

static void enableInt() {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <enableInt+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f383 8810 	msr	PRIMASK, r3
}
 800115a:	bf00      	nop
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	20000110 	.word	0x20000110

0800116c <commandCreate>:
struct Command {
    char *name;
    CommandAction action;
};

Command * commandCreate(const char * const name, const CommandAction action) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
    size_t nameLen = strlen(name);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff f844 	bl	8000204 <strlen>
 800117c:	6178      	str	r0, [r7, #20]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fa66 	bl	8005654 <malloc>
 8001188:	4603      	mov	r3, r0
 800118a:	613b      	str	r3, [r7, #16]
    strcpy(nameCopy, name);
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	6938      	ldr	r0, [r7, #16]
 8001190:	f004 fb80 	bl	8005894 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8001194:	2008      	movs	r0, #8
 8001196:	f004 fa5d 	bl	8005654 <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
    command->name = nameCopy;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	601a      	str	r2, [r3, #0]
    command->action = action;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	605a      	str	r2, [r3, #4]
    return command;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <commandExecute>:

const char * commandExecute(const Command * const command) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    if (command == NULL || command->action == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <commandExecute+0x16>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <commandExecute+0x1a>
        return NULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e004      	b.n	80011d8 <commandExecute+0x24>
    return (*command->action)(NULL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2000      	movs	r0, #0
 80011d4:	4798      	blx	r3
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <commandGetName+0x12>
        return NULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e001      	b.n	80011f6 <commandGetName+0x16>
    return command->name;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_GPIO_Init+0x84>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <MX_GPIO_Init+0x84>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_GPIO_Init+0x84>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_GPIO_Init+0x84>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a16      	ldr	r2, [pc, #88]	; (8001288 <MX_GPIO_Init+0x84>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_GPIO_Init+0x84>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_GPIO_Init+0x84>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_GPIO_Init+0x84>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <MX_GPIO_Init+0x84>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_GPIO_Init+0x84>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <MX_GPIO_Init+0x84>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_GPIO_Init+0x84>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  commands[0] = commandCreate("1", (CommandAction) playA);
 8001290:	493c      	ldr	r1, [pc, #240]	; (8001384 <main+0xf8>)
 8001292:	483d      	ldr	r0, [pc, #244]	; (8001388 <main+0xfc>)
 8001294:	f7ff ff6a 	bl	800116c <commandCreate>
 8001298:	4603      	mov	r3, r0
 800129a:	4a3c      	ldr	r2, [pc, #240]	; (800138c <main+0x100>)
 800129c:	6013      	str	r3, [r2, #0]
	  commands[1] = commandCreate("2", (CommandAction) playB);
 800129e:	493c      	ldr	r1, [pc, #240]	; (8001390 <main+0x104>)
 80012a0:	483c      	ldr	r0, [pc, #240]	; (8001394 <main+0x108>)
 80012a2:	f7ff ff63 	bl	800116c <commandCreate>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a38      	ldr	r2, [pc, #224]	; (800138c <main+0x100>)
 80012aa:	6053      	str	r3, [r2, #4]
	  commands[2] = commandCreate("3", (CommandAction) playC);
 80012ac:	493a      	ldr	r1, [pc, #232]	; (8001398 <main+0x10c>)
 80012ae:	483b      	ldr	r0, [pc, #236]	; (800139c <main+0x110>)
 80012b0:	f7ff ff5c 	bl	800116c <commandCreate>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a35      	ldr	r2, [pc, #212]	; (800138c <main+0x100>)
 80012b8:	6093      	str	r3, [r2, #8]
	  commands[3] = commandCreate("4", (CommandAction) playD);
 80012ba:	4939      	ldr	r1, [pc, #228]	; (80013a0 <main+0x114>)
 80012bc:	4839      	ldr	r0, [pc, #228]	; (80013a4 <main+0x118>)
 80012be:	f7ff ff55 	bl	800116c <commandCreate>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4a31      	ldr	r2, [pc, #196]	; (800138c <main+0x100>)
 80012c6:	60d3      	str	r3, [r2, #12]
	  commands[4] = commandCreate("5", (CommandAction) playE);
 80012c8:	4937      	ldr	r1, [pc, #220]	; (80013a8 <main+0x11c>)
 80012ca:	4838      	ldr	r0, [pc, #224]	; (80013ac <main+0x120>)
 80012cc:	f7ff ff4e 	bl	800116c <commandCreate>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <main+0x100>)
 80012d4:	6113      	str	r3, [r2, #16]
	  commands[5] = commandCreate("6", (CommandAction) playF);
 80012d6:	4936      	ldr	r1, [pc, #216]	; (80013b0 <main+0x124>)
 80012d8:	4836      	ldr	r0, [pc, #216]	; (80013b4 <main+0x128>)
 80012da:	f7ff ff47 	bl	800116c <commandCreate>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a2a      	ldr	r2, [pc, #168]	; (800138c <main+0x100>)
 80012e2:	6153      	str	r3, [r2, #20]
	  commands[6] = commandCreate("7", (CommandAction) playG);
 80012e4:	4934      	ldr	r1, [pc, #208]	; (80013b8 <main+0x12c>)
 80012e6:	4835      	ldr	r0, [pc, #212]	; (80013bc <main+0x130>)
 80012e8:	f7ff ff40 	bl	800116c <commandCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a27      	ldr	r2, [pc, #156]	; (800138c <main+0x100>)
 80012f0:	6193      	str	r3, [r2, #24]
	  commands[7] = commandCreate("+", (CommandAction) upOctave);
 80012f2:	4933      	ldr	r1, [pc, #204]	; (80013c0 <main+0x134>)
 80012f4:	4833      	ldr	r0, [pc, #204]	; (80013c4 <main+0x138>)
 80012f6:	f7ff ff39 	bl	800116c <commandCreate>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a23      	ldr	r2, [pc, #140]	; (800138c <main+0x100>)
 80012fe:	61d3      	str	r3, [r2, #28]
	  commands[8] = commandCreate("-", (CommandAction) downOctave);
 8001300:	4931      	ldr	r1, [pc, #196]	; (80013c8 <main+0x13c>)
 8001302:	4832      	ldr	r0, [pc, #200]	; (80013cc <main+0x140>)
 8001304:	f7ff ff32 	bl	800116c <commandCreate>
 8001308:	4603      	mov	r3, r0
 800130a:	4a20      	ldr	r2, [pc, #128]	; (800138c <main+0x100>)
 800130c:	6213      	str	r3, [r2, #32]
	  commands[9] = commandCreate("A", (CommandAction) upDuration);
 800130e:	4930      	ldr	r1, [pc, #192]	; (80013d0 <main+0x144>)
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <main+0x148>)
 8001312:	f7ff ff2b 	bl	800116c <commandCreate>
 8001316:	4603      	mov	r3, r0
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <main+0x100>)
 800131a:	6253      	str	r3, [r2, #36]	; 0x24
	  commands[10] = commandCreate("a", (CommandAction) downDuration);
 800131c:	492e      	ldr	r1, [pc, #184]	; (80013d8 <main+0x14c>)
 800131e:	482f      	ldr	r0, [pc, #188]	; (80013dc <main+0x150>)
 8001320:	f7ff ff24 	bl	800116c <commandCreate>
 8001324:	4603      	mov	r3, r0
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <main+0x100>)
 8001328:	6293      	str	r3, [r2, #40]	; 0x28
	  commands[11] = commandCreate("\r", (CommandAction) playAll);
 800132a:	492d      	ldr	r1, [pc, #180]	; (80013e0 <main+0x154>)
 800132c:	482d      	ldr	r0, [pc, #180]	; (80013e4 <main+0x158>)
 800132e:	f7ff ff1d 	bl	800116c <commandCreate>
 8001332:	4603      	mov	r3, r0
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <main+0x100>)
 8001336:	62d3      	str	r3, [r2, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001338:	f000 ff74 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133c:	f000 f85a 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001340:	f7ff ff60 	bl	8001204 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001344:	f000 fbf0 	bl	8001b28 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001348:	f000 fa36 	bl	80017b8 <MX_TIM1_Init>
  MX_TIM6_Init();
 800134c:	f000 fad4 	bl	80018f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 8001350:	f000 fc8c 	bl	8001c6c <uartInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001354:	2100      	movs	r1, #0
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <main+0x15c>)
 8001358:	f002 f928 	bl	80035ac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <main+0x160>)
 800135e:	f002 f85b 	bl	8003418 <HAL_TIM_Base_Start_IT>
  menuInit(commands, 12);
 8001362:	210c      	movs	r1, #12
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <main+0x100>)
 8001366:	f000 f90d 	bl	8001584 <menuInit>
  sendMessage("Started\n");
 800136a:	4821      	ldr	r0, [pc, #132]	; (80013f0 <main+0x164>)
 800136c:	f000 f8a2 	bl	80014b4 <sendMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uartPolling();
 8001370:	f000 fc90 	bl	8001c94 <uartPolling>

	  if (uartHasNext()) {
 8001374:	f000 fc6e 	bl	8001c54 <uartHasNext>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f8      	beq.n	8001370 <main+0xe4>
		  receiveAndSendChar();
 800137e:	f000 f8ab 	bl	80014d8 <receiveAndSendChar>
	  uartPolling();
 8001382:	e7f5      	b.n	8001370 <main+0xe4>
 8001384:	08001f01 	.word	0x08001f01
 8001388:	08006ed0 	.word	0x08006ed0
 800138c:	20000198 	.word	0x20000198
 8001390:	08001f11 	.word	0x08001f11
 8001394:	08006ed4 	.word	0x08006ed4
 8001398:	08001f21 	.word	0x08001f21
 800139c:	08006ed8 	.word	0x08006ed8
 80013a0:	08001f31 	.word	0x08001f31
 80013a4:	08006edc 	.word	0x08006edc
 80013a8:	08001f41 	.word	0x08001f41
 80013ac:	08006ee0 	.word	0x08006ee0
 80013b0:	08001f51 	.word	0x08001f51
 80013b4:	08006ee4 	.word	0x08006ee4
 80013b8:	08001f61 	.word	0x08001f61
 80013bc:	08006ee8 	.word	0x08006ee8
 80013c0:	08001fd1 	.word	0x08001fd1
 80013c4:	08006eec 	.word	0x08006eec
 80013c8:	08002031 	.word	0x08002031
 80013cc:	08006ef0 	.word	0x08006ef0
 80013d0:	08002091 	.word	0x08002091
 80013d4:	08006ef4 	.word	0x08006ef4
 80013d8:	080020f5 	.word	0x080020f5
 80013dc:	08006ef8 	.word	0x08006ef8
 80013e0:	08001f71 	.word	0x08001f71
 80013e4:	08006efc 	.word	0x08006efc
 80013e8:	200001d8 	.word	0x200001d8
 80013ec:	20000220 	.word	0x20000220
 80013f0:	08006f00 	.word	0x08006f00

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f004 f92e 	bl	8005664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <SystemClock_Config+0xb8>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a22      	ldr	r2, [pc, #136]	; (80014ac <SystemClock_Config+0xb8>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <SystemClock_Config+0xb8>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <SystemClock_Config+0xbc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <SystemClock_Config+0xbc>)
 8001442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <SystemClock_Config+0xbc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fa9d 	bl	80029a8 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001474:	f000 f880 	bl	8001578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fd00 	bl	8002e98 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800149e:	f000 f86b 	bl	8001578 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	; 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <sendMessage>:

/* USER CODE BEGIN 4 */
static void sendMessage(const char * msg) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7fe fea1 	bl	8000204 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fba7 	bl	8001c1c <uartTransmit>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <receiveAndSendChar>:

static void receiveAndSendChar() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <receiveAndSendChar+0x68>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <receiveAndSendChar+0x6c>)
 80014e6:	4413      	add	r3, r2
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fbda 	bl	8001ca4 <uartReceive>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d020      	beq.n	8001538 <receiveAndSendChar+0x60>
        uint8_t received = uartBuf[uartBufLast];
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <receiveAndSendChar+0x68>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <receiveAndSendChar+0x6c>)
 80014fe:	5c9b      	ldrb	r3, [r3, r2]
 8001500:	70fb      	strb	r3, [r7, #3]
        uartBufLast++;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <receiveAndSendChar+0x68>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <receiveAndSendChar+0x68>)
 800150c:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 800150e:	1cfb      	adds	r3, r7, #3
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fb82 	bl	8001c1c <uartTransmit>

        uartBuf[uartBufLast] = '\0';
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <receiveAndSendChar+0x68>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <receiveAndSendChar+0x6c>)
 8001520:	2100      	movs	r1, #0
 8001522:	5499      	strb	r1, [r3, r2]
        const char *commandResult = menuExecuteCommand((char *) uartBuf);
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <receiveAndSendChar+0x6c>)
 8001526:	f000 f861 	bl	80015ec <menuExecuteCommand>
 800152a:	6078      	str	r0, [r7, #4]
        sendMessage("\n");
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <receiveAndSendChar+0x70>)
 800152e:	f7ff ffc1 	bl	80014b4 <sendMessage>
        sendCommandResult(commandResult);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f80a 	bl	800154c <sendCommandResult>
    }
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000194 	.word	0x20000194
 8001544:	20000114 	.word	0x20000114
 8001548:	08006f0c 	.word	0x08006f0c

0800154c <sendCommandResult>:

static void sendCommandResult(const char * commandResult) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7fe fe55 	bl	8000204 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	b29b      	uxth	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fb5b 	bl	8001c1c <uartTransmit>
    uartBufLast = 0;
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <sendCommandResult+0x28>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000194 	.word	0x20000194

08001578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800157c:	b672      	cpsid	i
}
 800157e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001580:	e7fe      	b.n	8001580 <Error_Handler+0x8>
	...

08001584 <menuInit>:
#include "command.h"

Command **menuCommands = NULL;
uint16_t menuSize;

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <menuInit+0x60>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d121      	bne.n	80015dc <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f859 	bl	8005654 <malloc>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <menuInit+0x60>)
 80015a8:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	81fb      	strh	r3, [r7, #14]
 80015ae:	e00d      	b.n	80015cc <menuInit+0x48>
        menuCommands[i] = commands[i];
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	441a      	add	r2, r3
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <menuInit+0x60>)
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	3301      	adds	r3, #1
 80015ca:	81fb      	strh	r3, [r7, #14]
 80015cc:	89fa      	ldrh	r2, [r7, #14]
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3ed      	bcc.n	80015b0 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <menuInit+0x64>)
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	8013      	strh	r3, [r2, #0]
 80015da:	e000      	b.n	80015de <menuInit+0x5a>
        return;
 80015dc:	bf00      	nop
}
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001c8 	.word	0x200001c8
 80015e8:	200001cc 	.word	0x200001cc

080015ec <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandName) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < menuSize; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	e01f      	b.n	800163a <menuExecuteCommand+0x4e>
        const Command * const command = menuCommands[i];
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <menuExecuteCommand+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60bb      	str	r3, [r7, #8]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <menuExecuteCommand+0x64>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	89fb      	ldrh	r3, [r7, #14]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fde3 	bl	80011e0 <commandGetName>
 800161a:	4603      	mov	r3, r0
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fde6 	bl	80001f0 <strcmp>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d104      	bne.n	8001634 <menuExecuteCommand+0x48>
            return commandExecute(command);
 800162a:	68b8      	ldr	r0, [r7, #8]
 800162c:	f7ff fdc2 	bl	80011b4 <commandExecute>
 8001630:	4603      	mov	r3, r0
 8001632:	e008      	b.n	8001646 <menuExecuteCommand+0x5a>
    for (uint16_t i = 0; i < menuSize; i++) {
 8001634:	89fb      	ldrh	r3, [r7, #14]
 8001636:	3301      	adds	r3, #1
 8001638:	81fb      	strh	r3, [r7, #14]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <menuExecuteCommand+0x68>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	89fa      	ldrh	r2, [r7, #14]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3da      	bcc.n	80015fa <menuExecuteCommand+0xe>
        }
    }
    return "Command not found\n";
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <menuExecuteCommand+0x6c>)
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001c8 	.word	0x200001c8
 8001654:	200001cc 	.word	0x200001cc
 8001658:	08006f10 	.word	0x08006f10

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_MspInit+0x4c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x4c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 fde6 	bl	80022c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM6_DAC_IRQHandler+0x10>)
 8001706:	f002 f819 	bl	800373c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000220 	.word	0x20000220

08001714 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <USART6_IRQHandler+0x10>)
 800171a:	f003 f83d 	bl	8004798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000274 	.word	0x20000274

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f003 ff52 	bl	8005600 <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20030000 	.word	0x20030000
 8001788:	00000400 	.word	0x00000400
 800178c:	200001d0 	.word	0x200001d0
 8001790:	20000350 	.word	0x20000350

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b096      	sub	sp, #88	; 0x58
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2220      	movs	r2, #32
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 ff37 	bl	8005664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <MX_TIM1_Init+0x138>)
 80017f8:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <MX_TIM1_Init+0x13c>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017fc:	4b3c      	ldr	r3, [pc, #240]	; (80018f0 <MX_TIM1_Init+0x138>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <MX_TIM1_Init+0x138>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8001808:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <MX_TIM1_Init+0x138>)
 800180a:	220a      	movs	r2, #10
 800180c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <MX_TIM1_Init+0x138>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <MX_TIM1_Init+0x138>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <MX_TIM1_Init+0x138>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001820:	4833      	ldr	r0, [pc, #204]	; (80018f0 <MX_TIM1_Init+0x138>)
 8001822:	f001 fd19 	bl	8003258 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800182c:	f7ff fea4 	bl	8001578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001836:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800183a:	4619      	mov	r1, r3
 800183c:	482c      	ldr	r0, [pc, #176]	; (80018f0 <MX_TIM1_Init+0x138>)
 800183e:	f002 f947 	bl	8003ad0 <HAL_TIM_ConfigClockSource>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001848:	f7ff fe96 	bl	8001578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800184c:	4828      	ldr	r0, [pc, #160]	; (80018f0 <MX_TIM1_Init+0x138>)
 800184e:	f001 fe53 	bl	80034f8 <HAL_TIM_PWM_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001858:	f7ff fe8e 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001864:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001868:	4619      	mov	r1, r3
 800186a:	4821      	ldr	r0, [pc, #132]	; (80018f0 <MX_TIM1_Init+0x138>)
 800186c:	f002 fd30 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001876:	f7ff fe7f 	bl	8001578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187a:	2360      	movs	r3, #96	; 0x60
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	; (80018f0 <MX_TIM1_Init+0x138>)
 80018a0:	f002 f854 	bl	800394c <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80018aa:	f7ff fe65 	bl	8001578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <MX_TIM1_Init+0x138>)
 80018d2:	f002 fd79 	bl	80043c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018dc:	f7ff fe4c 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <MX_TIM1_Init+0x138>)
 80018e2:	f000 f87d 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 80018e6:	bf00      	nop
 80018e8:	3758      	adds	r7, #88	; 0x58
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200001d8 	.word	0x200001d8
 80018f4:	40010000 	.word	0x40010000

080018f8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fe:	463b      	mov	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_TIM6_Init+0x64>)
 8001908:	4a15      	ldr	r2, [pc, #84]	; (8001960 <MX_TIM6_Init+0x68>)
 800190a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <MX_TIM6_Init+0x64>)
 800190e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001912:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_TIM6_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_TIM6_Init+0x64>)
 800191c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001920:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_TIM6_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <MX_TIM6_Init+0x64>)
 800192a:	f001 fc95 	bl	8003258 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001934:	f7ff fe20 	bl	8001578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001940:	463b      	mov	r3, r7
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_TIM6_Init+0x64>)
 8001946:	f002 fcc3 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001950:	f7ff fe12 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000220 	.word	0x20000220
 8001960:	40001000 	.word	0x40001000

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10e      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001992:	e01a      	b.n	80019ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_TIM_Base_MspInit+0x78>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d115      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2036      	movs	r0, #54	; 0x36
 80019c0:	f000 fd7d 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c4:	2036      	movs	r0, #54	; 0x36
 80019c6:	f000 fd96 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40001000 	.word	0x40001000

080019e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_TIM_MspPostInit+0x68>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11e      	bne.n	8001a40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_TIM_MspPostInit+0x6c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_MspPostInit+0x6c>)
 8001a0c:	f043 0310 	orr.w	r3, r3, #16
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_TIM_MspPostInit+0x6c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_TIM_MspPostInit+0x70>)
 8001a3c:	f000 fe08 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40021000 	.word	0x40021000

08001a54 <TIM6_START>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef TIM6_START() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM6_START+0x10>)
 8001a5a:	f001 fc4d 	bl	80032f8 <HAL_TIM_Base_Start>
 8001a5e:	4603      	mov	r3, r0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000220 	.word	0x20000220

08001a68 <TIM6_STOP>:

HAL_StatusTypeDef TIM6_STOP() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Stop(&htim6);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM6_STOP+0x10>)
 8001a6e:	f001 fcab 	bl	80033c8 <HAL_TIM_Base_Stop>
 8001a72:	4603      	mov	r3, r0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000220 	.word	0x20000220

08001a7c <setPlayAllFlag>:

void setPlayAllFlag() {
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
	playAllFlag = 1;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <setPlayAllFlag+0x14>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
};
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	200001d4 	.word	0x200001d4

08001a94 <resetPlayAllFlag>:

void resetPlayAllFlag() {
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
	playAllFlag = 0;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <resetPlayAllFlag+0x14>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
};
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	200001d4 	.word	0x200001d4

08001aac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	static uint8_t note = 0;
	if( htim->Instance == TIM6 ) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d127      	bne.n	8001b0e <HAL_TIM_PeriodElapsedCallback+0x62>
		if (!playAllFlag) {
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0x2a>
			TIM6_STOP();
 8001ac6:	f7ff ffcf 	bl	8001a68 <TIM6_STOP>
			TIM1->CCR1 = 0;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34
			disableIsPlaying();
 8001ad0:	f000 fb40 	bl	8002154 <disableIsPlaying>
				setPlay(note);
			}
		}

	}
}
 8001ad4:	e01b      	b.n	8001b0e <HAL_TIM_PeriodElapsedCallback+0x62>
			note++;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ae0:	701a      	strb	r2, [r3, #0]
			if (note >= 6) {
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d90c      	bls.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x58>
				note = 0;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
				TIM6_STOP();
 8001af0:	f7ff ffba 	bl	8001a68 <TIM6_STOP>
				TIM1->CCR1 = 0;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
				resetPlayAllFlag();
 8001afa:	f7ff ffcb 	bl	8001a94 <resetPlayAllFlag>
				disableIsPlaying();
 8001afe:	f000 fb29 	bl	8002154 <disableIsPlaying>
}
 8001b02:	e004      	b.n	8001b0e <HAL_TIM_PeriodElapsedCallback+0x62>
				setPlay(note);
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f9a1 	bl	8001e50 <setPlay>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40001000 	.word	0x40001000
 8001b1c:	200001d4 	.word	0x200001d4
 8001b20:	40010000 	.word	0x40010000
 8001b24:	20000268 	.word	0x20000268

08001b28 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_USART6_UART_Init+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_USART6_UART_Init+0x4c>)
 8001b60:	f002 fc98 	bl	8004494 <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b6a:	f7ff fd05 	bl	8001578 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000274 	.word	0x20000274
 8001b78:	40011400 	.word	0x40011400

08001b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_UART_MspInit+0x94>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d133      	bne.n	8001c06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001ba8:	f043 0320 	orr.w	r3, r3, #32
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_UART_MspInit+0x98>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd6:	23c0      	movs	r3, #192	; 0xc0
 8001bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001be6:	2308      	movs	r3, #8
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4809      	ldr	r0, [pc, #36]	; (8001c18 <HAL_UART_MspInit+0x9c>)
 8001bf2:	f000 fd2d 	bl	8002650 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2047      	movs	r0, #71	; 0x47
 8001bfc:	f000 fc5f 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c00:	2047      	movs	r0, #71	; 0x47
 8001c02:	f000 fc78 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40011400 	.word	0x40011400
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020800 	.word	0x40020800

08001c1c <uartTransmit>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <uartTransmit+0x16>
        return 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e009      	b.n	8001c46 <uartTransmit+0x2a>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <uartTransmit+0x34>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f99c 	bl	8000f78 <bufferPushValues>
 8001c40:	4603      	mov	r3, r0
 8001c42:	81fb      	strh	r3, [r7, #14]
    return transmitted;
 8001c44:	89fb      	ldrh	r3, [r7, #14]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000026c 	.word	0x2000026c

08001c54 <uartHasNext>:

uint8_t uartHasNext() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <uartHasNext+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fa00 	bl	8001062 <bufferHasValues>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000270 	.word	0x20000270

08001c6c <uartInit>:

void uartInit() {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001c70:	2080      	movs	r0, #128	; 0x80
 8001c72:	f7ff f933 	bl	8000edc <bufferCreate>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <uartInit+0x20>)
 8001c7a:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001c7c:	2080      	movs	r0, #128	; 0x80
 8001c7e:	f7ff f92d 	bl	8000edc <bufferCreate>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a02      	ldr	r2, [pc, #8]	; (8001c90 <uartInit+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000026c 	.word	0x2000026c
 8001c90:	20000270 	.word	0x20000270

08001c94 <uartPolling>:

void uartPolling() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
    hardwareTransmit();
 8001c98:	f000 f84a 	bl	8001d30 <hardwareTransmit>
    hardwareReceive();
 8001c9c:	f000 f818 	bl	8001cd0 <hardwareReceive>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <uartReceive>:

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <uartReceive+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	887a      	ldrh	r2, [r7, #2]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f9e3 	bl	8001084 <bufferPopValues>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	81fb      	strh	r3, [r7, #14]
    return received;
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000270 	.word	0x20000270

08001cd0 <hardwareReceive>:

static void hardwareReceive() {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <hardwareReceive+0x5c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fa0f 	bl	80010fe <bufferGetFreeSize>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d010      	beq.n	8001d08 <hardwareReceive+0x38>
        uint8_t data = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareReceivePolling(&data, 1)) {
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fa56 	bl	80021a0 <uartHardwareReceivePolling>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <hardwareReceive+0x38>
            bufferPush(rxBuffer, data);
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <hardwareReceive+0x5c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f907 	bl	8000f16 <bufferPush>
        }
    }
    if (!bufferHasValues(rxBuffer))
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <hardwareReceive+0x5c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f9a8 	bl	8001062 <bufferHasValues>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <hardwareReceive+0x52>
        bufferClear(rxBuffer);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <hardwareReceive+0x5c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f98b 	bl	8001038 <bufferClear>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000270 	.word	0x20000270

08001d30 <hardwareTransmit>:

static void hardwareTransmit() {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
    if (bufferHasValues(txBuffer)) {
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <hardwareTransmit+0x48>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f991 	bl	8001062 <bufferHasValues>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d013      	beq.n	8001d6e <hardwareTransmit+0x3e>
        const uint8_t byte = bufferPeek(txBuffer);
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <hardwareTransmit+0x48>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f964 	bl	8001018 <bufferPeek>
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareTransmitPolling(byte, 1))
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa07 	bl	800216c <uartHardwareTransmitPolling>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <hardwareTransmit+0x3e>
            bufferPop(txBuffer);
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <hardwareTransmit+0x48>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f928 	bl	8000fbe <bufferPop>
    }
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000026c 	.word	0x2000026c
 8001d7c:	00000000 	.word	0x00000000

08001d80 <getNoteFrequency>:
double notes[7] = {16.352, 18.354, 20.602, 21.827, 24.5, 27.5, 30.868};
char* noteNames[7] = {"A", "B", "C", "D", "E", "F", "G"};

int duration = 1000;

double getNoteFrequency(uint8_t noteNumber) {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	return rint(notes[noteNumber] * pow(2, octave));
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <getNoteFrequency+0x70>)
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <getNoteFrequency+0x74>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbd2 	bl	8000544 <__aeabi_ui2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	ec43 2b11 	vmov	d1, r2, r3
 8001da8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001de8 <getNoteFrequency+0x68>
 8001dac:	f004 f966 	bl	800607c <pow>
 8001db0:	ec53 2b10 	vmov	r2, r3, d0
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fc3e 	bl	8000638 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	ec43 2b17 	vmov	d7, r2, r3
 8001dc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc8:	eef0 0a67 	vmov.f32	s1, s15
 8001dcc:	f004 f8c8 	bl	8005f60 <rint>
 8001dd0:	eeb0 7a40 	vmov.f32	s14, s0
 8001dd4:	eef0 7a60 	vmov.f32	s15, s1
}
 8001dd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ddc:	eef0 0a67 	vmov.f32	s1, s15
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	00000000 	.word	0x00000000
 8001dec:	40000000 	.word	0x40000000
 8001df0:	20000030 	.word	0x20000030
 8001df4:	20000004 	.word	0x20000004

08001df8 <setVolume>:

void setVolume(uint8_t volume) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
	if (0 <= volume && volume <= 10) {
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b0a      	cmp	r3, #10
 8001e06:	d802      	bhi.n	8001e0e <setVolume+0x16>
		TIM1->CCR1 = volume;
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <setVolume+0x24>)
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40010000 	.word	0x40010000

08001e20 <setFrequency>:

void setFrequency(uint16_t freq) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	80fb      	strh	r3, [r7, #6]
	TIM1->PSC = HAL_RCC_GetPCLK2Freq() / (10 * freq) - 1;
 8001e2a:	f001 fa01 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8001e2e:	4601      	mov	r1, r0
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3e:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <setFrequency+0x2c>)
 8001e40:	3b01      	subs	r3, #1
 8001e42:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40010000 	.word	0x40010000

08001e50 <setPlay>:

void setPlay(uint8_t noteNumber) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
	setFrequency((uint16_t) getNoteFrequency(noteNumber));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff8f 	bl	8001d80 <getNoteFrequency>
 8001e62:	ec53 2b10 	vmov	r2, r3, d0
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fe95 	bl	8000b98 <__aeabi_d2uiz>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ffd4 	bl	8001e20 <setFrequency>
	setVolume(10);
 8001e78:	200a      	movs	r0, #10
 8001e7a:	f7ff ffbd 	bl	8001df8 <setVolume>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <playNote>:

char buf[128];
char* playNote(uint8_t noteNumber) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
	if (isPlaying) return "buzzer not ready\n";
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <playNote+0x58>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <playNote+0x16>
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <playNote+0x5c>)
 8001e9c:	e01b      	b.n	8001ed6 <playNote+0x4e>
	isPlaying = 1;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <playNote+0x58>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
	setPlay(noteNumber);
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ffd2 	bl	8001e50 <setPlay>
	TIM6_START();
 8001eac:	f7ff fdd2 	bl	8001a54 <TIM6_START>
	sprintf(buf, "note %s, %s, duration %dms\n", noteNames[noteNumber], octaveNames[octave], duration);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <playNote+0x60>)
 8001eb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <playNote+0x64>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <playNote+0x68>)
 8001ec0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <playNote+0x6c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	490a      	ldr	r1, [pc, #40]	; (8001ef8 <playNote+0x70>)
 8001ece:	480b      	ldr	r0, [pc, #44]	; (8001efc <playNote+0x74>)
 8001ed0:	f003 fcc0 	bl	8005854 <siprintf>
	return buf;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <playNote+0x74>)
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200002b8 	.word	0x200002b8
 8001ee4:	08006fe0 	.word	0x08006fe0
 8001ee8:	20000068 	.word	0x20000068
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000084 	.word	0x20000084
 8001ef8:	08006ff4 	.word	0x08006ff4
 8001efc:	200002bc 	.word	0x200002bc

08001f00 <playA>:

char* playA() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	return playNote(0);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff ffbf 	bl	8001e88 <playNote>
 8001f0a:	4603      	mov	r3, r0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <playB>:
char* playB() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	return playNote(1);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7ff ffb7 	bl	8001e88 <playNote>
 8001f1a:	4603      	mov	r3, r0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <playC>:
char* playC() {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	return playNote(2);
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7ff ffaf 	bl	8001e88 <playNote>
 8001f2a:	4603      	mov	r3, r0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <playD>:
char* playD() {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	return playNote(3);
 8001f34:	2003      	movs	r0, #3
 8001f36:	f7ff ffa7 	bl	8001e88 <playNote>
 8001f3a:	4603      	mov	r3, r0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <playE>:
char* playE() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	return playNote(4);
 8001f44:	2004      	movs	r0, #4
 8001f46:	f7ff ff9f 	bl	8001e88 <playNote>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <playF>:
char* playF() {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	return playNote(5);
 8001f54:	2005      	movs	r0, #5
 8001f56:	f7ff ff97 	bl	8001e88 <playNote>
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <playG>:
char* playG() {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	return playNote(6);
 8001f64:	2006      	movs	r0, #6
 8001f66:	f7ff ff8f 	bl	8001e88 <playNote>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <playAll>:

char* playAll() {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <playAll+0x44>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <playAll+0x10>
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <playAll+0x48>)
 8001f7e:	e016      	b.n	8001fae <playAll+0x3e>
	isPlaying = 1;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <playAll+0x44>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
	setPlayAllFlag();
 8001f86:	f7ff fd79 	bl	8001a7c <setPlayAllFlag>
	setPlay(0);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff ff60 	bl	8001e50 <setPlay>
	TIM6_START();
 8001f90:	f7ff fd60 	bl	8001a54 <TIM6_START>
	sprintf(buf, "notes A,B,C,D,E,F,G, %s, duration %dms\n", octaveNames[octave], duration);
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <playAll+0x4c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <playAll+0x50>)
 8001f9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <playAll+0x54>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <playAll+0x58>)
 8001fa6:	4809      	ldr	r0, [pc, #36]	; (8001fcc <playAll+0x5c>)
 8001fa8:	f003 fc54 	bl	8005854 <siprintf>
	return buf;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <playAll+0x5c>)
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200002b8 	.word	0x200002b8
 8001fb8:	08006fe0 	.word	0x08006fe0
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000084 	.word	0x20000084
 8001fc8:	08007010 	.word	0x08007010
 8001fcc:	200002bc 	.word	0x200002bc

08001fd0 <upOctave>:

char* upOctave() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <upOctave+0x44>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <upOctave+0x10>
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <upOctave+0x48>)
 8001fde:	e017      	b.n	8002010 <upOctave+0x40>
	if (octave < 8) {
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <upOctave+0x4c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b07      	cmp	r3, #7
 8001fe6:	d812      	bhi.n	800200e <upOctave+0x3e>
		octave++;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <upOctave+0x4c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <upOctave+0x4c>)
 8001ff2:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "%s\n", octaveNames[octave]);
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <upOctave+0x4c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <upOctave+0x50>)
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	461a      	mov	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <upOctave+0x54>)
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <upOctave+0x58>)
 8002006:	f003 fc25 	bl	8005854 <siprintf>
		return buf;
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <upOctave+0x58>)
 800200c:	e000      	b.n	8002010 <upOctave+0x40>
	}
	return "Octave is maximum\n";
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <upOctave+0x5c>)
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200002b8 	.word	0x200002b8
 8002018:	08006fe0 	.word	0x08006fe0
 800201c:	20000004 	.word	0x20000004
 8002020:	20000008 	.word	0x20000008
 8002024:	08007038 	.word	0x08007038
 8002028:	200002bc 	.word	0x200002bc
 800202c:	0800703c 	.word	0x0800703c

08002030 <downOctave>:

char* downOctave() {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <downOctave+0x44>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <downOctave+0x10>
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <downOctave+0x48>)
 800203e:	e017      	b.n	8002070 <downOctave+0x40>
	if (octave > 0) {
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <downOctave+0x4c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <downOctave+0x3e>
		octave--;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <downOctave+0x4c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3b01      	subs	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <downOctave+0x4c>)
 8002052:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "%s\n", octaveNames[octave]);
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <downOctave+0x4c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <downOctave+0x50>)
 800205c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002060:	461a      	mov	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <downOctave+0x54>)
 8002064:	4808      	ldr	r0, [pc, #32]	; (8002088 <downOctave+0x58>)
 8002066:	f003 fbf5 	bl	8005854 <siprintf>
		return buf;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <downOctave+0x58>)
 800206c:	e000      	b.n	8002070 <downOctave+0x40>
	}
	return "Octave is minimum\n";
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <downOctave+0x5c>)
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200002b8 	.word	0x200002b8
 8002078:	08006fe0 	.word	0x08006fe0
 800207c:	20000004 	.word	0x20000004
 8002080:	20000008 	.word	0x20000008
 8002084:	08007038 	.word	0x08007038
 8002088:	200002bc 	.word	0x200002bc
 800208c:	08007050 	.word	0x08007050

08002090 <upDuration>:

char* upDuration() {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <upDuration+0x48>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <upDuration+0x10>
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <upDuration+0x4c>)
 800209e:	e019      	b.n	80020d4 <upDuration+0x44>
	if (duration < 5000) {
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <upDuration+0x50>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80020a8:	4293      	cmp	r3, r2
 80020aa:	dc12      	bgt.n	80020d2 <upDuration+0x42>
		TIM6->ARR += 100;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <upDuration+0x54>)
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <upDuration+0x54>)
 80020b2:	3364      	adds	r3, #100	; 0x64
 80020b4:	62d3      	str	r3, [r2, #44]	; 0x2c
		duration += 100;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <upDuration+0x50>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3364      	adds	r3, #100	; 0x64
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <upDuration+0x50>)
 80020be:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <upDuration+0x50>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <upDuration+0x58>)
 80020c8:	4808      	ldr	r0, [pc, #32]	; (80020ec <upDuration+0x5c>)
 80020ca:	f003 fbc3 	bl	8005854 <siprintf>
		return buf;
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <upDuration+0x5c>)
 80020d0:	e000      	b.n	80020d4 <upDuration+0x44>
	}
	return "Duration is maximum\n";
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <upDuration+0x60>)
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200002b8 	.word	0x200002b8
 80020dc:	08006fe0 	.word	0x08006fe0
 80020e0:	20000084 	.word	0x20000084
 80020e4:	40001000 	.word	0x40001000
 80020e8:	08007064 	.word	0x08007064
 80020ec:	200002bc 	.word	0x200002bc
 80020f0:	0800706c 	.word	0x0800706c

080020f4 <downDuration>:

char* downDuration() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	if (isPlaying) return "buzzer not ready\n";
 80020f8:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <downDuration+0x44>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <downDuration+0x10>
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <downDuration+0x48>)
 8002102:	e017      	b.n	8002134 <downDuration+0x40>
	if (duration > 100) {
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <downDuration+0x4c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	dd12      	ble.n	8002132 <downDuration+0x3e>
		TIM6->ARR -= 100;
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <downDuration+0x50>)
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <downDuration+0x50>)
 8002112:	3b64      	subs	r3, #100	; 0x64
 8002114:	62d3      	str	r3, [r2, #44]	; 0x2c
		duration -= 100;
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <downDuration+0x4c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3b64      	subs	r3, #100	; 0x64
 800211c:	4a08      	ldr	r2, [pc, #32]	; (8002140 <downDuration+0x4c>)
 800211e:	6013      	str	r3, [r2, #0]
		sprintf(buf, "%dms\n", duration);
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <downDuration+0x4c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <downDuration+0x54>)
 8002128:	4808      	ldr	r0, [pc, #32]	; (800214c <downDuration+0x58>)
 800212a:	f003 fb93 	bl	8005854 <siprintf>
		return buf;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <downDuration+0x58>)
 8002130:	e000      	b.n	8002134 <downDuration+0x40>
	}
	return "Duration is minimum\n";
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <downDuration+0x5c>)
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200002b8 	.word	0x200002b8
 800213c:	08006fe0 	.word	0x08006fe0
 8002140:	20000084 	.word	0x20000084
 8002144:	40001000 	.word	0x40001000
 8002148:	08007064 	.word	0x08007064
 800214c:	200002bc 	.word	0x200002bc
 8002150:	08007084 	.word	0x08007084

08002154 <disableIsPlaying>:

void disableIsPlaying() {
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	isPlaying = 0;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <disableIsPlaying+0x14>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	200002b8 	.word	0x200002b8

0800216c <uartHardwareTransmitPolling>:
#include "usart.h"

uint8_t usartHardwareTransmitBuffer;
uint8_t usartHardwareReceiveBuffer;

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	460a      	mov	r2, r1
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	4613      	mov	r3, r2
 800217a:	80bb      	strh	r3, [r7, #4]
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	1df9      	adds	r1, r7, #7
 8002180:	2201      	movs	r2, #1
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <uartHardwareTransmitPolling+0x30>)
 8002184:	f002 f9d3 	bl	800452e <HAL_UART_Transmit>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000274 	.word	0x20000274

080021a0 <uartHardwareReceivePolling>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	2201      	movs	r2, #1
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <uartHardwareReceivePolling+0x2c>)
 80021b4:	f002 fa4d 	bl	8004652 <HAL_UART_Receive>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000274 	.word	0x20000274

080021d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021d6:	490e      	ldr	r1, [pc, #56]	; (8002210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021ec:	4c0b      	ldr	r4, [pc, #44]	; (800221c <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021fa:	f7ff facb 	bl	8001794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fe:	f003 fa05 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002202:	f7ff f843 	bl	800128c <main>
  bx  lr    
 8002206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800220c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002210:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8002214:	08007138 	.word	0x08007138
  ldr r2, =_sbss
 8002218:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 800221c:	20000350 	.word	0x20000350

08002220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_Init+0x40>)
 800222e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_Init+0x40>)
 800223a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800223e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_Init+0x40>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <HAL_Init+0x40>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f000 f92b 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002252:	200f      	movs	r0, #15
 8002254:	f000 f808 	bl	8002268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002258:	f7ff fa00 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023c00 	.word	0x40023c00

08002268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x54>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_InitTick+0x58>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4619      	mov	r1, r3
 800227a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f943 	bl	8002512 <HAL_SYSTICK_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00e      	b.n	80022b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b0f      	cmp	r3, #15
 800229a:	d80a      	bhi.n	80022b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800229c:	2200      	movs	r2, #0
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f000 f90b 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <HAL_InitTick+0x5c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000000 	.word	0x20000000
 80022c0:	2000008c 	.word	0x2000008c
 80022c4:	20000088 	.word	0x20000088

080022c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x20>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x24>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_IncTick+0x24>)
 80022da:	6013      	str	r3, [r2, #0]
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	2000008c 	.word	0x2000008c
 80022ec:	2000033c 	.word	0x2000033c

080022f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return uwTick;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_GetTick+0x14>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	2000033c 	.word	0x2000033c

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff3e 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff31 	bl	800236c <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff feda 	bl	80022f0 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d008      	beq.n	800255c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e052      	b.n	8002602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0216 	bic.w	r2, r2, #22
 800256a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800257a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_DMA_Abort+0x62>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	e013      	b.n	80025d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ae:	f7ff fe9f 	bl	80022f0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d90c      	bls.n	80025d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e015      	b.n	8002602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e4      	bne.n	80025ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	223f      	movs	r2, #63	; 0x3f
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d004      	beq.n	8002628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e00c      	b.n	8002642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2205      	movs	r2, #5
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e177      	b.n	800295c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 8166 	bne.w	8002956 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d005      	beq.n	80026a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d130      	bne.n	8002704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80c0 	beq.w	8002956 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b66      	ldr	r3, [pc, #408]	; (8002974 <HAL_GPIO_Init+0x324>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	4a65      	ldr	r2, [pc, #404]	; (8002974 <HAL_GPIO_Init+0x324>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	; 0x44
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_GPIO_Init+0x324>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f2:	4a61      	ldr	r2, [pc, #388]	; (8002978 <HAL_GPIO_Init+0x328>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d037      	beq.n	800288e <HAL_GPIO_Init+0x23e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a57      	ldr	r2, [pc, #348]	; (8002980 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d031      	beq.n	800288a <HAL_GPIO_Init+0x23a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a56      	ldr	r2, [pc, #344]	; (8002984 <HAL_GPIO_Init+0x334>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x236>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a55      	ldr	r2, [pc, #340]	; (8002988 <HAL_GPIO_Init+0x338>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x232>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a54      	ldr	r2, [pc, #336]	; (800298c <HAL_GPIO_Init+0x33c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x22e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a53      	ldr	r2, [pc, #332]	; (8002990 <HAL_GPIO_Init+0x340>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x22a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a52      	ldr	r2, [pc, #328]	; (8002994 <HAL_GPIO_Init+0x344>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x226>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a51      	ldr	r2, [pc, #324]	; (8002998 <HAL_GPIO_Init+0x348>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x222>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a50      	ldr	r2, [pc, #320]	; (800299c <HAL_GPIO_Init+0x34c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x21e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_GPIO_Init+0x350>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x21a>
 8002866:	2309      	movs	r3, #9
 8002868:	e012      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800286a:	230a      	movs	r3, #10
 800286c:	e010      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800286e:	2308      	movs	r3, #8
 8002870:	e00e      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002872:	2307      	movs	r3, #7
 8002874:	e00c      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002876:	2306      	movs	r3, #6
 8002878:	e00a      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800287a:	2305      	movs	r3, #5
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800287e:	2304      	movs	r3, #4
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x240>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x240>
 800288e:	2300      	movs	r3, #0
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	; (8002978 <HAL_GPIO_Init+0x328>)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_GPIO_Init+0x354>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d2:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <HAL_GPIO_Init+0x354>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_GPIO_Init+0x354>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028fc:	4a29      	ldr	r2, [pc, #164]	; (80029a4 <HAL_GPIO_Init+0x354>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_GPIO_Init+0x354>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002926:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <HAL_GPIO_Init+0x354>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_GPIO_Init+0x354>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_GPIO_Init+0x354>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	f67f ae84 	bls.w	800266c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40013800 	.word	0x40013800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40021400 	.word	0x40021400
 8002994:	40021800 	.word	0x40021800
 8002998:	40021c00 	.word	0x40021c00
 800299c:	40022000 	.word	0x40022000
 80029a0:	40022400 	.word	0x40022400
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e267      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c6:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4b85      	ldr	r3, [pc, #532]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d112      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b82      	ldr	r3, [pc, #520]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b7e      	ldr	r3, [pc, #504]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e242      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b70      	ldr	r3, [pc, #448]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6c      	ldr	r2, [pc, #432]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b69      	ldr	r3, [pc, #420]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a68      	ldr	r2, [pc, #416]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b66      	ldr	r3, [pc, #408]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a65      	ldr	r2, [pc, #404]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fc46 	bl	80022f0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7ff fc42 	bl	80022f0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e207      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff fc32 	bl	80022f0 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff fc2e 	bl	80022f0 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1f3      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1c7      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff fbe7 	bl	80022f0 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b26:	f7ff fbe3 	bl	80022f0 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e1a8      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4925      	ldr	r1, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x244>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7ff fbc6 	bl	80022f0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7ff fbc2 	bl	80022f0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e187      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d036      	beq.n	8002c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fba6 	bl	80022f0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff fba2 	bl	80022f0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e167      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
 8002bc6:	e01b      	b.n	8002c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x248>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7ff fb8f 	bl	80022f0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e00e      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fb8b 	bl	80022f0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d907      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e150      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002be8:	40023800 	.word	0x40023800
 8002bec:	42470000 	.word	0x42470000
 8002bf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ea      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8097 	beq.w	8002d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b7d      	ldr	r3, [pc, #500]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a7c      	ldr	r2, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b7a      	ldr	r3, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3e:	4b77      	ldr	r3, [pc, #476]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d118      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4a:	4b74      	ldr	r3, [pc, #464]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a73      	ldr	r2, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c56:	f7ff fb4b 	bl	80022f0 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7ff fb47 	bl	80022f0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e10c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	4b6a      	ldr	r3, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x474>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2ea>
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x30c>
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a5e      	ldr	r2, [pc, #376]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	e00b      	b.n	8002ccc <HAL_RCC_OscConfig+0x324>
 8002cb4:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc0:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a54      	ldr	r2, [pc, #336]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fb0c 	bl	80022f0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7ff fb08 	bl	80022f0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0cb      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ee      	beq.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d00:	f7ff faf6 	bl	80022f0 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7ff faf2 	bl	80022f0 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0b5      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ee      	bne.n	8002d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a1 	beq.w	8002e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d46:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d05c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d141      	bne.n	8002dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff fac6 	bl	80022f0 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7ff fac2 	bl	80022f0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e087      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	491b      	ldr	r1, [pc, #108]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db6:	f7ff fa9b 	bl	80022f0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7ff fa97 	bl	80022f0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e05c      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x416>
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <HAL_RCC_OscConfig+0x478>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff fa84 	bl	80022f0 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dec:	f7ff fa80 	bl	80022f0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e045      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HAL_RCC_OscConfig+0x470>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
 8002e0a:	e03d      	b.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e038      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_RCC_OscConfig+0x4ec>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d028      	beq.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d121      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d11a      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e54:	4013      	ands	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cc      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e067      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4934      	ldr	r1, [pc, #208]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7ff f9b2 	bl	80022f0 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7ff f9ae 	bl	80022f0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f912 	bl	8002268 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00
 8003054:	40023800 	.word	0x40023800
 8003058:	0800709c 	.word	0x0800709c
 800305c:	20000000 	.word	0x20000000
 8003060:	20000088 	.word	0x20000088

08003064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b090      	sub	sp, #64	; 0x40
 800306a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
 8003070:	2300      	movs	r3, #0
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003074:	2300      	movs	r3, #0
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800307c:	4b59      	ldr	r3, [pc, #356]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d00d      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003088:	2b08      	cmp	r3, #8
 800308a:	f200 80a1 	bhi.w	80031d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x34>
 8003092:	2b04      	cmp	r3, #4
 8003094:	d003      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0x3a>
 8003096:	e09b      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800309c:	e09b      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800309e:	4b53      	ldr	r3, [pc, #332]	; (80031ec <HAL_RCC_GetSysClockFreq+0x188>)
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030a2:	e098      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a4:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ae:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d028      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	2200      	movs	r2, #0
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	627a      	str	r2, [r7, #36]	; 0x24
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030cc:	2100      	movs	r1, #0
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_GetSysClockFreq+0x188>)
 80030d0:	fb03 f201 	mul.w	r2, r3, r1
 80030d4:	2300      	movs	r3, #0
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	4413      	add	r3, r2
 80030dc:	4a43      	ldr	r2, [pc, #268]	; (80031ec <HAL_RCC_GetSysClockFreq+0x188>)
 80030de:	fba0 1202 	umull	r1, r2, r0, r2
 80030e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030e4:	460a      	mov	r2, r1
 80030e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80030e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ea:	4413      	add	r3, r2
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	2200      	movs	r2, #0
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	61fa      	str	r2, [r7, #28]
 80030f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030fe:	f7fd fd6b 	bl	8000bd8 <__aeabi_uldivmod>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4613      	mov	r3, r2
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310a:	e053      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310c:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	2200      	movs	r2, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	617a      	str	r2, [r7, #20]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800311e:	f04f 0b00 	mov.w	fp, #0
 8003122:	4652      	mov	r2, sl
 8003124:	465b      	mov	r3, fp
 8003126:	f04f 0000 	mov.w	r0, #0
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	0159      	lsls	r1, r3, #5
 8003130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003134:	0150      	lsls	r0, r2, #5
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	ebb2 080a 	subs.w	r8, r2, sl
 800313e:	eb63 090b 	sbc.w	r9, r3, fp
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800314e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003152:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003156:	ebb2 0408 	subs.w	r4, r2, r8
 800315a:	eb63 0509 	sbc.w	r5, r3, r9
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	00eb      	lsls	r3, r5, #3
 8003168:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800316c:	00e2      	lsls	r2, r4, #3
 800316e:	4614      	mov	r4, r2
 8003170:	461d      	mov	r5, r3
 8003172:	eb14 030a 	adds.w	r3, r4, sl
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	eb45 030b 	adc.w	r3, r5, fp
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800318a:	4629      	mov	r1, r5
 800318c:	028b      	lsls	r3, r1, #10
 800318e:	4621      	mov	r1, r4
 8003190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003194:	4621      	mov	r1, r4
 8003196:	028a      	lsls	r2, r1, #10
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319e:	2200      	movs	r2, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	60fa      	str	r2, [r7, #12]
 80031a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a8:	f7fd fd16 	bl	8000bd8 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4613      	mov	r3, r2
 80031b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80031d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3740      	adds	r7, #64	; 0x40
 80031dc:	46bd      	mov	sp, r7
 80031de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	017d7840 	.word	0x017d7840

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000000 	.word	0x20000000

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	080070ac 	.word	0x080070ac

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffdc 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0b5b      	lsrs	r3, r3, #13
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4903      	ldr	r1, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5ccb      	ldrb	r3, [r1, r3]
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	080070ac 	.word	0x080070ac

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e041      	b.n	80032ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fb70 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fd0a 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d001      	beq.n	8003310 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e046      	b.n	800339e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a23      	ldr	r2, [pc, #140]	; (80033ac <HAL_TIM_Base_Start+0xb4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d01d      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_TIM_Base_Start+0xb8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_TIM_Base_Start+0xbc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_TIM_Base_Start+0xc0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_TIM_Base_Start+0xc4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_TIM_Base_Start+0xc8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_TIM_Base_Start+0x70>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_TIM_Base_Start+0xcc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d111      	bne.n	800338c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b06      	cmp	r3, #6
 8003378:	d010      	beq.n	800339c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	e007      	b.n	800339c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40010400 	.word	0x40010400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40001800 	.word	0x40001800

080033c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <HAL_TIM_Base_Stop+0x38>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	f240 4344 	movw	r3, #1092	; 0x444
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_TIM_Base_Stop+0x38>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e04e      	b.n	80034ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_TIM_Base_Start_IT+0xc4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d022      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d01d      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d010      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	e007      	b.n	80034cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40010400 	.word	0x40010400
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40001800 	.word	0x40001800

080034f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f839 	bl	8003596 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fbba 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x24>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e022      	b.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d109      	bne.n	80035ea <HAL_TIM_PWM_Start+0x3e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e015      	b.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d109      	bne.n	8003604 <HAL_TIM_PWM_Start+0x58>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e008      	b.n	8003616 <HAL_TIM_PWM_Start+0x6a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e07c      	b.n	8003718 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0x82>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800362c:	e013      	b.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Start+0x92>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800363c:	e00b      	b.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Start+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800364c:	e003      	b.n	8003656 <HAL_TIM_PWM_Start+0xaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2201      	movs	r2, #1
 800365c:	6839      	ldr	r1, [r7, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fe10 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <HAL_TIM_PWM_Start+0x174>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <HAL_TIM_PWM_Start+0xcc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <HAL_TIM_PWM_Start+0x178>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_TIM_PWM_Start+0xd0>
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_TIM_PWM_Start+0xd2>
 800367c:	2300      	movs	r3, #0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a22      	ldr	r2, [pc, #136]	; (8003720 <HAL_TIM_PWM_Start+0x174>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d01d      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_TIM_PWM_Start+0x17c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d018      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	; (800372c <HAL_TIM_PWM_Start+0x180>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_TIM_PWM_Start+0x184>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a16      	ldr	r2, [pc, #88]	; (8003724 <HAL_TIM_PWM_Start+0x178>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d009      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_TIM_PWM_Start+0x188>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_PWM_Start+0x136>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_TIM_PWM_Start+0x18c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d111      	bne.n	8003706 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d010      	beq.n	8003716 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	e007      	b.n	8003716 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40014000 	.word	0x40014000
 8003738:	40001800 	.word	0x40001800

0800373c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b02      	cmp	r3, #2
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0202 	mvn.w	r2, #2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa77 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa69 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa7a 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0204 	mvn.w	r2, #4
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa4d 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa3f 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa50 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b08      	cmp	r3, #8
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0208 	mvn.w	r2, #8
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2204      	movs	r2, #4
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa23 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa15 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fa26 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b10      	cmp	r3, #16
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b10      	cmp	r3, #16
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2208      	movs	r2, #8
 800386a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9f9 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f9eb 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f9fc 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0201 	mvn.w	r2, #1
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fe f8f6 	bl	8001aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fdca 	bl	8004480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9c1 	bl	8003c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0220 	mvn.w	r2, #32
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fd94 	bl	800446c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003966:	2302      	movs	r3, #2
 8003968:	e0ae      	b.n	8003ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	f200 809f 	bhi.w	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	080039b5 	.word	0x080039b5
 8003984:	08003ab9 	.word	0x08003ab9
 8003988:	08003ab9 	.word	0x08003ab9
 800398c:	08003ab9 	.word	0x08003ab9
 8003990:	080039f5 	.word	0x080039f5
 8003994:	08003ab9 	.word	0x08003ab9
 8003998:	08003ab9 	.word	0x08003ab9
 800399c:	08003ab9 	.word	0x08003ab9
 80039a0:	08003a37 	.word	0x08003a37
 80039a4:	08003ab9 	.word	0x08003ab9
 80039a8:	08003ab9 	.word	0x08003ab9
 80039ac:	08003ab9 	.word	0x08003ab9
 80039b0:	08003a77 	.word	0x08003a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fa18 	bl	8003df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0208 	orr.w	r2, r2, #8
 80039ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0204 	bic.w	r2, r2, #4
 80039de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6999      	ldr	r1, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	619a      	str	r2, [r3, #24]
      break;
 80039f2:	e064      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fa68 	bl	8003ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	619a      	str	r2, [r3, #24]
      break;
 8003a34:	e043      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fabd 	bl	8003fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	69da      	ldr	r2, [r3, #28]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0208 	orr.w	r2, r2, #8
 8003a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0204 	bic.w	r2, r2, #4
 8003a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69d9      	ldr	r1, [r3, #28]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	61da      	str	r2, [r3, #28]
      break;
 8003a74:	e023      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fb11 	bl	80040a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69d9      	ldr	r1, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	021a      	lsls	r2, r3, #8
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	61da      	str	r2, [r3, #28]
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIM_ConfigClockSource+0x1c>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e0b4      	b.n	8003c56 <HAL_TIM_ConfigClockSource+0x186>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d03e      	beq.n	8003ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2a:	f200 8087 	bhi.w	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	f000 8086 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x172>
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	d87f      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d01a      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0xa6>
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d87b      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b44:	2b60      	cmp	r3, #96	; 0x60
 8003b46:	d050      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0x11a>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d877      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4c:	2b50      	cmp	r3, #80	; 0x50
 8003b4e:	d03c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0xfa>
 8003b50:	2b50      	cmp	r3, #80	; 0x50
 8003b52:	d873      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d058      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0x13a>
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d86f      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	d064      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15a>
 8003b60:	2b30      	cmp	r3, #48	; 0x30
 8003b62:	d86b      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d060      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15a>
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d867      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d05c      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15a>
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d05a      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	e062      	b.n	8003c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f000 fb5d 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	609a      	str	r2, [r3, #8]
      break;
 8003ba2:	e04f      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6899      	ldr	r1, [r3, #8]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f000 fb46 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc6:	609a      	str	r2, [r3, #8]
      break;
 8003bc8:	e03c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f000 faba 	bl	8004150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2150      	movs	r1, #80	; 0x50
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fb13 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003be8:	e02c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f000 fad9 	bl	80041ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2160      	movs	r1, #96	; 0x60
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fb03 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c08:	e01c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 fa9a 	bl	8004150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2140      	movs	r1, #64	; 0x40
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 faf3 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f000 faea 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c3a:	e003      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d00f      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d027      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d023      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d017      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <TIM_Base_SetConfig+0x128>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <TIM_Base_SetConfig+0x12c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <TIM_Base_SetConfig+0x130>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <TIM_Base_SetConfig+0x134>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <TIM_Base_SetConfig+0x138>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <TIM_Base_SetConfig+0x13c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0xf8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800
 8003de4:	40001800 	.word	0x40001800
 8003de8:	40001c00 	.word	0x40001c00
 8003dec:	40002000 	.word	0x40002000

08003df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC1_SetConfig+0x64>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10c      	bne.n	8003e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0308 	bic.w	r3, r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC1_SetConfig+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0210 	bic.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0320 	bic.w	r3, r3, #32
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <TIM_OC2_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC2_SetConfig+0x68>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <TIM_OC2_SetConfig+0xe8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10d      	bne.n	8003f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <TIM_OC2_SetConfig+0xe4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC2_SetConfig+0x94>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <TIM_OC2_SetConfig+0xe8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d113      	bne.n	8003f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400

08003fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <TIM_OC3_SetConfig+0xe0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_OC3_SetConfig+0x66>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <TIM_OC3_SetConfig+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a16      	ldr	r2, [pc, #88]	; (800409c <TIM_OC3_SetConfig+0xe0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC3_SetConfig+0x92>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <TIM_OC3_SetConfig+0xe4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d113      	bne.n	8004076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <TIM_OC4_SetConfig+0xa4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC4_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <TIM_OC4_SetConfig+0xa8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40010400 	.word	0x40010400

08004150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 030a 	bic.w	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	031b      	lsls	r3, r3, #12
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e05a      	b.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a21      	ldr	r2, [pc, #132]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d01d      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40001800 	.word	0x40001800

080043c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e03d      	b.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e03f      	b.n	8004526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fb5e 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fe1d 	bl	8005118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800450c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	d17c      	bne.n	8004648 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_UART_Transmit+0x2c>
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e075      	b.n	800464a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_UART_Transmit+0x3e>
 8004568:	2302      	movs	r3, #2
 800456a:	e06e      	b.n	800464a <HAL_UART_Transmit+0x11c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004582:	f7fd feb5 	bl	80022f0 <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	88fa      	ldrh	r2, [r7, #6]
 800458c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	88fa      	ldrh	r2, [r7, #6]
 8004592:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d108      	bne.n	80045b0 <HAL_UART_Transmit+0x82>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d104      	bne.n	80045b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e003      	b.n	80045b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045c0:	e02a      	b.n	8004618 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fb9b 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e036      	b.n	800464a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10b      	bne.n	80045fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	3302      	adds	r3, #2
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	e007      	b.n	800460a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	781a      	ldrb	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3301      	adds	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1cf      	bne.n	80045c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fb6b 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e000      	b.n	800464a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004648:	2302      	movs	r3, #2
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af02      	add	r7, sp, #8
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	4613      	mov	r3, r2
 8004660:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b20      	cmp	r3, #32
 8004670:	f040 808c 	bne.w	800478c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_UART_Receive+0x2e>
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e084      	b.n	800478e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Receive+0x40>
 800468e:	2302      	movs	r3, #2
 8004690:	e07d      	b.n	800478e <HAL_UART_Receive+0x13c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2222      	movs	r2, #34	; 0x22
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ae:	f7fd fe1f 	bl	80022f0 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d108      	bne.n	80046dc <HAL_UART_Receive+0x8a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	e003      	b.n	80046e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046ec:	e043      	b.n	8004776 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2120      	movs	r1, #32
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fb05 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e042      	b.n	800478e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	b29a      	uxth	r2, r3
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	3302      	adds	r3, #2
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e01f      	b.n	8004768 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d007      	beq.n	8004742 <HAL_UART_Receive+0xf0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_UART_Receive+0xfe>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e008      	b.n	8004762 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1b6      	bne.n	80046ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b0ba      	sub	sp, #232	; 0xe8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_UART_IRQHandler+0x66>
 80047ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fbd3 	bl	8004fa2 <UART_Receive_IT>
      return;
 80047fc:	e256      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80de 	beq.w	80049c4 <HAL_UART_IRQHandler+0x22c>
 8004808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004818:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80d1 	beq.w	80049c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_UART_IRQHandler+0xae>
 800482e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_UART_IRQHandler+0xd2>
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0202 	orr.w	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_UART_IRQHandler+0xf6>
 8004876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d011      	beq.n	80048be <HAL_UART_IRQHandler+0x126>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0208 	orr.w	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 81ed 	beq.w	8004ca2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_UART_IRQHandler+0x14e>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fb5e 	bl	8004fa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_UART_IRQHandler+0x17a>
 800490a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04f      	beq.n	80049b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa66 	bl	8004de4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d141      	bne.n	80049aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800493c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3314      	adds	r3, #20
 800494e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004952:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800495e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800496a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1d9      	bne.n	8004926 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	2b00      	cmp	r3, #0
 8004978:	d013      	beq.n	80049a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	4a7d      	ldr	r2, [pc, #500]	; (8004b74 <HAL_UART_IRQHandler+0x3dc>)
 8004980:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	4618      	mov	r0, r3
 8004988:	f7fd fe3f 	bl	800260a <HAL_DMA_Abort_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800499c:	4610      	mov	r0, r2
 800499e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	e00e      	b.n	80049c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f99a 	bl	8004cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	e00a      	b.n	80049c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f996 	bl	8004cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	e006      	b.n	80049c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f992 	bl	8004cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049be:	e170      	b.n	8004ca2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	bf00      	nop
    return;
 80049c2:	e16e      	b.n	8004ca2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 814a 	bne.w	8004c62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8143 	beq.w	8004c62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 813c 	beq.w	8004c62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	f040 80b4 	bne.w	8004b78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8140 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	f080 8139 	bcs.w	8004ca6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	f000 8088 	beq.w	8004b5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a86:	e841 2300 	strex	r3, r2, [r1]
 8004a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1d9      	bne.n	8004a4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004aba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004abe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ac2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e1      	bne.n	8004a96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004af6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004af8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004afc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e3      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	f023 0310 	bic.w	r3, r3, #16
 8004b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e3      	bne.n	8004b18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd fce8 	bl	800252a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8c0 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b70:	e099      	b.n	8004ca6 <HAL_UART_IRQHandler+0x50e>
 8004b72:	bf00      	nop
 8004b74:	08004eab 	.word	0x08004eab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 808b 	beq.w	8004caa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8086 	beq.w	8004caa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	623b      	str	r3, [r7, #32]
   return(result);
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e3      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0310 	bic.w	r3, r3, #16
 8004c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c40:	61fa      	str	r2, [r7, #28]
 8004c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c44:	69b9      	ldr	r1, [r7, #24]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	e841 2300 	strex	r3, r2, [r1]
 8004c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1e3      	bne.n	8004c1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c58:	4619      	mov	r1, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f848 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c60:	e023      	b.n	8004caa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_UART_IRQHandler+0x4ea>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f929 	bl	8004ed2 <UART_Transmit_IT>
    return;
 8004c80:	e014      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00e      	beq.n	8004cac <HAL_UART_IRQHandler+0x514>
 8004c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f969 	bl	8004f72 <UART_EndTransmit_IT>
    return;
 8004ca0:	e004      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
    return;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
      return;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_UART_IRQHandler+0x514>
      return;
 8004caa:	bf00      	nop
  }
}
 8004cac:	37e8      	adds	r7, #232	; 0xe8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b090      	sub	sp, #64	; 0x40
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d18:	e050      	b.n	8004dbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d04c      	beq.n	8004dbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d28:	f7fd fae2 	bl	80022f0 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d241      	bcs.n	8004dbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d58:	637a      	str	r2, [r7, #52]	; 0x34
 8004d5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e5      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3314      	adds	r3, #20
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d8c:	623a      	str	r2, [r7, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e00f      	b.n	8004ddc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d09f      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3740      	adds	r7, #64	; 0x40
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b095      	sub	sp, #84	; 0x54
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0c:	643a      	str	r2, [r7, #64]	; 0x40
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3314      	adds	r3, #20
 8004e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f023 0301 	bic.w	r3, r3, #1
 8004e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e5      	bne.n	8004e20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d119      	bne.n	8004e90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f023 0310 	bic.w	r3, r3, #16
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7c:	61ba      	str	r2, [r7, #24]
 8004e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	6979      	ldr	r1, [r7, #20]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e9e:	bf00      	nop
 8004ea0:	3754      	adds	r7, #84	; 0x54
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff ff09 	bl	8004cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b21      	cmp	r3, #33	; 0x21
 8004ee4:	d13e      	bne.n	8004f64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eee:	d114      	bne.n	8004f1a <UART_Transmit_IT+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]
 8004f18:	e008      	b.n	8004f2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6211      	str	r1, [r2, #32]
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10f      	bne.n	8004f60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff fe8e 	bl	8004cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b08c      	sub	sp, #48	; 0x30
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b22      	cmp	r3, #34	; 0x22
 8004fb4:	f040 80ab 	bne.w	800510e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc0:	d117      	bne.n	8004ff2 <UART_Receive_IT+0x50>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d113      	bne.n	8004ff2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	1c9a      	adds	r2, r3, #2
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ff0:	e026      	b.n	8005040 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d007      	beq.n	8005016 <UART_Receive_IT+0x74>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <UART_Receive_IT+0x82>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e008      	b.n	8005036 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005030:	b2da      	uxtb	r2, r3
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29b      	uxth	r3, r3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4619      	mov	r1, r3
 800504e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005050:	2b00      	cmp	r3, #0
 8005052:	d15a      	bne.n	800510a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0220 	bic.w	r2, r2, #32
 8005062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0201 	bic.w	r2, r2, #1
 8005082:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	2b01      	cmp	r3, #1
 8005092:	d135      	bne.n	8005100 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	330c      	adds	r3, #12
 80050a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	613b      	str	r3, [r7, #16]
   return(result);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f023 0310 	bic.w	r3, r3, #16
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	623a      	str	r2, [r7, #32]
 80050bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	69f9      	ldr	r1, [r7, #28]
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d10a      	bne.n	80050f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff fdf9 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
 80050fe:	e002      	b.n	8005106 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fde1 	bl	8004cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e002      	b.n	8005110 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e000      	b.n	8005110 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	3730      	adds	r7, #48	; 0x30
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800511c:	b0c0      	sub	sp, #256	; 0x100
 800511e:	af00      	add	r7, sp, #0
 8005120:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	68d9      	ldr	r1, [r3, #12]
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	ea40 0301 	orr.w	r3, r0, r1
 8005140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	431a      	orrs	r2, r3
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	431a      	orrs	r2, r3
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005170:	f021 010c 	bic.w	r1, r1, #12
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800517e:	430b      	orrs	r3, r1
 8005180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800518e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005192:	6999      	ldr	r1, [r3, #24]
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	ea40 0301 	orr.w	r3, r0, r1
 800519e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b8f      	ldr	r3, [pc, #572]	; (80053e4 <UART_SetConfig+0x2cc>)
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d005      	beq.n	80051b8 <UART_SetConfig+0xa0>
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <UART_SetConfig+0x2d0>)
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d104      	bne.n	80051c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051b8:	f7fe f83a 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 80051bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051c0:	e003      	b.n	80051ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c2:	f7fe f821 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80051c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	f040 810c 	bne.w	80053f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	1891      	adds	r1, r2, r2
 80051f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051f2:	415b      	adcs	r3, r3
 80051f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051fa:	4621      	mov	r1, r4
 80051fc:	eb12 0801 	adds.w	r8, r2, r1
 8005200:	4629      	mov	r1, r5
 8005202:	eb43 0901 	adc.w	r9, r3, r1
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521a:	4690      	mov	r8, r2
 800521c:	4699      	mov	r9, r3
 800521e:	4623      	mov	r3, r4
 8005220:	eb18 0303 	adds.w	r3, r8, r3
 8005224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005228:	462b      	mov	r3, r5
 800522a:	eb49 0303 	adc.w	r3, r9, r3
 800522e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800523e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005246:	460b      	mov	r3, r1
 8005248:	18db      	adds	r3, r3, r3
 800524a:	653b      	str	r3, [r7, #80]	; 0x50
 800524c:	4613      	mov	r3, r2
 800524e:	eb42 0303 	adc.w	r3, r2, r3
 8005252:	657b      	str	r3, [r7, #84]	; 0x54
 8005254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800525c:	f7fb fcbc 	bl	8000bd8 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <UART_SetConfig+0x2d4>)
 8005266:	fba3 2302 	umull	r2, r3, r3, r2
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	011c      	lsls	r4, r3, #4
 800526e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005278:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800527c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	1891      	adds	r1, r2, r2
 8005286:	64b9      	str	r1, [r7, #72]	; 0x48
 8005288:	415b      	adcs	r3, r3
 800528a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005290:	4641      	mov	r1, r8
 8005292:	eb12 0a01 	adds.w	sl, r2, r1
 8005296:	4649      	mov	r1, r9
 8005298:	eb43 0b01 	adc.w	fp, r3, r1
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b0:	4692      	mov	sl, r2
 80052b2:	469b      	mov	fp, r3
 80052b4:	4643      	mov	r3, r8
 80052b6:	eb1a 0303 	adds.w	r3, sl, r3
 80052ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052be:	464b      	mov	r3, r9
 80052c0:	eb4b 0303 	adc.w	r3, fp, r3
 80052c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052dc:	460b      	mov	r3, r1
 80052de:	18db      	adds	r3, r3, r3
 80052e0:	643b      	str	r3, [r7, #64]	; 0x40
 80052e2:	4613      	mov	r3, r2
 80052e4:	eb42 0303 	adc.w	r3, r2, r3
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052f2:	f7fb fc71 	bl	8000bd8 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <UART_SetConfig+0x2d4>)
 80052fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2264      	movs	r2, #100	; 0x64
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	1acb      	subs	r3, r1, r3
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005312:	4b36      	ldr	r3, [pc, #216]	; (80053ec <UART_SetConfig+0x2d4>)
 8005314:	fba3 2302 	umull	r2, r3, r3, r2
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005320:	441c      	add	r4, r3
 8005322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005326:	2200      	movs	r2, #0
 8005328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800532c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005334:	4642      	mov	r2, r8
 8005336:	464b      	mov	r3, r9
 8005338:	1891      	adds	r1, r2, r2
 800533a:	63b9      	str	r1, [r7, #56]	; 0x38
 800533c:	415b      	adcs	r3, r3
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005344:	4641      	mov	r1, r8
 8005346:	1851      	adds	r1, r2, r1
 8005348:	6339      	str	r1, [r7, #48]	; 0x30
 800534a:	4649      	mov	r1, r9
 800534c:	414b      	adcs	r3, r1
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800535c:	4659      	mov	r1, fp
 800535e:	00cb      	lsls	r3, r1, #3
 8005360:	4651      	mov	r1, sl
 8005362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005366:	4651      	mov	r1, sl
 8005368:	00ca      	lsls	r2, r1, #3
 800536a:	4610      	mov	r0, r2
 800536c:	4619      	mov	r1, r3
 800536e:	4603      	mov	r3, r0
 8005370:	4642      	mov	r2, r8
 8005372:	189b      	adds	r3, r3, r2
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005378:	464b      	mov	r3, r9
 800537a:	460a      	mov	r2, r1
 800537c:	eb42 0303 	adc.w	r3, r2, r3
 8005380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005390:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005398:	460b      	mov	r3, r1
 800539a:	18db      	adds	r3, r3, r3
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	4613      	mov	r3, r2
 80053a0:	eb42 0303 	adc.w	r3, r2, r3
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053ae:	f7fb fc13 	bl	8000bd8 <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <UART_SetConfig+0x2d4>)
 80053b8:	fba3 1302 	umull	r1, r3, r3, r2
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	2164      	movs	r1, #100	; 0x64
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	3332      	adds	r3, #50	; 0x32
 80053ca:	4a08      	ldr	r2, [pc, #32]	; (80053ec <UART_SetConfig+0x2d4>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	f003 0207 	and.w	r2, r3, #7
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4422      	add	r2, r4
 80053de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e0:	e105      	b.n	80055ee <UART_SetConfig+0x4d6>
 80053e2:	bf00      	nop
 80053e4:	40011000 	.word	0x40011000
 80053e8:	40011400 	.word	0x40011400
 80053ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005402:	4642      	mov	r2, r8
 8005404:	464b      	mov	r3, r9
 8005406:	1891      	adds	r1, r2, r2
 8005408:	6239      	str	r1, [r7, #32]
 800540a:	415b      	adcs	r3, r3
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
 800540e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005412:	4641      	mov	r1, r8
 8005414:	1854      	adds	r4, r2, r1
 8005416:	4649      	mov	r1, r9
 8005418:	eb43 0501 	adc.w	r5, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	00eb      	lsls	r3, r5, #3
 8005426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542a:	00e2      	lsls	r2, r4, #3
 800542c:	4614      	mov	r4, r2
 800542e:	461d      	mov	r5, r3
 8005430:	4643      	mov	r3, r8
 8005432:	18e3      	adds	r3, r4, r3
 8005434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005438:	464b      	mov	r3, r9
 800543a:	eb45 0303 	adc.w	r3, r5, r3
 800543e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800544e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800545e:	4629      	mov	r1, r5
 8005460:	008b      	lsls	r3, r1, #2
 8005462:	4621      	mov	r1, r4
 8005464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005468:	4621      	mov	r1, r4
 800546a:	008a      	lsls	r2, r1, #2
 800546c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005470:	f7fb fbb2 	bl	8000bd8 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4b60      	ldr	r3, [pc, #384]	; (80055fc <UART_SetConfig+0x4e4>)
 800547a:	fba3 2302 	umull	r2, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	011c      	lsls	r4, r3, #4
 8005482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005486:	2200      	movs	r2, #0
 8005488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800548c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	1891      	adds	r1, r2, r2
 800549a:	61b9      	str	r1, [r7, #24]
 800549c:	415b      	adcs	r3, r3
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a4:	4641      	mov	r1, r8
 80054a6:	1851      	adds	r1, r2, r1
 80054a8:	6139      	str	r1, [r7, #16]
 80054aa:	4649      	mov	r1, r9
 80054ac:	414b      	adcs	r3, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054bc:	4659      	mov	r1, fp
 80054be:	00cb      	lsls	r3, r1, #3
 80054c0:	4651      	mov	r1, sl
 80054c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c6:	4651      	mov	r1, sl
 80054c8:	00ca      	lsls	r2, r1, #3
 80054ca:	4610      	mov	r0, r2
 80054cc:	4619      	mov	r1, r3
 80054ce:	4603      	mov	r3, r0
 80054d0:	4642      	mov	r2, r8
 80054d2:	189b      	adds	r3, r3, r2
 80054d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d8:	464b      	mov	r3, r9
 80054da:	460a      	mov	r2, r1
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054fc:	4649      	mov	r1, r9
 80054fe:	008b      	lsls	r3, r1, #2
 8005500:	4641      	mov	r1, r8
 8005502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005506:	4641      	mov	r1, r8
 8005508:	008a      	lsls	r2, r1, #2
 800550a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800550e:	f7fb fb63 	bl	8000bd8 <__aeabi_uldivmod>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <UART_SetConfig+0x4e4>)
 8005518:	fba3 1302 	umull	r1, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	2164      	movs	r1, #100	; 0x64
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	3332      	adds	r3, #50	; 0x32
 800552a:	4a34      	ldr	r2, [pc, #208]	; (80055fc <UART_SetConfig+0x4e4>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005536:	441c      	add	r4, r3
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553c:	2200      	movs	r2, #0
 800553e:	673b      	str	r3, [r7, #112]	; 0x70
 8005540:	677a      	str	r2, [r7, #116]	; 0x74
 8005542:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005546:	4642      	mov	r2, r8
 8005548:	464b      	mov	r3, r9
 800554a:	1891      	adds	r1, r2, r2
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	415b      	adcs	r3, r3
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005556:	4641      	mov	r1, r8
 8005558:	1851      	adds	r1, r2, r1
 800555a:	6039      	str	r1, [r7, #0]
 800555c:	4649      	mov	r1, r9
 800555e:	414b      	adcs	r3, r1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800556e:	4659      	mov	r1, fp
 8005570:	00cb      	lsls	r3, r1, #3
 8005572:	4651      	mov	r1, sl
 8005574:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005578:	4651      	mov	r1, sl
 800557a:	00ca      	lsls	r2, r1, #3
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	4603      	mov	r3, r0
 8005582:	4642      	mov	r2, r8
 8005584:	189b      	adds	r3, r3, r2
 8005586:	66bb      	str	r3, [r7, #104]	; 0x68
 8005588:	464b      	mov	r3, r9
 800558a:	460a      	mov	r2, r1
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	663b      	str	r3, [r7, #96]	; 0x60
 800559c:	667a      	str	r2, [r7, #100]	; 0x64
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055aa:	4649      	mov	r1, r9
 80055ac:	008b      	lsls	r3, r1, #2
 80055ae:	4641      	mov	r1, r8
 80055b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b4:	4641      	mov	r1, r8
 80055b6:	008a      	lsls	r2, r1, #2
 80055b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055bc:	f7fb fb0c 	bl	8000bd8 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <UART_SetConfig+0x4e4>)
 80055c6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2164      	movs	r1, #100	; 0x64
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a08      	ldr	r2, [pc, #32]	; (80055fc <UART_SetConfig+0x4e4>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4422      	add	r2, r4
 80055ec:	609a      	str	r2, [r3, #8]
}
 80055ee:	bf00      	nop
 80055f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055f4:	46bd      	mov	sp, r7
 80055f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055fa:	bf00      	nop
 80055fc:	51eb851f 	.word	0x51eb851f

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20000090 	.word	0x20000090

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4d0d      	ldr	r5, [pc, #52]	; (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005612:	1b64      	subs	r4, r4, r5
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2600      	movs	r6, #0
 8005618:	42a6      	cmp	r6, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4d0b      	ldr	r5, [pc, #44]	; (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x44>)
 8005620:	f001 fc48 	bl	8006eb4 <_init>
 8005624:	1b64      	subs	r4, r4, r5
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2600      	movs	r6, #0
 800562a:	42a6      	cmp	r6, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f855 3b04 	ldr.w	r3, [r5], #4
 8005634:	4798      	blx	r3
 8005636:	3601      	adds	r6, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f855 3b04 	ldr.w	r3, [r5], #4
 800563e:	4798      	blx	r3
 8005640:	3601      	adds	r6, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08007130 	.word	0x08007130
 8005648:	08007130 	.word	0x08007130
 800564c:	08007130 	.word	0x08007130
 8005650:	08007134 	.word	0x08007134

08005654 <malloc>:
 8005654:	4b02      	ldr	r3, [pc, #8]	; (8005660 <malloc+0xc>)
 8005656:	4601      	mov	r1, r0
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f000 b877 	b.w	800574c <_malloc_r>
 800565e:	bf00      	nop
 8005660:	20000090 	.word	0x20000090

08005664 <memset>:
 8005664:	4402      	add	r2, r0
 8005666:	4603      	mov	r3, r0
 8005668:	4293      	cmp	r3, r2
 800566a:	d100      	bne.n	800566e <memset+0xa>
 800566c:	4770      	bx	lr
 800566e:	f803 1b01 	strb.w	r1, [r3], #1
 8005672:	e7f9      	b.n	8005668 <memset+0x4>

08005674 <_free_r>:
 8005674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005676:	2900      	cmp	r1, #0
 8005678:	d044      	beq.n	8005704 <_free_r+0x90>
 800567a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800567e:	9001      	str	r0, [sp, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f1a1 0404 	sub.w	r4, r1, #4
 8005686:	bfb8      	it	lt
 8005688:	18e4      	addlt	r4, r4, r3
 800568a:	f000 f90b 	bl	80058a4 <__malloc_lock>
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <_free_r+0x94>)
 8005690:	9801      	ldr	r0, [sp, #4]
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	b933      	cbnz	r3, 80056a4 <_free_r+0x30>
 8005696:	6063      	str	r3, [r4, #4]
 8005698:	6014      	str	r4, [r2, #0]
 800569a:	b003      	add	sp, #12
 800569c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a0:	f000 b906 	b.w	80058b0 <__malloc_unlock>
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d908      	bls.n	80056ba <_free_r+0x46>
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	1961      	adds	r1, r4, r5
 80056ac:	428b      	cmp	r3, r1
 80056ae:	bf01      	itttt	eq
 80056b0:	6819      	ldreq	r1, [r3, #0]
 80056b2:	685b      	ldreq	r3, [r3, #4]
 80056b4:	1949      	addeq	r1, r1, r5
 80056b6:	6021      	streq	r1, [r4, #0]
 80056b8:	e7ed      	b.n	8005696 <_free_r+0x22>
 80056ba:	461a      	mov	r2, r3
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	b10b      	cbz	r3, 80056c4 <_free_r+0x50>
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d9fa      	bls.n	80056ba <_free_r+0x46>
 80056c4:	6811      	ldr	r1, [r2, #0]
 80056c6:	1855      	adds	r5, r2, r1
 80056c8:	42a5      	cmp	r5, r4
 80056ca:	d10b      	bne.n	80056e4 <_free_r+0x70>
 80056cc:	6824      	ldr	r4, [r4, #0]
 80056ce:	4421      	add	r1, r4
 80056d0:	1854      	adds	r4, r2, r1
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	6011      	str	r1, [r2, #0]
 80056d6:	d1e0      	bne.n	800569a <_free_r+0x26>
 80056d8:	681c      	ldr	r4, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	6053      	str	r3, [r2, #4]
 80056de:	4421      	add	r1, r4
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	e7da      	b.n	800569a <_free_r+0x26>
 80056e4:	d902      	bls.n	80056ec <_free_r+0x78>
 80056e6:	230c      	movs	r3, #12
 80056e8:	6003      	str	r3, [r0, #0]
 80056ea:	e7d6      	b.n	800569a <_free_r+0x26>
 80056ec:	6825      	ldr	r5, [r4, #0]
 80056ee:	1961      	adds	r1, r4, r5
 80056f0:	428b      	cmp	r3, r1
 80056f2:	bf04      	itt	eq
 80056f4:	6819      	ldreq	r1, [r3, #0]
 80056f6:	685b      	ldreq	r3, [r3, #4]
 80056f8:	6063      	str	r3, [r4, #4]
 80056fa:	bf04      	itt	eq
 80056fc:	1949      	addeq	r1, r1, r5
 80056fe:	6021      	streq	r1, [r4, #0]
 8005700:	6054      	str	r4, [r2, #4]
 8005702:	e7ca      	b.n	800569a <_free_r+0x26>
 8005704:	b003      	add	sp, #12
 8005706:	bd30      	pop	{r4, r5, pc}
 8005708:	20000340 	.word	0x20000340

0800570c <sbrk_aligned>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	4e0e      	ldr	r6, [pc, #56]	; (8005748 <sbrk_aligned+0x3c>)
 8005710:	460c      	mov	r4, r1
 8005712:	6831      	ldr	r1, [r6, #0]
 8005714:	4605      	mov	r5, r0
 8005716:	b911      	cbnz	r1, 800571e <sbrk_aligned+0x12>
 8005718:	f000 f88c 	bl	8005834 <_sbrk_r>
 800571c:	6030      	str	r0, [r6, #0]
 800571e:	4621      	mov	r1, r4
 8005720:	4628      	mov	r0, r5
 8005722:	f000 f887 	bl	8005834 <_sbrk_r>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d00a      	beq.n	8005740 <sbrk_aligned+0x34>
 800572a:	1cc4      	adds	r4, r0, #3
 800572c:	f024 0403 	bic.w	r4, r4, #3
 8005730:	42a0      	cmp	r0, r4
 8005732:	d007      	beq.n	8005744 <sbrk_aligned+0x38>
 8005734:	1a21      	subs	r1, r4, r0
 8005736:	4628      	mov	r0, r5
 8005738:	f000 f87c 	bl	8005834 <_sbrk_r>
 800573c:	3001      	adds	r0, #1
 800573e:	d101      	bne.n	8005744 <sbrk_aligned+0x38>
 8005740:	f04f 34ff 	mov.w	r4, #4294967295
 8005744:	4620      	mov	r0, r4
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	20000344 	.word	0x20000344

0800574c <_malloc_r>:
 800574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	1ccd      	adds	r5, r1, #3
 8005752:	f025 0503 	bic.w	r5, r5, #3
 8005756:	3508      	adds	r5, #8
 8005758:	2d0c      	cmp	r5, #12
 800575a:	bf38      	it	cc
 800575c:	250c      	movcc	r5, #12
 800575e:	2d00      	cmp	r5, #0
 8005760:	4607      	mov	r7, r0
 8005762:	db01      	blt.n	8005768 <_malloc_r+0x1c>
 8005764:	42a9      	cmp	r1, r5
 8005766:	d905      	bls.n	8005774 <_malloc_r+0x28>
 8005768:	230c      	movs	r3, #12
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	2600      	movs	r6, #0
 800576e:	4630      	mov	r0, r6
 8005770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005774:	4e2e      	ldr	r6, [pc, #184]	; (8005830 <_malloc_r+0xe4>)
 8005776:	f000 f895 	bl	80058a4 <__malloc_lock>
 800577a:	6833      	ldr	r3, [r6, #0]
 800577c:	461c      	mov	r4, r3
 800577e:	bb34      	cbnz	r4, 80057ce <_malloc_r+0x82>
 8005780:	4629      	mov	r1, r5
 8005782:	4638      	mov	r0, r7
 8005784:	f7ff ffc2 	bl	800570c <sbrk_aligned>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	4604      	mov	r4, r0
 800578c:	d14d      	bne.n	800582a <_malloc_r+0xde>
 800578e:	6834      	ldr	r4, [r6, #0]
 8005790:	4626      	mov	r6, r4
 8005792:	2e00      	cmp	r6, #0
 8005794:	d140      	bne.n	8005818 <_malloc_r+0xcc>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	4631      	mov	r1, r6
 800579a:	4638      	mov	r0, r7
 800579c:	eb04 0803 	add.w	r8, r4, r3
 80057a0:	f000 f848 	bl	8005834 <_sbrk_r>
 80057a4:	4580      	cmp	r8, r0
 80057a6:	d13a      	bne.n	800581e <_malloc_r+0xd2>
 80057a8:	6821      	ldr	r1, [r4, #0]
 80057aa:	3503      	adds	r5, #3
 80057ac:	1a6d      	subs	r5, r5, r1
 80057ae:	f025 0503 	bic.w	r5, r5, #3
 80057b2:	3508      	adds	r5, #8
 80057b4:	2d0c      	cmp	r5, #12
 80057b6:	bf38      	it	cc
 80057b8:	250c      	movcc	r5, #12
 80057ba:	4629      	mov	r1, r5
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff ffa5 	bl	800570c <sbrk_aligned>
 80057c2:	3001      	adds	r0, #1
 80057c4:	d02b      	beq.n	800581e <_malloc_r+0xd2>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	442b      	add	r3, r5
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	e00e      	b.n	80057ec <_malloc_r+0xa0>
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	1b52      	subs	r2, r2, r5
 80057d2:	d41e      	bmi.n	8005812 <_malloc_r+0xc6>
 80057d4:	2a0b      	cmp	r2, #11
 80057d6:	d916      	bls.n	8005806 <_malloc_r+0xba>
 80057d8:	1961      	adds	r1, r4, r5
 80057da:	42a3      	cmp	r3, r4
 80057dc:	6025      	str	r5, [r4, #0]
 80057de:	bf18      	it	ne
 80057e0:	6059      	strne	r1, [r3, #4]
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	bf08      	it	eq
 80057e6:	6031      	streq	r1, [r6, #0]
 80057e8:	5162      	str	r2, [r4, r5]
 80057ea:	604b      	str	r3, [r1, #4]
 80057ec:	4638      	mov	r0, r7
 80057ee:	f104 060b 	add.w	r6, r4, #11
 80057f2:	f000 f85d 	bl	80058b0 <__malloc_unlock>
 80057f6:	f026 0607 	bic.w	r6, r6, #7
 80057fa:	1d23      	adds	r3, r4, #4
 80057fc:	1af2      	subs	r2, r6, r3
 80057fe:	d0b6      	beq.n	800576e <_malloc_r+0x22>
 8005800:	1b9b      	subs	r3, r3, r6
 8005802:	50a3      	str	r3, [r4, r2]
 8005804:	e7b3      	b.n	800576e <_malloc_r+0x22>
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	42a3      	cmp	r3, r4
 800580a:	bf0c      	ite	eq
 800580c:	6032      	streq	r2, [r6, #0]
 800580e:	605a      	strne	r2, [r3, #4]
 8005810:	e7ec      	b.n	80057ec <_malloc_r+0xa0>
 8005812:	4623      	mov	r3, r4
 8005814:	6864      	ldr	r4, [r4, #4]
 8005816:	e7b2      	b.n	800577e <_malloc_r+0x32>
 8005818:	4634      	mov	r4, r6
 800581a:	6876      	ldr	r6, [r6, #4]
 800581c:	e7b9      	b.n	8005792 <_malloc_r+0x46>
 800581e:	230c      	movs	r3, #12
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4638      	mov	r0, r7
 8005824:	f000 f844 	bl	80058b0 <__malloc_unlock>
 8005828:	e7a1      	b.n	800576e <_malloc_r+0x22>
 800582a:	6025      	str	r5, [r4, #0]
 800582c:	e7de      	b.n	80057ec <_malloc_r+0xa0>
 800582e:	bf00      	nop
 8005830:	20000340 	.word	0x20000340

08005834 <_sbrk_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	4d06      	ldr	r5, [pc, #24]	; (8005850 <_sbrk_r+0x1c>)
 8005838:	2300      	movs	r3, #0
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f7fb ff72 	bl	8001728 <_sbrk>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_sbrk_r+0x1a>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_sbrk_r+0x1a>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	20000348 	.word	0x20000348

08005854 <siprintf>:
 8005854:	b40e      	push	{r1, r2, r3}
 8005856:	b500      	push	{lr}
 8005858:	b09c      	sub	sp, #112	; 0x70
 800585a:	ab1d      	add	r3, sp, #116	; 0x74
 800585c:	9002      	str	r0, [sp, #8]
 800585e:	9006      	str	r0, [sp, #24]
 8005860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005864:	4809      	ldr	r0, [pc, #36]	; (800588c <siprintf+0x38>)
 8005866:	9107      	str	r1, [sp, #28]
 8005868:	9104      	str	r1, [sp, #16]
 800586a:	4909      	ldr	r1, [pc, #36]	; (8005890 <siprintf+0x3c>)
 800586c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005870:	9105      	str	r1, [sp, #20]
 8005872:	6800      	ldr	r0, [r0, #0]
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	a902      	add	r1, sp, #8
 8005878:	f000 f87c 	bl	8005974 <_svfiprintf_r>
 800587c:	9b02      	ldr	r3, [sp, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	b01c      	add	sp, #112	; 0x70
 8005884:	f85d eb04 	ldr.w	lr, [sp], #4
 8005888:	b003      	add	sp, #12
 800588a:	4770      	bx	lr
 800588c:	20000090 	.word	0x20000090
 8005890:	ffff0208 	.word	0xffff0208

08005894 <strcpy>:
 8005894:	4603      	mov	r3, r0
 8005896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800589a:	f803 2b01 	strb.w	r2, [r3], #1
 800589e:	2a00      	cmp	r2, #0
 80058a0:	d1f9      	bne.n	8005896 <strcpy+0x2>
 80058a2:	4770      	bx	lr

080058a4 <__malloc_lock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__malloc_lock+0x8>)
 80058a6:	f000 baf9 	b.w	8005e9c <__retarget_lock_acquire_recursive>
 80058aa:	bf00      	nop
 80058ac:	2000034c 	.word	0x2000034c

080058b0 <__malloc_unlock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__malloc_unlock+0x8>)
 80058b2:	f000 baf4 	b.w	8005e9e <__retarget_lock_release_recursive>
 80058b6:	bf00      	nop
 80058b8:	2000034c 	.word	0x2000034c

080058bc <__ssputs_r>:
 80058bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	688e      	ldr	r6, [r1, #8]
 80058c2:	429e      	cmp	r6, r3
 80058c4:	4682      	mov	sl, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	4690      	mov	r8, r2
 80058ca:	461f      	mov	r7, r3
 80058cc:	d838      	bhi.n	8005940 <__ssputs_r+0x84>
 80058ce:	898a      	ldrh	r2, [r1, #12]
 80058d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058d4:	d032      	beq.n	800593c <__ssputs_r+0x80>
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	6909      	ldr	r1, [r1, #16]
 80058da:	eba5 0901 	sub.w	r9, r5, r1
 80058de:	6965      	ldr	r5, [r4, #20]
 80058e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058e8:	3301      	adds	r3, #1
 80058ea:	444b      	add	r3, r9
 80058ec:	106d      	asrs	r5, r5, #1
 80058ee:	429d      	cmp	r5, r3
 80058f0:	bf38      	it	cc
 80058f2:	461d      	movcc	r5, r3
 80058f4:	0553      	lsls	r3, r2, #21
 80058f6:	d531      	bpl.n	800595c <__ssputs_r+0xa0>
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7ff ff27 	bl	800574c <_malloc_r>
 80058fe:	4606      	mov	r6, r0
 8005900:	b950      	cbnz	r0, 8005918 <__ssputs_r+0x5c>
 8005902:	230c      	movs	r3, #12
 8005904:	f8ca 3000 	str.w	r3, [sl]
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	f04f 30ff 	mov.w	r0, #4294967295
 8005914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005918:	6921      	ldr	r1, [r4, #16]
 800591a:	464a      	mov	r2, r9
 800591c:	f000 fac0 	bl	8005ea0 <memcpy>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592a:	81a3      	strh	r3, [r4, #12]
 800592c:	6126      	str	r6, [r4, #16]
 800592e:	6165      	str	r5, [r4, #20]
 8005930:	444e      	add	r6, r9
 8005932:	eba5 0509 	sub.w	r5, r5, r9
 8005936:	6026      	str	r6, [r4, #0]
 8005938:	60a5      	str	r5, [r4, #8]
 800593a:	463e      	mov	r6, r7
 800593c:	42be      	cmp	r6, r7
 800593e:	d900      	bls.n	8005942 <__ssputs_r+0x86>
 8005940:	463e      	mov	r6, r7
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	4632      	mov	r2, r6
 8005946:	4641      	mov	r1, r8
 8005948:	f000 fab8 	bl	8005ebc <memmove>
 800594c:	68a3      	ldr	r3, [r4, #8]
 800594e:	1b9b      	subs	r3, r3, r6
 8005950:	60a3      	str	r3, [r4, #8]
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	4433      	add	r3, r6
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	2000      	movs	r0, #0
 800595a:	e7db      	b.n	8005914 <__ssputs_r+0x58>
 800595c:	462a      	mov	r2, r5
 800595e:	f000 fac7 	bl	8005ef0 <_realloc_r>
 8005962:	4606      	mov	r6, r0
 8005964:	2800      	cmp	r0, #0
 8005966:	d1e1      	bne.n	800592c <__ssputs_r+0x70>
 8005968:	6921      	ldr	r1, [r4, #16]
 800596a:	4650      	mov	r0, sl
 800596c:	f7ff fe82 	bl	8005674 <_free_r>
 8005970:	e7c7      	b.n	8005902 <__ssputs_r+0x46>
	...

08005974 <_svfiprintf_r>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	4698      	mov	r8, r3
 800597a:	898b      	ldrh	r3, [r1, #12]
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	b09d      	sub	sp, #116	; 0x74
 8005980:	4607      	mov	r7, r0
 8005982:	460d      	mov	r5, r1
 8005984:	4614      	mov	r4, r2
 8005986:	d50e      	bpl.n	80059a6 <_svfiprintf_r+0x32>
 8005988:	690b      	ldr	r3, [r1, #16]
 800598a:	b963      	cbnz	r3, 80059a6 <_svfiprintf_r+0x32>
 800598c:	2140      	movs	r1, #64	; 0x40
 800598e:	f7ff fedd 	bl	800574c <_malloc_r>
 8005992:	6028      	str	r0, [r5, #0]
 8005994:	6128      	str	r0, [r5, #16]
 8005996:	b920      	cbnz	r0, 80059a2 <_svfiprintf_r+0x2e>
 8005998:	230c      	movs	r3, #12
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	e0d1      	b.n	8005b46 <_svfiprintf_r+0x1d2>
 80059a2:	2340      	movs	r3, #64	; 0x40
 80059a4:	616b      	str	r3, [r5, #20]
 80059a6:	2300      	movs	r3, #0
 80059a8:	9309      	str	r3, [sp, #36]	; 0x24
 80059aa:	2320      	movs	r3, #32
 80059ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059b4:	2330      	movs	r3, #48	; 0x30
 80059b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b60 <_svfiprintf_r+0x1ec>
 80059ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059be:	f04f 0901 	mov.w	r9, #1
 80059c2:	4623      	mov	r3, r4
 80059c4:	469a      	mov	sl, r3
 80059c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ca:	b10a      	cbz	r2, 80059d0 <_svfiprintf_r+0x5c>
 80059cc:	2a25      	cmp	r2, #37	; 0x25
 80059ce:	d1f9      	bne.n	80059c4 <_svfiprintf_r+0x50>
 80059d0:	ebba 0b04 	subs.w	fp, sl, r4
 80059d4:	d00b      	beq.n	80059ee <_svfiprintf_r+0x7a>
 80059d6:	465b      	mov	r3, fp
 80059d8:	4622      	mov	r2, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff ff6d 	bl	80058bc <__ssputs_r>
 80059e2:	3001      	adds	r0, #1
 80059e4:	f000 80aa 	beq.w	8005b3c <_svfiprintf_r+0x1c8>
 80059e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ea:	445a      	add	r2, fp
 80059ec:	9209      	str	r2, [sp, #36]	; 0x24
 80059ee:	f89a 3000 	ldrb.w	r3, [sl]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80a2 	beq.w	8005b3c <_svfiprintf_r+0x1c8>
 80059f8:	2300      	movs	r3, #0
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295
 80059fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a02:	f10a 0a01 	add.w	sl, sl, #1
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a10:	4654      	mov	r4, sl
 8005a12:	2205      	movs	r2, #5
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	4851      	ldr	r0, [pc, #324]	; (8005b60 <_svfiprintf_r+0x1ec>)
 8005a1a:	f7fa fc01 	bl	8000220 <memchr>
 8005a1e:	9a04      	ldr	r2, [sp, #16]
 8005a20:	b9d8      	cbnz	r0, 8005a5a <_svfiprintf_r+0xe6>
 8005a22:	06d0      	lsls	r0, r2, #27
 8005a24:	bf44      	itt	mi
 8005a26:	2320      	movmi	r3, #32
 8005a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a2c:	0711      	lsls	r1, r2, #28
 8005a2e:	bf44      	itt	mi
 8005a30:	232b      	movmi	r3, #43	; 0x2b
 8005a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a36:	f89a 3000 	ldrb.w	r3, [sl]
 8005a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a3c:	d015      	beq.n	8005a6a <_svfiprintf_r+0xf6>
 8005a3e:	9a07      	ldr	r2, [sp, #28]
 8005a40:	4654      	mov	r4, sl
 8005a42:	2000      	movs	r0, #0
 8005a44:	f04f 0c0a 	mov.w	ip, #10
 8005a48:	4621      	mov	r1, r4
 8005a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a4e:	3b30      	subs	r3, #48	; 0x30
 8005a50:	2b09      	cmp	r3, #9
 8005a52:	d94e      	bls.n	8005af2 <_svfiprintf_r+0x17e>
 8005a54:	b1b0      	cbz	r0, 8005a84 <_svfiprintf_r+0x110>
 8005a56:	9207      	str	r2, [sp, #28]
 8005a58:	e014      	b.n	8005a84 <_svfiprintf_r+0x110>
 8005a5a:	eba0 0308 	sub.w	r3, r0, r8
 8005a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005a62:	4313      	orrs	r3, r2
 8005a64:	9304      	str	r3, [sp, #16]
 8005a66:	46a2      	mov	sl, r4
 8005a68:	e7d2      	b.n	8005a10 <_svfiprintf_r+0x9c>
 8005a6a:	9b03      	ldr	r3, [sp, #12]
 8005a6c:	1d19      	adds	r1, r3, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	9103      	str	r1, [sp, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bfbb      	ittet	lt
 8005a76:	425b      	neglt	r3, r3
 8005a78:	f042 0202 	orrlt.w	r2, r2, #2
 8005a7c:	9307      	strge	r3, [sp, #28]
 8005a7e:	9307      	strlt	r3, [sp, #28]
 8005a80:	bfb8      	it	lt
 8005a82:	9204      	strlt	r2, [sp, #16]
 8005a84:	7823      	ldrb	r3, [r4, #0]
 8005a86:	2b2e      	cmp	r3, #46	; 0x2e
 8005a88:	d10c      	bne.n	8005aa4 <_svfiprintf_r+0x130>
 8005a8a:	7863      	ldrb	r3, [r4, #1]
 8005a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a8e:	d135      	bne.n	8005afc <_svfiprintf_r+0x188>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	9203      	str	r2, [sp, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bfb8      	it	lt
 8005a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aa0:	3402      	adds	r4, #2
 8005aa2:	9305      	str	r3, [sp, #20]
 8005aa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b70 <_svfiprintf_r+0x1fc>
 8005aa8:	7821      	ldrb	r1, [r4, #0]
 8005aaa:	2203      	movs	r2, #3
 8005aac:	4650      	mov	r0, sl
 8005aae:	f7fa fbb7 	bl	8000220 <memchr>
 8005ab2:	b140      	cbz	r0, 8005ac6 <_svfiprintf_r+0x152>
 8005ab4:	2340      	movs	r3, #64	; 0x40
 8005ab6:	eba0 000a 	sub.w	r0, r0, sl
 8005aba:	fa03 f000 	lsl.w	r0, r3, r0
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	4303      	orrs	r3, r0
 8005ac2:	3401      	adds	r4, #1
 8005ac4:	9304      	str	r3, [sp, #16]
 8005ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aca:	4826      	ldr	r0, [pc, #152]	; (8005b64 <_svfiprintf_r+0x1f0>)
 8005acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ad0:	2206      	movs	r2, #6
 8005ad2:	f7fa fba5 	bl	8000220 <memchr>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d038      	beq.n	8005b4c <_svfiprintf_r+0x1d8>
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <_svfiprintf_r+0x1f4>)
 8005adc:	bb1b      	cbnz	r3, 8005b26 <_svfiprintf_r+0x1b2>
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	3307      	adds	r3, #7
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	9303      	str	r3, [sp, #12]
 8005aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aec:	4433      	add	r3, r6
 8005aee:	9309      	str	r3, [sp, #36]	; 0x24
 8005af0:	e767      	b.n	80059c2 <_svfiprintf_r+0x4e>
 8005af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af6:	460c      	mov	r4, r1
 8005af8:	2001      	movs	r0, #1
 8005afa:	e7a5      	b.n	8005a48 <_svfiprintf_r+0xd4>
 8005afc:	2300      	movs	r3, #0
 8005afe:	3401      	adds	r4, #1
 8005b00:	9305      	str	r3, [sp, #20]
 8005b02:	4619      	mov	r1, r3
 8005b04:	f04f 0c0a 	mov.w	ip, #10
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b0e:	3a30      	subs	r2, #48	; 0x30
 8005b10:	2a09      	cmp	r2, #9
 8005b12:	d903      	bls.n	8005b1c <_svfiprintf_r+0x1a8>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0c5      	beq.n	8005aa4 <_svfiprintf_r+0x130>
 8005b18:	9105      	str	r1, [sp, #20]
 8005b1a:	e7c3      	b.n	8005aa4 <_svfiprintf_r+0x130>
 8005b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b20:	4604      	mov	r4, r0
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7f0      	b.n	8005b08 <_svfiprintf_r+0x194>
 8005b26:	ab03      	add	r3, sp, #12
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	462a      	mov	r2, r5
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <_svfiprintf_r+0x1f8>)
 8005b2e:	a904      	add	r1, sp, #16
 8005b30:	4638      	mov	r0, r7
 8005b32:	f3af 8000 	nop.w
 8005b36:	1c42      	adds	r2, r0, #1
 8005b38:	4606      	mov	r6, r0
 8005b3a:	d1d6      	bne.n	8005aea <_svfiprintf_r+0x176>
 8005b3c:	89ab      	ldrh	r3, [r5, #12]
 8005b3e:	065b      	lsls	r3, r3, #25
 8005b40:	f53f af2c 	bmi.w	800599c <_svfiprintf_r+0x28>
 8005b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b46:	b01d      	add	sp, #116	; 0x74
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	ab03      	add	r3, sp, #12
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	462a      	mov	r2, r5
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <_svfiprintf_r+0x1f8>)
 8005b54:	a904      	add	r1, sp, #16
 8005b56:	4638      	mov	r0, r7
 8005b58:	f000 f87a 	bl	8005c50 <_printf_i>
 8005b5c:	e7eb      	b.n	8005b36 <_svfiprintf_r+0x1c2>
 8005b5e:	bf00      	nop
 8005b60:	080070b4 	.word	0x080070b4
 8005b64:	080070be 	.word	0x080070be
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	080058bd 	.word	0x080058bd
 8005b70:	080070ba 	.word	0x080070ba

08005b74 <_printf_common>:
 8005b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	4616      	mov	r6, r2
 8005b7a:	4699      	mov	r9, r3
 8005b7c:	688a      	ldr	r2, [r1, #8]
 8005b7e:	690b      	ldr	r3, [r1, #16]
 8005b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bfb8      	it	lt
 8005b88:	4613      	movlt	r3, r2
 8005b8a:	6033      	str	r3, [r6, #0]
 8005b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b90:	4607      	mov	r7, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	b10a      	cbz	r2, 8005b9a <_printf_common+0x26>
 8005b96:	3301      	adds	r3, #1
 8005b98:	6033      	str	r3, [r6, #0]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	0699      	lsls	r1, r3, #26
 8005b9e:	bf42      	ittt	mi
 8005ba0:	6833      	ldrmi	r3, [r6, #0]
 8005ba2:	3302      	addmi	r3, #2
 8005ba4:	6033      	strmi	r3, [r6, #0]
 8005ba6:	6825      	ldr	r5, [r4, #0]
 8005ba8:	f015 0506 	ands.w	r5, r5, #6
 8005bac:	d106      	bne.n	8005bbc <_printf_common+0x48>
 8005bae:	f104 0a19 	add.w	sl, r4, #25
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	6832      	ldr	r2, [r6, #0]
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dc26      	bgt.n	8005c0a <_printf_common+0x96>
 8005bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc0:	1e13      	subs	r3, r2, #0
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	bf18      	it	ne
 8005bc6:	2301      	movne	r3, #1
 8005bc8:	0692      	lsls	r2, r2, #26
 8005bca:	d42b      	bmi.n	8005c24 <_printf_common+0xb0>
 8005bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	47c0      	blx	r8
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d01e      	beq.n	8005c18 <_printf_common+0xa4>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	68e5      	ldr	r5, [r4, #12]
 8005bde:	6832      	ldr	r2, [r6, #0]
 8005be0:	f003 0306 	and.w	r3, r3, #6
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	bf08      	it	eq
 8005be8:	1aad      	subeq	r5, r5, r2
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	6922      	ldr	r2, [r4, #16]
 8005bee:	bf0c      	ite	eq
 8005bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bf4:	2500      	movne	r5, #0
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	bfc4      	itt	gt
 8005bfa:	1a9b      	subgt	r3, r3, r2
 8005bfc:	18ed      	addgt	r5, r5, r3
 8005bfe:	2600      	movs	r6, #0
 8005c00:	341a      	adds	r4, #26
 8005c02:	42b5      	cmp	r5, r6
 8005c04:	d11a      	bne.n	8005c3c <_printf_common+0xc8>
 8005c06:	2000      	movs	r0, #0
 8005c08:	e008      	b.n	8005c1c <_printf_common+0xa8>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	4649      	mov	r1, r9
 8005c10:	4638      	mov	r0, r7
 8005c12:	47c0      	blx	r8
 8005c14:	3001      	adds	r0, #1
 8005c16:	d103      	bne.n	8005c20 <_printf_common+0xac>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	3501      	adds	r5, #1
 8005c22:	e7c6      	b.n	8005bb2 <_printf_common+0x3e>
 8005c24:	18e1      	adds	r1, r4, r3
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	2030      	movs	r0, #48	; 0x30
 8005c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c2e:	4422      	add	r2, r4
 8005c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c38:	3302      	adds	r3, #2
 8005c3a:	e7c7      	b.n	8005bcc <_printf_common+0x58>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4649      	mov	r1, r9
 8005c42:	4638      	mov	r0, r7
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d0e6      	beq.n	8005c18 <_printf_common+0xa4>
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7d9      	b.n	8005c02 <_printf_common+0x8e>
	...

08005c50 <_printf_i>:
 8005c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	7e0f      	ldrb	r7, [r1, #24]
 8005c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c58:	2f78      	cmp	r7, #120	; 0x78
 8005c5a:	4691      	mov	r9, r2
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	469a      	mov	sl, r3
 8005c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c66:	d807      	bhi.n	8005c78 <_printf_i+0x28>
 8005c68:	2f62      	cmp	r7, #98	; 0x62
 8005c6a:	d80a      	bhi.n	8005c82 <_printf_i+0x32>
 8005c6c:	2f00      	cmp	r7, #0
 8005c6e:	f000 80d8 	beq.w	8005e22 <_printf_i+0x1d2>
 8005c72:	2f58      	cmp	r7, #88	; 0x58
 8005c74:	f000 80a3 	beq.w	8005dbe <_printf_i+0x16e>
 8005c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c80:	e03a      	b.n	8005cf8 <_printf_i+0xa8>
 8005c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c86:	2b15      	cmp	r3, #21
 8005c88:	d8f6      	bhi.n	8005c78 <_printf_i+0x28>
 8005c8a:	a101      	add	r1, pc, #4	; (adr r1, 8005c90 <_printf_i+0x40>)
 8005c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005c79 	.word	0x08005c79
 8005c9c:	08005c79 	.word	0x08005c79
 8005ca0:	08005c79 	.word	0x08005c79
 8005ca4:	08005c79 	.word	0x08005c79
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005c79 	.word	0x08005c79
 8005cb0:	08005c79 	.word	0x08005c79
 8005cb4:	08005c79 	.word	0x08005c79
 8005cb8:	08005c79 	.word	0x08005c79
 8005cbc:	08005e09 	.word	0x08005e09
 8005cc0:	08005d2d 	.word	0x08005d2d
 8005cc4:	08005deb 	.word	0x08005deb
 8005cc8:	08005c79 	.word	0x08005c79
 8005ccc:	08005c79 	.word	0x08005c79
 8005cd0:	08005e2b 	.word	0x08005e2b
 8005cd4:	08005c79 	.word	0x08005c79
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005c79 	.word	0x08005c79
 8005ce0:	08005c79 	.word	0x08005c79
 8005ce4:	08005df3 	.word	0x08005df3
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	602a      	str	r2, [r5, #0]
 8005cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0a3      	b.n	8005e44 <_printf_i+0x1f4>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	6829      	ldr	r1, [r5, #0]
 8005d00:	0606      	lsls	r6, r0, #24
 8005d02:	f101 0304 	add.w	r3, r1, #4
 8005d06:	d50a      	bpl.n	8005d1e <_printf_i+0xce>
 8005d08:	680e      	ldr	r6, [r1, #0]
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	da03      	bge.n	8005d18 <_printf_i+0xc8>
 8005d10:	232d      	movs	r3, #45	; 0x2d
 8005d12:	4276      	negs	r6, r6
 8005d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d18:	485e      	ldr	r0, [pc, #376]	; (8005e94 <_printf_i+0x244>)
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	e019      	b.n	8005d52 <_printf_i+0x102>
 8005d1e:	680e      	ldr	r6, [r1, #0]
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d26:	bf18      	it	ne
 8005d28:	b236      	sxthne	r6, r6
 8005d2a:	e7ef      	b.n	8005d0c <_printf_i+0xbc>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	6820      	ldr	r0, [r4, #0]
 8005d30:	1d19      	adds	r1, r3, #4
 8005d32:	6029      	str	r1, [r5, #0]
 8005d34:	0601      	lsls	r1, r0, #24
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0xec>
 8005d38:	681e      	ldr	r6, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0xf2>
 8005d3c:	0646      	lsls	r6, r0, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0xe8>
 8005d40:	881e      	ldrh	r6, [r3, #0]
 8005d42:	4854      	ldr	r0, [pc, #336]	; (8005e94 <_printf_i+0x244>)
 8005d44:	2f6f      	cmp	r7, #111	; 0x6f
 8005d46:	bf0c      	ite	eq
 8005d48:	2308      	moveq	r3, #8
 8005d4a:	230a      	movne	r3, #10
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d52:	6865      	ldr	r5, [r4, #4]
 8005d54:	60a5      	str	r5, [r4, #8]
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	bfa2      	ittt	ge
 8005d5a:	6821      	ldrge	r1, [r4, #0]
 8005d5c:	f021 0104 	bicge.w	r1, r1, #4
 8005d60:	6021      	strge	r1, [r4, #0]
 8005d62:	b90e      	cbnz	r6, 8005d68 <_printf_i+0x118>
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	d04d      	beq.n	8005e04 <_printf_i+0x1b4>
 8005d68:	4615      	mov	r5, r2
 8005d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005d72:	5dc7      	ldrb	r7, [r0, r7]
 8005d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d78:	4637      	mov	r7, r6
 8005d7a:	42bb      	cmp	r3, r7
 8005d7c:	460e      	mov	r6, r1
 8005d7e:	d9f4      	bls.n	8005d6a <_printf_i+0x11a>
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d10b      	bne.n	8005d9c <_printf_i+0x14c>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	07de      	lsls	r6, r3, #31
 8005d88:	d508      	bpl.n	8005d9c <_printf_i+0x14c>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	6861      	ldr	r1, [r4, #4]
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	bfde      	ittt	le
 8005d92:	2330      	movle	r3, #48	; 0x30
 8005d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d9c:	1b52      	subs	r2, r2, r5
 8005d9e:	6122      	str	r2, [r4, #16]
 8005da0:	f8cd a000 	str.w	sl, [sp]
 8005da4:	464b      	mov	r3, r9
 8005da6:	aa03      	add	r2, sp, #12
 8005da8:	4621      	mov	r1, r4
 8005daa:	4640      	mov	r0, r8
 8005dac:	f7ff fee2 	bl	8005b74 <_printf_common>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d14c      	bne.n	8005e4e <_printf_i+0x1fe>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	b004      	add	sp, #16
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	4835      	ldr	r0, [pc, #212]	; (8005e94 <_printf_i+0x244>)
 8005dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dc4:	6829      	ldr	r1, [r5, #0]
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dcc:	6029      	str	r1, [r5, #0]
 8005dce:	061d      	lsls	r5, r3, #24
 8005dd0:	d514      	bpl.n	8005dfc <_printf_i+0x1ac>
 8005dd2:	07df      	lsls	r7, r3, #31
 8005dd4:	bf44      	itt	mi
 8005dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dda:	6023      	strmi	r3, [r4, #0]
 8005ddc:	b91e      	cbnz	r6, 8005de6 <_printf_i+0x196>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f023 0320 	bic.w	r3, r3, #32
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	2310      	movs	r3, #16
 8005de8:	e7b0      	b.n	8005d4c <_printf_i+0xfc>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f043 0320 	orr.w	r3, r3, #32
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	2378      	movs	r3, #120	; 0x78
 8005df4:	4828      	ldr	r0, [pc, #160]	; (8005e98 <_printf_i+0x248>)
 8005df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dfa:	e7e3      	b.n	8005dc4 <_printf_i+0x174>
 8005dfc:	0659      	lsls	r1, r3, #25
 8005dfe:	bf48      	it	mi
 8005e00:	b2b6      	uxthmi	r6, r6
 8005e02:	e7e6      	b.n	8005dd2 <_printf_i+0x182>
 8005e04:	4615      	mov	r5, r2
 8005e06:	e7bb      	b.n	8005d80 <_printf_i+0x130>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	6826      	ldr	r6, [r4, #0]
 8005e0c:	6961      	ldr	r1, [r4, #20]
 8005e0e:	1d18      	adds	r0, r3, #4
 8005e10:	6028      	str	r0, [r5, #0]
 8005e12:	0635      	lsls	r5, r6, #24
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	d501      	bpl.n	8005e1c <_printf_i+0x1cc>
 8005e18:	6019      	str	r1, [r3, #0]
 8005e1a:	e002      	b.n	8005e22 <_printf_i+0x1d2>
 8005e1c:	0670      	lsls	r0, r6, #25
 8005e1e:	d5fb      	bpl.n	8005e18 <_printf_i+0x1c8>
 8005e20:	8019      	strh	r1, [r3, #0]
 8005e22:	2300      	movs	r3, #0
 8005e24:	6123      	str	r3, [r4, #16]
 8005e26:	4615      	mov	r5, r2
 8005e28:	e7ba      	b.n	8005da0 <_printf_i+0x150>
 8005e2a:	682b      	ldr	r3, [r5, #0]
 8005e2c:	1d1a      	adds	r2, r3, #4
 8005e2e:	602a      	str	r2, [r5, #0]
 8005e30:	681d      	ldr	r5, [r3, #0]
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	2100      	movs	r1, #0
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa f9f2 	bl	8000220 <memchr>
 8005e3c:	b108      	cbz	r0, 8005e42 <_printf_i+0x1f2>
 8005e3e:	1b40      	subs	r0, r0, r5
 8005e40:	6060      	str	r0, [r4, #4]
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	2300      	movs	r3, #0
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4c:	e7a8      	b.n	8005da0 <_printf_i+0x150>
 8005e4e:	6923      	ldr	r3, [r4, #16]
 8005e50:	462a      	mov	r2, r5
 8005e52:	4649      	mov	r1, r9
 8005e54:	4640      	mov	r0, r8
 8005e56:	47d0      	blx	sl
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d0ab      	beq.n	8005db4 <_printf_i+0x164>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	079b      	lsls	r3, r3, #30
 8005e60:	d413      	bmi.n	8005e8a <_printf_i+0x23a>
 8005e62:	68e0      	ldr	r0, [r4, #12]
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	4298      	cmp	r0, r3
 8005e68:	bfb8      	it	lt
 8005e6a:	4618      	movlt	r0, r3
 8005e6c:	e7a4      	b.n	8005db8 <_printf_i+0x168>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4632      	mov	r2, r6
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d09b      	beq.n	8005db4 <_printf_i+0x164>
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	9903      	ldr	r1, [sp, #12]
 8005e82:	1a5b      	subs	r3, r3, r1
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dcf2      	bgt.n	8005e6e <_printf_i+0x21e>
 8005e88:	e7eb      	b.n	8005e62 <_printf_i+0x212>
 8005e8a:	2500      	movs	r5, #0
 8005e8c:	f104 0619 	add.w	r6, r4, #25
 8005e90:	e7f5      	b.n	8005e7e <_printf_i+0x22e>
 8005e92:	bf00      	nop
 8005e94:	080070c5 	.word	0x080070c5
 8005e98:	080070d6 	.word	0x080070d6

08005e9c <__retarget_lock_acquire_recursive>:
 8005e9c:	4770      	bx	lr

08005e9e <__retarget_lock_release_recursive>:
 8005e9e:	4770      	bx	lr

08005ea0 <memcpy>:
 8005ea0:	440a      	add	r2, r1
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ea8:	d100      	bne.n	8005eac <memcpy+0xc>
 8005eaa:	4770      	bx	lr
 8005eac:	b510      	push	{r4, lr}
 8005eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb6:	4291      	cmp	r1, r2
 8005eb8:	d1f9      	bne.n	8005eae <memcpy+0xe>
 8005eba:	bd10      	pop	{r4, pc}

08005ebc <memmove>:
 8005ebc:	4288      	cmp	r0, r1
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	eb01 0402 	add.w	r4, r1, r2
 8005ec4:	d902      	bls.n	8005ecc <memmove+0x10>
 8005ec6:	4284      	cmp	r4, r0
 8005ec8:	4623      	mov	r3, r4
 8005eca:	d807      	bhi.n	8005edc <memmove+0x20>
 8005ecc:	1e43      	subs	r3, r0, #1
 8005ece:	42a1      	cmp	r1, r4
 8005ed0:	d008      	beq.n	8005ee4 <memmove+0x28>
 8005ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eda:	e7f8      	b.n	8005ece <memmove+0x12>
 8005edc:	4402      	add	r2, r0
 8005ede:	4601      	mov	r1, r0
 8005ee0:	428a      	cmp	r2, r1
 8005ee2:	d100      	bne.n	8005ee6 <memmove+0x2a>
 8005ee4:	bd10      	pop	{r4, pc}
 8005ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005eee:	e7f7      	b.n	8005ee0 <memmove+0x24>

08005ef0 <_realloc_r>:
 8005ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	460e      	mov	r6, r1
 8005efa:	b921      	cbnz	r1, 8005f06 <_realloc_r+0x16>
 8005efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4611      	mov	r1, r2
 8005f02:	f7ff bc23 	b.w	800574c <_malloc_r>
 8005f06:	b92a      	cbnz	r2, 8005f14 <_realloc_r+0x24>
 8005f08:	f7ff fbb4 	bl	8005674 <_free_r>
 8005f0c:	4625      	mov	r5, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f14:	f000 f81b 	bl	8005f4e <_malloc_usable_size_r>
 8005f18:	4284      	cmp	r4, r0
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	d802      	bhi.n	8005f24 <_realloc_r+0x34>
 8005f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f22:	d812      	bhi.n	8005f4a <_realloc_r+0x5a>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4640      	mov	r0, r8
 8005f28:	f7ff fc10 	bl	800574c <_malloc_r>
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d0ed      	beq.n	8005f0e <_realloc_r+0x1e>
 8005f32:	42bc      	cmp	r4, r7
 8005f34:	4622      	mov	r2, r4
 8005f36:	4631      	mov	r1, r6
 8005f38:	bf28      	it	cs
 8005f3a:	463a      	movcs	r2, r7
 8005f3c:	f7ff ffb0 	bl	8005ea0 <memcpy>
 8005f40:	4631      	mov	r1, r6
 8005f42:	4640      	mov	r0, r8
 8005f44:	f7ff fb96 	bl	8005674 <_free_r>
 8005f48:	e7e1      	b.n	8005f0e <_realloc_r+0x1e>
 8005f4a:	4635      	mov	r5, r6
 8005f4c:	e7df      	b.n	8005f0e <_realloc_r+0x1e>

08005f4e <_malloc_usable_size_r>:
 8005f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f52:	1f18      	subs	r0, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bfbc      	itt	lt
 8005f58:	580b      	ldrlt	r3, [r1, r0]
 8005f5a:	18c0      	addlt	r0, r0, r3
 8005f5c:	4770      	bx	lr
	...

08005f60 <rint>:
 8005f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f62:	ec51 0b10 	vmov	r0, r1, d0
 8005f66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f6a:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8005f6e:	2d13      	cmp	r5, #19
 8005f70:	ee10 3a10 	vmov	r3, s0
 8005f74:	460c      	mov	r4, r1
 8005f76:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8005f7a:	dc5b      	bgt.n	8006034 <rint+0xd4>
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	da2d      	bge.n	8005fdc <rint+0x7c>
 8005f80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005f84:	4302      	orrs	r2, r0
 8005f86:	d025      	beq.n	8005fd4 <rint+0x74>
 8005f88:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005f8c:	4302      	orrs	r2, r0
 8005f8e:	4253      	negs	r3, r2
 8005f90:	4313      	orrs	r3, r2
 8005f92:	0b1b      	lsrs	r3, r3, #12
 8005f94:	0c4a      	lsrs	r2, r1, #17
 8005f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9a:	0452      	lsls	r2, r2, #17
 8005f9c:	ea43 0102 	orr.w	r1, r3, r2
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4934      	ldr	r1, [pc, #208]	; (8006074 <rint+0x114>)
 8005fa4:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8005fa8:	e9d6 6700 	ldrd	r6, r7, [r6]
 8005fac:	4602      	mov	r2, r0
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7fa f98b 	bl	80002cc <__adddf3>
 8005fb6:	e9cd 0100 	strd	r0, r1, [sp]
 8005fba:	463b      	mov	r3, r7
 8005fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	f7fa f981 	bl	80002c8 <__aeabi_dsub>
 8005fc6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8005fca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fce:	ea43 0704 	orr.w	r7, r3, r4
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	ec41 0b10 	vmov	d0, r0, r1
 8005fd8:	b003      	add	sp, #12
 8005fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fdc:	4a26      	ldr	r2, [pc, #152]	; (8006078 <rint+0x118>)
 8005fde:	412a      	asrs	r2, r5
 8005fe0:	ea01 0702 	and.w	r7, r1, r2
 8005fe4:	4307      	orrs	r7, r0
 8005fe6:	d0f5      	beq.n	8005fd4 <rint+0x74>
 8005fe8:	0851      	lsrs	r1, r2, #1
 8005fea:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	d00c      	beq.n	800600c <rint+0xac>
 8005ff2:	ea24 0201 	bic.w	r2, r4, r1
 8005ff6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005ffa:	2d13      	cmp	r5, #19
 8005ffc:	fa44 f505 	asr.w	r5, r4, r5
 8006000:	bf0c      	ite	eq
 8006002:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8006006:	2300      	movne	r3, #0
 8006008:	ea42 0405 	orr.w	r4, r2, r5
 800600c:	4919      	ldr	r1, [pc, #100]	; (8006074 <rint+0x114>)
 800600e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8006012:	461a      	mov	r2, r3
 8006014:	4623      	mov	r3, r4
 8006016:	e9d6 4500 	ldrd	r4, r5, [r6]
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa f955 	bl	80002cc <__adddf3>
 8006022:	e9cd 0100 	strd	r0, r1, [sp]
 8006026:	e9dd 0100 	ldrd	r0, r1, [sp]
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	f7fa f94b 	bl	80002c8 <__aeabi_dsub>
 8006032:	e7cf      	b.n	8005fd4 <rint+0x74>
 8006034:	2d33      	cmp	r5, #51	; 0x33
 8006036:	dd08      	ble.n	800604a <rint+0xea>
 8006038:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800603c:	d1ca      	bne.n	8005fd4 <rint+0x74>
 800603e:	ee10 2a10 	vmov	r2, s0
 8006042:	460b      	mov	r3, r1
 8006044:	f7fa f942 	bl	80002cc <__adddf3>
 8006048:	e7c4      	b.n	8005fd4 <rint+0x74>
 800604a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800604e:	f04f 35ff 	mov.w	r5, #4294967295
 8006052:	40d5      	lsrs	r5, r2
 8006054:	4228      	tst	r0, r5
 8006056:	d0bd      	beq.n	8005fd4 <rint+0x74>
 8006058:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 800605c:	ea4f 0155 	mov.w	r1, r5, lsr #1
 8006060:	bf1f      	itttt	ne
 8006062:	ea23 0101 	bicne.w	r1, r3, r1
 8006066:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 800606a:	fa43 f202 	asrne.w	r2, r3, r2
 800606e:	ea41 0302 	orrne.w	r3, r1, r2
 8006072:	e7cb      	b.n	800600c <rint+0xac>
 8006074:	080070e8 	.word	0x080070e8
 8006078:	000fffff 	.word	0x000fffff

0800607c <pow>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	ed2d 8b02 	vpush	{d8}
 8006082:	eeb0 8a40 	vmov.f32	s16, s0
 8006086:	eef0 8a60 	vmov.f32	s17, s1
 800608a:	ec55 4b11 	vmov	r4, r5, d1
 800608e:	f000 f867 	bl	8006160 <__ieee754_pow>
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	4620      	mov	r0, r4
 8006098:	4629      	mov	r1, r5
 800609a:	ec57 6b10 	vmov	r6, r7, d0
 800609e:	f7fa fd65 	bl	8000b6c <__aeabi_dcmpun>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d13b      	bne.n	800611e <pow+0xa2>
 80060a6:	ec51 0b18 	vmov	r0, r1, d8
 80060aa:	2200      	movs	r2, #0
 80060ac:	2300      	movs	r3, #0
 80060ae:	f7fa fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 80060b2:	b1b8      	cbz	r0, 80060e4 <pow+0x68>
 80060b4:	2200      	movs	r2, #0
 80060b6:	2300      	movs	r3, #0
 80060b8:	4620      	mov	r0, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	f7fa fd24 	bl	8000b08 <__aeabi_dcmpeq>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d146      	bne.n	8006152 <pow+0xd6>
 80060c4:	ec45 4b10 	vmov	d0, r4, r5
 80060c8:	f000 fe63 	bl	8006d92 <finite>
 80060cc:	b338      	cbz	r0, 800611e <pow+0xa2>
 80060ce:	2200      	movs	r2, #0
 80060d0:	2300      	movs	r3, #0
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7fa fd21 	bl	8000b1c <__aeabi_dcmplt>
 80060da:	b300      	cbz	r0, 800611e <pow+0xa2>
 80060dc:	f7ff fa90 	bl	8005600 <__errno>
 80060e0:	2322      	movs	r3, #34	; 0x22
 80060e2:	e01b      	b.n	800611c <pow+0xa0>
 80060e4:	ec47 6b10 	vmov	d0, r6, r7
 80060e8:	f000 fe53 	bl	8006d92 <finite>
 80060ec:	b9e0      	cbnz	r0, 8006128 <pow+0xac>
 80060ee:	eeb0 0a48 	vmov.f32	s0, s16
 80060f2:	eef0 0a68 	vmov.f32	s1, s17
 80060f6:	f000 fe4c 	bl	8006d92 <finite>
 80060fa:	b1a8      	cbz	r0, 8006128 <pow+0xac>
 80060fc:	ec45 4b10 	vmov	d0, r4, r5
 8006100:	f000 fe47 	bl	8006d92 <finite>
 8006104:	b180      	cbz	r0, 8006128 <pow+0xac>
 8006106:	4632      	mov	r2, r6
 8006108:	463b      	mov	r3, r7
 800610a:	4630      	mov	r0, r6
 800610c:	4639      	mov	r1, r7
 800610e:	f7fa fd2d 	bl	8000b6c <__aeabi_dcmpun>
 8006112:	2800      	cmp	r0, #0
 8006114:	d0e2      	beq.n	80060dc <pow+0x60>
 8006116:	f7ff fa73 	bl	8005600 <__errno>
 800611a:	2321      	movs	r3, #33	; 0x21
 800611c:	6003      	str	r3, [r0, #0]
 800611e:	ecbd 8b02 	vpop	{d8}
 8006122:	ec47 6b10 	vmov	d0, r6, r7
 8006126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006128:	2200      	movs	r2, #0
 800612a:	2300      	movs	r3, #0
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa fcea 	bl	8000b08 <__aeabi_dcmpeq>
 8006134:	2800      	cmp	r0, #0
 8006136:	d0f2      	beq.n	800611e <pow+0xa2>
 8006138:	eeb0 0a48 	vmov.f32	s0, s16
 800613c:	eef0 0a68 	vmov.f32	s1, s17
 8006140:	f000 fe27 	bl	8006d92 <finite>
 8006144:	2800      	cmp	r0, #0
 8006146:	d0ea      	beq.n	800611e <pow+0xa2>
 8006148:	ec45 4b10 	vmov	d0, r4, r5
 800614c:	f000 fe21 	bl	8006d92 <finite>
 8006150:	e7c3      	b.n	80060da <pow+0x5e>
 8006152:	4f01      	ldr	r7, [pc, #4]	; (8006158 <pow+0xdc>)
 8006154:	2600      	movs	r6, #0
 8006156:	e7e2      	b.n	800611e <pow+0xa2>
 8006158:	3ff00000 	.word	0x3ff00000
 800615c:	00000000 	.word	0x00000000

08006160 <__ieee754_pow>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	ed2d 8b06 	vpush	{d8-d10}
 8006168:	b089      	sub	sp, #36	; 0x24
 800616a:	ed8d 1b00 	vstr	d1, [sp]
 800616e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006172:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006176:	ea58 0102 	orrs.w	r1, r8, r2
 800617a:	ec57 6b10 	vmov	r6, r7, d0
 800617e:	d115      	bne.n	80061ac <__ieee754_pow+0x4c>
 8006180:	19b3      	adds	r3, r6, r6
 8006182:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006186:	4152      	adcs	r2, r2
 8006188:	4299      	cmp	r1, r3
 800618a:	4b89      	ldr	r3, [pc, #548]	; (80063b0 <__ieee754_pow+0x250>)
 800618c:	4193      	sbcs	r3, r2
 800618e:	f080 84d2 	bcs.w	8006b36 <__ieee754_pow+0x9d6>
 8006192:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f7fa f897 	bl	80002cc <__adddf3>
 800619e:	ec41 0b10 	vmov	d0, r0, r1
 80061a2:	b009      	add	sp, #36	; 0x24
 80061a4:	ecbd 8b06 	vpop	{d8-d10}
 80061a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <__ieee754_pow+0x254>)
 80061ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80061b2:	429c      	cmp	r4, r3
 80061b4:	ee10 aa10 	vmov	sl, s0
 80061b8:	463d      	mov	r5, r7
 80061ba:	dc06      	bgt.n	80061ca <__ieee754_pow+0x6a>
 80061bc:	d101      	bne.n	80061c2 <__ieee754_pow+0x62>
 80061be:	2e00      	cmp	r6, #0
 80061c0:	d1e7      	bne.n	8006192 <__ieee754_pow+0x32>
 80061c2:	4598      	cmp	r8, r3
 80061c4:	dc01      	bgt.n	80061ca <__ieee754_pow+0x6a>
 80061c6:	d10f      	bne.n	80061e8 <__ieee754_pow+0x88>
 80061c8:	b172      	cbz	r2, 80061e8 <__ieee754_pow+0x88>
 80061ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80061ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80061d2:	ea55 050a 	orrs.w	r5, r5, sl
 80061d6:	d1dc      	bne.n	8006192 <__ieee754_pow+0x32>
 80061d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80061dc:	18db      	adds	r3, r3, r3
 80061de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80061e2:	4152      	adcs	r2, r2
 80061e4:	429d      	cmp	r5, r3
 80061e6:	e7d0      	b.n	800618a <__ieee754_pow+0x2a>
 80061e8:	2d00      	cmp	r5, #0
 80061ea:	da3b      	bge.n	8006264 <__ieee754_pow+0x104>
 80061ec:	4b72      	ldr	r3, [pc, #456]	; (80063b8 <__ieee754_pow+0x258>)
 80061ee:	4598      	cmp	r8, r3
 80061f0:	dc51      	bgt.n	8006296 <__ieee754_pow+0x136>
 80061f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80061f6:	4598      	cmp	r8, r3
 80061f8:	f340 84ac 	ble.w	8006b54 <__ieee754_pow+0x9f4>
 80061fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006200:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006204:	2b14      	cmp	r3, #20
 8006206:	dd0f      	ble.n	8006228 <__ieee754_pow+0xc8>
 8006208:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800620c:	fa22 f103 	lsr.w	r1, r2, r3
 8006210:	fa01 f303 	lsl.w	r3, r1, r3
 8006214:	4293      	cmp	r3, r2
 8006216:	f040 849d 	bne.w	8006b54 <__ieee754_pow+0x9f4>
 800621a:	f001 0101 	and.w	r1, r1, #1
 800621e:	f1c1 0302 	rsb	r3, r1, #2
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	b182      	cbz	r2, 8006248 <__ieee754_pow+0xe8>
 8006226:	e05f      	b.n	80062e8 <__ieee754_pow+0x188>
 8006228:	2a00      	cmp	r2, #0
 800622a:	d15b      	bne.n	80062e4 <__ieee754_pow+0x184>
 800622c:	f1c3 0314 	rsb	r3, r3, #20
 8006230:	fa48 f103 	asr.w	r1, r8, r3
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	4543      	cmp	r3, r8
 800623a:	f040 8488 	bne.w	8006b4e <__ieee754_pow+0x9ee>
 800623e:	f001 0101 	and.w	r1, r1, #1
 8006242:	f1c1 0302 	rsb	r3, r1, #2
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	4b5c      	ldr	r3, [pc, #368]	; (80063bc <__ieee754_pow+0x25c>)
 800624a:	4598      	cmp	r8, r3
 800624c:	d132      	bne.n	80062b4 <__ieee754_pow+0x154>
 800624e:	f1b9 0f00 	cmp.w	r9, #0
 8006252:	f280 8478 	bge.w	8006b46 <__ieee754_pow+0x9e6>
 8006256:	4959      	ldr	r1, [pc, #356]	; (80063bc <__ieee754_pow+0x25c>)
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	2000      	movs	r0, #0
 800625e:	f7fa fb15 	bl	800088c <__aeabi_ddiv>
 8006262:	e79c      	b.n	800619e <__ieee754_pow+0x3e>
 8006264:	2300      	movs	r3, #0
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	2a00      	cmp	r2, #0
 800626a:	d13d      	bne.n	80062e8 <__ieee754_pow+0x188>
 800626c:	4b51      	ldr	r3, [pc, #324]	; (80063b4 <__ieee754_pow+0x254>)
 800626e:	4598      	cmp	r8, r3
 8006270:	d1ea      	bne.n	8006248 <__ieee754_pow+0xe8>
 8006272:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006276:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800627a:	ea53 030a 	orrs.w	r3, r3, sl
 800627e:	f000 845a 	beq.w	8006b36 <__ieee754_pow+0x9d6>
 8006282:	4b4f      	ldr	r3, [pc, #316]	; (80063c0 <__ieee754_pow+0x260>)
 8006284:	429c      	cmp	r4, r3
 8006286:	dd08      	ble.n	800629a <__ieee754_pow+0x13a>
 8006288:	f1b9 0f00 	cmp.w	r9, #0
 800628c:	f2c0 8457 	blt.w	8006b3e <__ieee754_pow+0x9de>
 8006290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006294:	e783      	b.n	800619e <__ieee754_pow+0x3e>
 8006296:	2302      	movs	r3, #2
 8006298:	e7e5      	b.n	8006266 <__ieee754_pow+0x106>
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	f04f 0000 	mov.w	r0, #0
 80062a2:	f04f 0100 	mov.w	r1, #0
 80062a6:	f6bf af7a 	bge.w	800619e <__ieee754_pow+0x3e>
 80062aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80062ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062b2:	e774      	b.n	800619e <__ieee754_pow+0x3e>
 80062b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80062b8:	d106      	bne.n	80062c8 <__ieee754_pow+0x168>
 80062ba:	4632      	mov	r2, r6
 80062bc:	463b      	mov	r3, r7
 80062be:	4630      	mov	r0, r6
 80062c0:	4639      	mov	r1, r7
 80062c2:	f7fa f9b9 	bl	8000638 <__aeabi_dmul>
 80062c6:	e76a      	b.n	800619e <__ieee754_pow+0x3e>
 80062c8:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <__ieee754_pow+0x264>)
 80062ca:	4599      	cmp	r9, r3
 80062cc:	d10c      	bne.n	80062e8 <__ieee754_pow+0x188>
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	db0a      	blt.n	80062e8 <__ieee754_pow+0x188>
 80062d2:	ec47 6b10 	vmov	d0, r6, r7
 80062d6:	b009      	add	sp, #36	; 0x24
 80062d8:	ecbd 8b06 	vpop	{d8-d10}
 80062dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	f000 bc6c 	b.w	8006bbc <__ieee754_sqrt>
 80062e4:	2300      	movs	r3, #0
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	ec47 6b10 	vmov	d0, r6, r7
 80062ec:	f000 fd48 	bl	8006d80 <fabs>
 80062f0:	ec51 0b10 	vmov	r0, r1, d0
 80062f4:	f1ba 0f00 	cmp.w	sl, #0
 80062f8:	d129      	bne.n	800634e <__ieee754_pow+0x1ee>
 80062fa:	b124      	cbz	r4, 8006306 <__ieee754_pow+0x1a6>
 80062fc:	4b2f      	ldr	r3, [pc, #188]	; (80063bc <__ieee754_pow+0x25c>)
 80062fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006302:	429a      	cmp	r2, r3
 8006304:	d123      	bne.n	800634e <__ieee754_pow+0x1ee>
 8006306:	f1b9 0f00 	cmp.w	r9, #0
 800630a:	da05      	bge.n	8006318 <__ieee754_pow+0x1b8>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	2000      	movs	r0, #0
 8006312:	492a      	ldr	r1, [pc, #168]	; (80063bc <__ieee754_pow+0x25c>)
 8006314:	f7fa faba 	bl	800088c <__aeabi_ddiv>
 8006318:	2d00      	cmp	r5, #0
 800631a:	f6bf af40 	bge.w	800619e <__ieee754_pow+0x3e>
 800631e:	9b04      	ldr	r3, [sp, #16]
 8006320:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006324:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006328:	4323      	orrs	r3, r4
 800632a:	d108      	bne.n	800633e <__ieee754_pow+0x1de>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4610      	mov	r0, r2
 8006332:	4619      	mov	r1, r3
 8006334:	f7f9 ffc8 	bl	80002c8 <__aeabi_dsub>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	e78f      	b.n	800625e <__ieee754_pow+0xfe>
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	2b01      	cmp	r3, #1
 8006342:	f47f af2c 	bne.w	800619e <__ieee754_pow+0x3e>
 8006346:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800634a:	4619      	mov	r1, r3
 800634c:	e727      	b.n	800619e <__ieee754_pow+0x3e>
 800634e:	0feb      	lsrs	r3, r5, #31
 8006350:	3b01      	subs	r3, #1
 8006352:	9306      	str	r3, [sp, #24]
 8006354:	9a06      	ldr	r2, [sp, #24]
 8006356:	9b04      	ldr	r3, [sp, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	d102      	bne.n	8006362 <__ieee754_pow+0x202>
 800635c:	4632      	mov	r2, r6
 800635e:	463b      	mov	r3, r7
 8006360:	e7e6      	b.n	8006330 <__ieee754_pow+0x1d0>
 8006362:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <__ieee754_pow+0x268>)
 8006364:	4598      	cmp	r8, r3
 8006366:	f340 80fb 	ble.w	8006560 <__ieee754_pow+0x400>
 800636a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800636e:	4598      	cmp	r8, r3
 8006370:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <__ieee754_pow+0x260>)
 8006372:	dd0c      	ble.n	800638e <__ieee754_pow+0x22e>
 8006374:	429c      	cmp	r4, r3
 8006376:	dc0f      	bgt.n	8006398 <__ieee754_pow+0x238>
 8006378:	f1b9 0f00 	cmp.w	r9, #0
 800637c:	da0f      	bge.n	800639e <__ieee754_pow+0x23e>
 800637e:	2000      	movs	r0, #0
 8006380:	b009      	add	sp, #36	; 0x24
 8006382:	ecbd 8b06 	vpop	{d8-d10}
 8006386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	f000 bcf0 	b.w	8006d6e <__math_oflow>
 800638e:	429c      	cmp	r4, r3
 8006390:	dbf2      	blt.n	8006378 <__ieee754_pow+0x218>
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <__ieee754_pow+0x25c>)
 8006394:	429c      	cmp	r4, r3
 8006396:	dd19      	ble.n	80063cc <__ieee754_pow+0x26c>
 8006398:	f1b9 0f00 	cmp.w	r9, #0
 800639c:	dcef      	bgt.n	800637e <__ieee754_pow+0x21e>
 800639e:	2000      	movs	r0, #0
 80063a0:	b009      	add	sp, #36	; 0x24
 80063a2:	ecbd 8b06 	vpop	{d8-d10}
 80063a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	f000 bcd7 	b.w	8006d5c <__math_uflow>
 80063ae:	bf00      	nop
 80063b0:	fff00000 	.word	0xfff00000
 80063b4:	7ff00000 	.word	0x7ff00000
 80063b8:	433fffff 	.word	0x433fffff
 80063bc:	3ff00000 	.word	0x3ff00000
 80063c0:	3fefffff 	.word	0x3fefffff
 80063c4:	3fe00000 	.word	0x3fe00000
 80063c8:	41e00000 	.word	0x41e00000
 80063cc:	4b60      	ldr	r3, [pc, #384]	; (8006550 <__ieee754_pow+0x3f0>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	f7f9 ff7a 	bl	80002c8 <__aeabi_dsub>
 80063d4:	a354      	add	r3, pc, #336	; (adr r3, 8006528 <__ieee754_pow+0x3c8>)
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	4604      	mov	r4, r0
 80063dc:	460d      	mov	r5, r1
 80063de:	f7fa f92b 	bl	8000638 <__aeabi_dmul>
 80063e2:	a353      	add	r3, pc, #332	; (adr r3, 8006530 <__ieee754_pow+0x3d0>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	4606      	mov	r6, r0
 80063ea:	460f      	mov	r7, r1
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa f922 	bl	8000638 <__aeabi_dmul>
 80063f4:	4b57      	ldr	r3, [pc, #348]	; (8006554 <__ieee754_pow+0x3f4>)
 80063f6:	4682      	mov	sl, r0
 80063f8:	468b      	mov	fp, r1
 80063fa:	2200      	movs	r2, #0
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7fa f91a 	bl	8000638 <__aeabi_dmul>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	a14b      	add	r1, pc, #300	; (adr r1, 8006538 <__ieee754_pow+0x3d8>)
 800640a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640e:	f7f9 ff5b 	bl	80002c8 <__aeabi_dsub>
 8006412:	4622      	mov	r2, r4
 8006414:	462b      	mov	r3, r5
 8006416:	f7fa f90f 	bl	8000638 <__aeabi_dmul>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	2000      	movs	r0, #0
 8006420:	494d      	ldr	r1, [pc, #308]	; (8006558 <__ieee754_pow+0x3f8>)
 8006422:	f7f9 ff51 	bl	80002c8 <__aeabi_dsub>
 8006426:	4622      	mov	r2, r4
 8006428:	4680      	mov	r8, r0
 800642a:	4689      	mov	r9, r1
 800642c:	462b      	mov	r3, r5
 800642e:	4620      	mov	r0, r4
 8006430:	4629      	mov	r1, r5
 8006432:	f7fa f901 	bl	8000638 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4640      	mov	r0, r8
 800643c:	4649      	mov	r1, r9
 800643e:	f7fa f8fb 	bl	8000638 <__aeabi_dmul>
 8006442:	a33f      	add	r3, pc, #252	; (adr r3, 8006540 <__ieee754_pow+0x3e0>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7fa f8f6 	bl	8000638 <__aeabi_dmul>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4650      	mov	r0, sl
 8006452:	4659      	mov	r1, fp
 8006454:	f7f9 ff38 	bl	80002c8 <__aeabi_dsub>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4680      	mov	r8, r0
 800645e:	4689      	mov	r9, r1
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7f9 ff32 	bl	80002cc <__adddf3>
 8006468:	2000      	movs	r0, #0
 800646a:	4632      	mov	r2, r6
 800646c:	463b      	mov	r3, r7
 800646e:	4604      	mov	r4, r0
 8006470:	460d      	mov	r5, r1
 8006472:	f7f9 ff29 	bl	80002c8 <__aeabi_dsub>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	f7f9 ff23 	bl	80002c8 <__aeabi_dsub>
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	9a06      	ldr	r2, [sp, #24]
 8006486:	3b01      	subs	r3, #1
 8006488:	4313      	orrs	r3, r2
 800648a:	4682      	mov	sl, r0
 800648c:	468b      	mov	fp, r1
 800648e:	f040 81e7 	bne.w	8006860 <__ieee754_pow+0x700>
 8006492:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006548 <__ieee754_pow+0x3e8>
 8006496:	eeb0 8a47 	vmov.f32	s16, s14
 800649a:	eef0 8a67 	vmov.f32	s17, s15
 800649e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064a2:	2600      	movs	r6, #0
 80064a4:	4632      	mov	r2, r6
 80064a6:	463b      	mov	r3, r7
 80064a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ac:	f7f9 ff0c 	bl	80002c8 <__aeabi_dsub>
 80064b0:	4622      	mov	r2, r4
 80064b2:	462b      	mov	r3, r5
 80064b4:	f7fa f8c0 	bl	8000638 <__aeabi_dmul>
 80064b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064bc:	4680      	mov	r8, r0
 80064be:	4689      	mov	r9, r1
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	f7fa f8b8 	bl	8000638 <__aeabi_dmul>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7f9 fefc 	bl	80002cc <__adddf3>
 80064d4:	4632      	mov	r2, r6
 80064d6:	463b      	mov	r3, r7
 80064d8:	4680      	mov	r8, r0
 80064da:	4689      	mov	r9, r1
 80064dc:	4620      	mov	r0, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	f7fa f8aa 	bl	8000638 <__aeabi_dmul>
 80064e4:	460b      	mov	r3, r1
 80064e6:	4604      	mov	r4, r0
 80064e8:	460d      	mov	r5, r1
 80064ea:	4602      	mov	r2, r0
 80064ec:	4649      	mov	r1, r9
 80064ee:	4640      	mov	r0, r8
 80064f0:	f7f9 feec 	bl	80002cc <__adddf3>
 80064f4:	4b19      	ldr	r3, [pc, #100]	; (800655c <__ieee754_pow+0x3fc>)
 80064f6:	4299      	cmp	r1, r3
 80064f8:	ec45 4b19 	vmov	d9, r4, r5
 80064fc:	4606      	mov	r6, r0
 80064fe:	460f      	mov	r7, r1
 8006500:	468b      	mov	fp, r1
 8006502:	f340 82f1 	ble.w	8006ae8 <__ieee754_pow+0x988>
 8006506:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800650a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800650e:	4303      	orrs	r3, r0
 8006510:	f000 81e4 	beq.w	80068dc <__ieee754_pow+0x77c>
 8006514:	ec51 0b18 	vmov	r0, r1, d8
 8006518:	2200      	movs	r2, #0
 800651a:	2300      	movs	r3, #0
 800651c:	f7fa fafe 	bl	8000b1c <__aeabi_dcmplt>
 8006520:	3800      	subs	r0, #0
 8006522:	bf18      	it	ne
 8006524:	2001      	movne	r0, #1
 8006526:	e72b      	b.n	8006380 <__ieee754_pow+0x220>
 8006528:	60000000 	.word	0x60000000
 800652c:	3ff71547 	.word	0x3ff71547
 8006530:	f85ddf44 	.word	0xf85ddf44
 8006534:	3e54ae0b 	.word	0x3e54ae0b
 8006538:	55555555 	.word	0x55555555
 800653c:	3fd55555 	.word	0x3fd55555
 8006540:	652b82fe 	.word	0x652b82fe
 8006544:	3ff71547 	.word	0x3ff71547
 8006548:	00000000 	.word	0x00000000
 800654c:	bff00000 	.word	0xbff00000
 8006550:	3ff00000 	.word	0x3ff00000
 8006554:	3fd00000 	.word	0x3fd00000
 8006558:	3fe00000 	.word	0x3fe00000
 800655c:	408fffff 	.word	0x408fffff
 8006560:	4bd5      	ldr	r3, [pc, #852]	; (80068b8 <__ieee754_pow+0x758>)
 8006562:	402b      	ands	r3, r5
 8006564:	2200      	movs	r2, #0
 8006566:	b92b      	cbnz	r3, 8006574 <__ieee754_pow+0x414>
 8006568:	4bd4      	ldr	r3, [pc, #848]	; (80068bc <__ieee754_pow+0x75c>)
 800656a:	f7fa f865 	bl	8000638 <__aeabi_dmul>
 800656e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006572:	460c      	mov	r4, r1
 8006574:	1523      	asrs	r3, r4, #20
 8006576:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800657a:	4413      	add	r3, r2
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	4bd0      	ldr	r3, [pc, #832]	; (80068c0 <__ieee754_pow+0x760>)
 8006580:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006584:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006588:	429c      	cmp	r4, r3
 800658a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800658e:	dd08      	ble.n	80065a2 <__ieee754_pow+0x442>
 8006590:	4bcc      	ldr	r3, [pc, #816]	; (80068c4 <__ieee754_pow+0x764>)
 8006592:	429c      	cmp	r4, r3
 8006594:	f340 8162 	ble.w	800685c <__ieee754_pow+0x6fc>
 8006598:	9b05      	ldr	r3, [sp, #20]
 800659a:	3301      	adds	r3, #1
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80065a2:	2400      	movs	r4, #0
 80065a4:	00e3      	lsls	r3, r4, #3
 80065a6:	9307      	str	r3, [sp, #28]
 80065a8:	4bc7      	ldr	r3, [pc, #796]	; (80068c8 <__ieee754_pow+0x768>)
 80065aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065ae:	ed93 7b00 	vldr	d7, [r3]
 80065b2:	4629      	mov	r1, r5
 80065b4:	ec53 2b17 	vmov	r2, r3, d7
 80065b8:	eeb0 9a47 	vmov.f32	s18, s14
 80065bc:	eef0 9a67 	vmov.f32	s19, s15
 80065c0:	4682      	mov	sl, r0
 80065c2:	f7f9 fe81 	bl	80002c8 <__aeabi_dsub>
 80065c6:	4652      	mov	r2, sl
 80065c8:	4606      	mov	r6, r0
 80065ca:	460f      	mov	r7, r1
 80065cc:	462b      	mov	r3, r5
 80065ce:	ec51 0b19 	vmov	r0, r1, d9
 80065d2:	f7f9 fe7b 	bl	80002cc <__adddf3>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	2000      	movs	r0, #0
 80065dc:	49bb      	ldr	r1, [pc, #748]	; (80068cc <__ieee754_pow+0x76c>)
 80065de:	f7fa f955 	bl	800088c <__aeabi_ddiv>
 80065e2:	ec41 0b1a 	vmov	d10, r0, r1
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4630      	mov	r0, r6
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7fa f823 	bl	8000638 <__aeabi_dmul>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80065fe:	46ab      	mov	fp, r5
 8006600:	106d      	asrs	r5, r5, #1
 8006602:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006606:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800660a:	ec41 0b18 	vmov	d8, r0, r1
 800660e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006612:	2200      	movs	r2, #0
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	f7fa f80c 	bl	8000638 <__aeabi_dmul>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4630      	mov	r0, r6
 8006626:	4639      	mov	r1, r7
 8006628:	f7f9 fe4e 	bl	80002c8 <__aeabi_dsub>
 800662c:	ec53 2b19 	vmov	r2, r3, d9
 8006630:	4606      	mov	r6, r0
 8006632:	460f      	mov	r7, r1
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 fe46 	bl	80002c8 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4650      	mov	r0, sl
 8006642:	4659      	mov	r1, fp
 8006644:	f7f9 fe40 	bl	80002c8 <__aeabi_dsub>
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	f7f9 fff4 	bl	8000638 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4630      	mov	r0, r6
 8006656:	4639      	mov	r1, r7
 8006658:	f7f9 fe36 	bl	80002c8 <__aeabi_dsub>
 800665c:	ec53 2b1a 	vmov	r2, r3, d10
 8006660:	f7f9 ffea 	bl	8000638 <__aeabi_dmul>
 8006664:	ec53 2b18 	vmov	r2, r3, d8
 8006668:	ec41 0b19 	vmov	d9, r0, r1
 800666c:	ec51 0b18 	vmov	r0, r1, d8
 8006670:	f7f9 ffe2 	bl	8000638 <__aeabi_dmul>
 8006674:	a37c      	add	r3, pc, #496	; (adr r3, 8006868 <__ieee754_pow+0x708>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	4604      	mov	r4, r0
 800667c:	460d      	mov	r5, r1
 800667e:	f7f9 ffdb 	bl	8000638 <__aeabi_dmul>
 8006682:	a37b      	add	r3, pc, #492	; (adr r3, 8006870 <__ieee754_pow+0x710>)
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f7f9 fe20 	bl	80002cc <__adddf3>
 800668c:	4622      	mov	r2, r4
 800668e:	462b      	mov	r3, r5
 8006690:	f7f9 ffd2 	bl	8000638 <__aeabi_dmul>
 8006694:	a378      	add	r3, pc, #480	; (adr r3, 8006878 <__ieee754_pow+0x718>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f7f9 fe17 	bl	80002cc <__adddf3>
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	f7f9 ffc9 	bl	8000638 <__aeabi_dmul>
 80066a6:	a376      	add	r3, pc, #472	; (adr r3, 8006880 <__ieee754_pow+0x720>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f7f9 fe0e 	bl	80002cc <__adddf3>
 80066b0:	4622      	mov	r2, r4
 80066b2:	462b      	mov	r3, r5
 80066b4:	f7f9 ffc0 	bl	8000638 <__aeabi_dmul>
 80066b8:	a373      	add	r3, pc, #460	; (adr r3, 8006888 <__ieee754_pow+0x728>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f7f9 fe05 	bl	80002cc <__adddf3>
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	f7f9 ffb7 	bl	8000638 <__aeabi_dmul>
 80066ca:	a371      	add	r3, pc, #452	; (adr r3, 8006890 <__ieee754_pow+0x730>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 fdfc 	bl	80002cc <__adddf3>
 80066d4:	4622      	mov	r2, r4
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	462b      	mov	r3, r5
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 ffaa 	bl	8000638 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7f9 ffa4 	bl	8000638 <__aeabi_dmul>
 80066f0:	4642      	mov	r2, r8
 80066f2:	4604      	mov	r4, r0
 80066f4:	460d      	mov	r5, r1
 80066f6:	464b      	mov	r3, r9
 80066f8:	ec51 0b18 	vmov	r0, r1, d8
 80066fc:	f7f9 fde6 	bl	80002cc <__adddf3>
 8006700:	ec53 2b19 	vmov	r2, r3, d9
 8006704:	f7f9 ff98 	bl	8000638 <__aeabi_dmul>
 8006708:	4622      	mov	r2, r4
 800670a:	462b      	mov	r3, r5
 800670c:	f7f9 fdde 	bl	80002cc <__adddf3>
 8006710:	4642      	mov	r2, r8
 8006712:	4682      	mov	sl, r0
 8006714:	468b      	mov	fp, r1
 8006716:	464b      	mov	r3, r9
 8006718:	4640      	mov	r0, r8
 800671a:	4649      	mov	r1, r9
 800671c:	f7f9 ff8c 	bl	8000638 <__aeabi_dmul>
 8006720:	4b6b      	ldr	r3, [pc, #428]	; (80068d0 <__ieee754_pow+0x770>)
 8006722:	2200      	movs	r2, #0
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	f7f9 fdd0 	bl	80002cc <__adddf3>
 800672c:	4652      	mov	r2, sl
 800672e:	465b      	mov	r3, fp
 8006730:	f7f9 fdcc 	bl	80002cc <__adddf3>
 8006734:	2000      	movs	r0, #0
 8006736:	4604      	mov	r4, r0
 8006738:	460d      	mov	r5, r1
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 ff79 	bl	8000638 <__aeabi_dmul>
 8006746:	4b62      	ldr	r3, [pc, #392]	; (80068d0 <__ieee754_pow+0x770>)
 8006748:	4680      	mov	r8, r0
 800674a:	4689      	mov	r9, r1
 800674c:	2200      	movs	r2, #0
 800674e:	4620      	mov	r0, r4
 8006750:	4629      	mov	r1, r5
 8006752:	f7f9 fdb9 	bl	80002c8 <__aeabi_dsub>
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	f7f9 fdb5 	bl	80002c8 <__aeabi_dsub>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	f7f9 fdaf 	bl	80002c8 <__aeabi_dsub>
 800676a:	ec53 2b18 	vmov	r2, r3, d8
 800676e:	f7f9 ff63 	bl	8000638 <__aeabi_dmul>
 8006772:	4622      	mov	r2, r4
 8006774:	4606      	mov	r6, r0
 8006776:	460f      	mov	r7, r1
 8006778:	462b      	mov	r3, r5
 800677a:	ec51 0b19 	vmov	r0, r1, d9
 800677e:	f7f9 ff5b 	bl	8000638 <__aeabi_dmul>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 fd9f 	bl	80002cc <__adddf3>
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 fd97 	bl	80002cc <__adddf3>
 800679e:	a33e      	add	r3, pc, #248	; (adr r3, 8006898 <__ieee754_pow+0x738>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	2000      	movs	r0, #0
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	f7f9 ff45 	bl	8000638 <__aeabi_dmul>
 80067ae:	4642      	mov	r2, r8
 80067b0:	ec41 0b18 	vmov	d8, r0, r1
 80067b4:	464b      	mov	r3, r9
 80067b6:	4620      	mov	r0, r4
 80067b8:	4629      	mov	r1, r5
 80067ba:	f7f9 fd85 	bl	80002c8 <__aeabi_dsub>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4630      	mov	r0, r6
 80067c4:	4639      	mov	r1, r7
 80067c6:	f7f9 fd7f 	bl	80002c8 <__aeabi_dsub>
 80067ca:	a335      	add	r3, pc, #212	; (adr r3, 80068a0 <__ieee754_pow+0x740>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f7f9 ff32 	bl	8000638 <__aeabi_dmul>
 80067d4:	a334      	add	r3, pc, #208	; (adr r3, 80068a8 <__ieee754_pow+0x748>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	4606      	mov	r6, r0
 80067dc:	460f      	mov	r7, r1
 80067de:	4620      	mov	r0, r4
 80067e0:	4629      	mov	r1, r5
 80067e2:	f7f9 ff29 	bl	8000638 <__aeabi_dmul>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7f9 fd6d 	bl	80002cc <__adddf3>
 80067f2:	9a07      	ldr	r2, [sp, #28]
 80067f4:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <__ieee754_pow+0x774>)
 80067f6:	4413      	add	r3, r2
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	f7f9 fd66 	bl	80002cc <__adddf3>
 8006800:	4682      	mov	sl, r0
 8006802:	9805      	ldr	r0, [sp, #20]
 8006804:	468b      	mov	fp, r1
 8006806:	f7f9 fead 	bl	8000564 <__aeabi_i2d>
 800680a:	9a07      	ldr	r2, [sp, #28]
 800680c:	4b32      	ldr	r3, [pc, #200]	; (80068d8 <__ieee754_pow+0x778>)
 800680e:	4413      	add	r3, r2
 8006810:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006814:	4606      	mov	r6, r0
 8006816:	460f      	mov	r7, r1
 8006818:	4652      	mov	r2, sl
 800681a:	465b      	mov	r3, fp
 800681c:	ec51 0b18 	vmov	r0, r1, d8
 8006820:	f7f9 fd54 	bl	80002cc <__adddf3>
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	f7f9 fd50 	bl	80002cc <__adddf3>
 800682c:	4632      	mov	r2, r6
 800682e:	463b      	mov	r3, r7
 8006830:	f7f9 fd4c 	bl	80002cc <__adddf3>
 8006834:	2000      	movs	r0, #0
 8006836:	4632      	mov	r2, r6
 8006838:	463b      	mov	r3, r7
 800683a:	4604      	mov	r4, r0
 800683c:	460d      	mov	r5, r1
 800683e:	f7f9 fd43 	bl	80002c8 <__aeabi_dsub>
 8006842:	4642      	mov	r2, r8
 8006844:	464b      	mov	r3, r9
 8006846:	f7f9 fd3f 	bl	80002c8 <__aeabi_dsub>
 800684a:	ec53 2b18 	vmov	r2, r3, d8
 800684e:	f7f9 fd3b 	bl	80002c8 <__aeabi_dsub>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	4650      	mov	r0, sl
 8006858:	4659      	mov	r1, fp
 800685a:	e610      	b.n	800647e <__ieee754_pow+0x31e>
 800685c:	2401      	movs	r4, #1
 800685e:	e6a1      	b.n	80065a4 <__ieee754_pow+0x444>
 8006860:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80068b0 <__ieee754_pow+0x750>
 8006864:	e617      	b.n	8006496 <__ieee754_pow+0x336>
 8006866:	bf00      	nop
 8006868:	4a454eef 	.word	0x4a454eef
 800686c:	3fca7e28 	.word	0x3fca7e28
 8006870:	93c9db65 	.word	0x93c9db65
 8006874:	3fcd864a 	.word	0x3fcd864a
 8006878:	a91d4101 	.word	0xa91d4101
 800687c:	3fd17460 	.word	0x3fd17460
 8006880:	518f264d 	.word	0x518f264d
 8006884:	3fd55555 	.word	0x3fd55555
 8006888:	db6fabff 	.word	0xdb6fabff
 800688c:	3fdb6db6 	.word	0x3fdb6db6
 8006890:	33333303 	.word	0x33333303
 8006894:	3fe33333 	.word	0x3fe33333
 8006898:	e0000000 	.word	0xe0000000
 800689c:	3feec709 	.word	0x3feec709
 80068a0:	dc3a03fd 	.word	0xdc3a03fd
 80068a4:	3feec709 	.word	0x3feec709
 80068a8:	145b01f5 	.word	0x145b01f5
 80068ac:	be3e2fe0 	.word	0xbe3e2fe0
 80068b0:	00000000 	.word	0x00000000
 80068b4:	3ff00000 	.word	0x3ff00000
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	43400000 	.word	0x43400000
 80068c0:	0003988e 	.word	0x0003988e
 80068c4:	000bb679 	.word	0x000bb679
 80068c8:	080070f8 	.word	0x080070f8
 80068cc:	3ff00000 	.word	0x3ff00000
 80068d0:	40080000 	.word	0x40080000
 80068d4:	08007118 	.word	0x08007118
 80068d8:	08007108 	.word	0x08007108
 80068dc:	a3b5      	add	r3, pc, #724	; (adr r3, 8006bb4 <__ieee754_pow+0xa54>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 fcf1 	bl	80002cc <__adddf3>
 80068ea:	4622      	mov	r2, r4
 80068ec:	ec41 0b1a 	vmov	d10, r0, r1
 80068f0:	462b      	mov	r3, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	f7f9 fce7 	bl	80002c8 <__aeabi_dsub>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	ec51 0b1a 	vmov	r0, r1, d10
 8006902:	f7fa f929 	bl	8000b58 <__aeabi_dcmpgt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f47f ae04 	bne.w	8006514 <__ieee754_pow+0x3b4>
 800690c:	4aa4      	ldr	r2, [pc, #656]	; (8006ba0 <__ieee754_pow+0xa40>)
 800690e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006912:	4293      	cmp	r3, r2
 8006914:	f340 8108 	ble.w	8006b28 <__ieee754_pow+0x9c8>
 8006918:	151b      	asrs	r3, r3, #20
 800691a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800691e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006922:	fa4a f303 	asr.w	r3, sl, r3
 8006926:	445b      	add	r3, fp
 8006928:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800692c:	4e9d      	ldr	r6, [pc, #628]	; (8006ba4 <__ieee754_pow+0xa44>)
 800692e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006932:	4116      	asrs	r6, r2
 8006934:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006938:	2000      	movs	r0, #0
 800693a:	ea23 0106 	bic.w	r1, r3, r6
 800693e:	f1c2 0214 	rsb	r2, r2, #20
 8006942:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006946:	fa4a fa02 	asr.w	sl, sl, r2
 800694a:	f1bb 0f00 	cmp.w	fp, #0
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4620      	mov	r0, r4
 8006954:	4629      	mov	r1, r5
 8006956:	bfb8      	it	lt
 8006958:	f1ca 0a00 	rsblt	sl, sl, #0
 800695c:	f7f9 fcb4 	bl	80002c8 <__aeabi_dsub>
 8006960:	ec41 0b19 	vmov	d9, r0, r1
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	ec51 0b19 	vmov	r0, r1, d9
 800696c:	f7f9 fcae 	bl	80002cc <__adddf3>
 8006970:	a37b      	add	r3, pc, #492	; (adr r3, 8006b60 <__ieee754_pow+0xa00>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	2000      	movs	r0, #0
 8006978:	4604      	mov	r4, r0
 800697a:	460d      	mov	r5, r1
 800697c:	f7f9 fe5c 	bl	8000638 <__aeabi_dmul>
 8006980:	ec53 2b19 	vmov	r2, r3, d9
 8006984:	4606      	mov	r6, r0
 8006986:	460f      	mov	r7, r1
 8006988:	4620      	mov	r0, r4
 800698a:	4629      	mov	r1, r5
 800698c:	f7f9 fc9c 	bl	80002c8 <__aeabi_dsub>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4640      	mov	r0, r8
 8006996:	4649      	mov	r1, r9
 8006998:	f7f9 fc96 	bl	80002c8 <__aeabi_dsub>
 800699c:	a372      	add	r3, pc, #456	; (adr r3, 8006b68 <__ieee754_pow+0xa08>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fe49 	bl	8000638 <__aeabi_dmul>
 80069a6:	a372      	add	r3, pc, #456	; (adr r3, 8006b70 <__ieee754_pow+0xa10>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	4620      	mov	r0, r4
 80069b2:	4629      	mov	r1, r5
 80069b4:	f7f9 fe40 	bl	8000638 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4640      	mov	r0, r8
 80069be:	4649      	mov	r1, r9
 80069c0:	f7f9 fc84 	bl	80002cc <__adddf3>
 80069c4:	4604      	mov	r4, r0
 80069c6:	460d      	mov	r5, r1
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7f9 fc7c 	bl	80002cc <__adddf3>
 80069d4:	4632      	mov	r2, r6
 80069d6:	463b      	mov	r3, r7
 80069d8:	4680      	mov	r8, r0
 80069da:	4689      	mov	r9, r1
 80069dc:	f7f9 fc74 	bl	80002c8 <__aeabi_dsub>
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	4620      	mov	r0, r4
 80069e6:	4629      	mov	r1, r5
 80069e8:	f7f9 fc6e 	bl	80002c8 <__aeabi_dsub>
 80069ec:	4642      	mov	r2, r8
 80069ee:	4606      	mov	r6, r0
 80069f0:	460f      	mov	r7, r1
 80069f2:	464b      	mov	r3, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	4649      	mov	r1, r9
 80069f8:	f7f9 fe1e 	bl	8000638 <__aeabi_dmul>
 80069fc:	a35e      	add	r3, pc, #376	; (adr r3, 8006b78 <__ieee754_pow+0xa18>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	4604      	mov	r4, r0
 8006a04:	460d      	mov	r5, r1
 8006a06:	f7f9 fe17 	bl	8000638 <__aeabi_dmul>
 8006a0a:	a35d      	add	r3, pc, #372	; (adr r3, 8006b80 <__ieee754_pow+0xa20>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fc5a 	bl	80002c8 <__aeabi_dsub>
 8006a14:	4622      	mov	r2, r4
 8006a16:	462b      	mov	r3, r5
 8006a18:	f7f9 fe0e 	bl	8000638 <__aeabi_dmul>
 8006a1c:	a35a      	add	r3, pc, #360	; (adr r3, 8006b88 <__ieee754_pow+0xa28>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 fc53 	bl	80002cc <__adddf3>
 8006a26:	4622      	mov	r2, r4
 8006a28:	462b      	mov	r3, r5
 8006a2a:	f7f9 fe05 	bl	8000638 <__aeabi_dmul>
 8006a2e:	a358      	add	r3, pc, #352	; (adr r3, 8006b90 <__ieee754_pow+0xa30>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 fc48 	bl	80002c8 <__aeabi_dsub>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	462b      	mov	r3, r5
 8006a3c:	f7f9 fdfc 	bl	8000638 <__aeabi_dmul>
 8006a40:	a355      	add	r3, pc, #340	; (adr r3, 8006b98 <__ieee754_pow+0xa38>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fc41 	bl	80002cc <__adddf3>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	f7f9 fdf3 	bl	8000638 <__aeabi_dmul>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4640      	mov	r0, r8
 8006a58:	4649      	mov	r1, r9
 8006a5a:	f7f9 fc35 	bl	80002c8 <__aeabi_dsub>
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4640      	mov	r0, r8
 8006a68:	4649      	mov	r1, r9
 8006a6a:	f7f9 fde5 	bl	8000638 <__aeabi_dmul>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	ec41 0b19 	vmov	d9, r0, r1
 8006a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	f7f9 fc24 	bl	80002c8 <__aeabi_dsub>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	ec51 0b19 	vmov	r0, r1, d9
 8006a88:	f7f9 ff00 	bl	800088c <__aeabi_ddiv>
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	4604      	mov	r4, r0
 8006a90:	460d      	mov	r5, r1
 8006a92:	463b      	mov	r3, r7
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7f9 fdce 	bl	8000638 <__aeabi_dmul>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7f9 fc14 	bl	80002cc <__adddf3>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7f9 fc0c 	bl	80002c8 <__aeabi_dsub>
 8006ab0:	4642      	mov	r2, r8
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	f7f9 fc08 	bl	80002c8 <__aeabi_dsub>
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4602      	mov	r2, r0
 8006abc:	493a      	ldr	r1, [pc, #232]	; (8006ba8 <__ieee754_pow+0xa48>)
 8006abe:	2000      	movs	r0, #0
 8006ac0:	f7f9 fc02 	bl	80002c8 <__aeabi_dsub>
 8006ac4:	ec41 0b10 	vmov	d0, r0, r1
 8006ac8:	ee10 3a90 	vmov	r3, s1
 8006acc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad4:	da2b      	bge.n	8006b2e <__ieee754_pow+0x9ce>
 8006ad6:	4650      	mov	r0, sl
 8006ad8:	f000 f966 	bl	8006da8 <scalbn>
 8006adc:	ec51 0b10 	vmov	r0, r1, d0
 8006ae0:	ec53 2b18 	vmov	r2, r3, d8
 8006ae4:	f7ff bbed 	b.w	80062c2 <__ieee754_pow+0x162>
 8006ae8:	4b30      	ldr	r3, [pc, #192]	; (8006bac <__ieee754_pow+0xa4c>)
 8006aea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006aee:	429e      	cmp	r6, r3
 8006af0:	f77f af0c 	ble.w	800690c <__ieee754_pow+0x7ac>
 8006af4:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <__ieee754_pow+0xa50>)
 8006af6:	440b      	add	r3, r1
 8006af8:	4303      	orrs	r3, r0
 8006afa:	d009      	beq.n	8006b10 <__ieee754_pow+0x9b0>
 8006afc:	ec51 0b18 	vmov	r0, r1, d8
 8006b00:	2200      	movs	r2, #0
 8006b02:	2300      	movs	r3, #0
 8006b04:	f7fa f80a 	bl	8000b1c <__aeabi_dcmplt>
 8006b08:	3800      	subs	r0, #0
 8006b0a:	bf18      	it	ne
 8006b0c:	2001      	movne	r0, #1
 8006b0e:	e447      	b.n	80063a0 <__ieee754_pow+0x240>
 8006b10:	4622      	mov	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	f7f9 fbd8 	bl	80002c8 <__aeabi_dsub>
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	f7fa f812 	bl	8000b44 <__aeabi_dcmpge>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	f43f aef3 	beq.w	800690c <__ieee754_pow+0x7ac>
 8006b26:	e7e9      	b.n	8006afc <__ieee754_pow+0x99c>
 8006b28:	f04f 0a00 	mov.w	sl, #0
 8006b2c:	e71a      	b.n	8006964 <__ieee754_pow+0x804>
 8006b2e:	ec51 0b10 	vmov	r0, r1, d0
 8006b32:	4619      	mov	r1, r3
 8006b34:	e7d4      	b.n	8006ae0 <__ieee754_pow+0x980>
 8006b36:	491c      	ldr	r1, [pc, #112]	; (8006ba8 <__ieee754_pow+0xa48>)
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f7ff bb30 	b.w	800619e <__ieee754_pow+0x3e>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	2100      	movs	r1, #0
 8006b42:	f7ff bb2c 	b.w	800619e <__ieee754_pow+0x3e>
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7ff bb28 	b.w	800619e <__ieee754_pow+0x3e>
 8006b4e:	9204      	str	r2, [sp, #16]
 8006b50:	f7ff bb7a 	b.w	8006248 <__ieee754_pow+0xe8>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f7ff bb64 	b.w	8006222 <__ieee754_pow+0xc2>
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w
 8006b60:	00000000 	.word	0x00000000
 8006b64:	3fe62e43 	.word	0x3fe62e43
 8006b68:	fefa39ef 	.word	0xfefa39ef
 8006b6c:	3fe62e42 	.word	0x3fe62e42
 8006b70:	0ca86c39 	.word	0x0ca86c39
 8006b74:	be205c61 	.word	0xbe205c61
 8006b78:	72bea4d0 	.word	0x72bea4d0
 8006b7c:	3e663769 	.word	0x3e663769
 8006b80:	c5d26bf1 	.word	0xc5d26bf1
 8006b84:	3ebbbd41 	.word	0x3ebbbd41
 8006b88:	af25de2c 	.word	0xaf25de2c
 8006b8c:	3f11566a 	.word	0x3f11566a
 8006b90:	16bebd93 	.word	0x16bebd93
 8006b94:	3f66c16c 	.word	0x3f66c16c
 8006b98:	5555553e 	.word	0x5555553e
 8006b9c:	3fc55555 	.word	0x3fc55555
 8006ba0:	3fe00000 	.word	0x3fe00000
 8006ba4:	000fffff 	.word	0x000fffff
 8006ba8:	3ff00000 	.word	0x3ff00000
 8006bac:	4090cbff 	.word	0x4090cbff
 8006bb0:	3f6f3400 	.word	0x3f6f3400
 8006bb4:	652b82fe 	.word	0x652b82fe
 8006bb8:	3c971547 	.word	0x3c971547

08006bbc <__ieee754_sqrt>:
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	ec55 4b10 	vmov	r4, r5, d0
 8006bc4:	4e55      	ldr	r6, [pc, #340]	; (8006d1c <__ieee754_sqrt+0x160>)
 8006bc6:	43ae      	bics	r6, r5
 8006bc8:	ee10 0a10 	vmov	r0, s0
 8006bcc:	ee10 3a10 	vmov	r3, s0
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	d110      	bne.n	8006bf8 <__ieee754_sqrt+0x3c>
 8006bd6:	ee10 2a10 	vmov	r2, s0
 8006bda:	462b      	mov	r3, r5
 8006bdc:	f7f9 fd2c 	bl	8000638 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 fb70 	bl	80002cc <__adddf3>
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	ec45 4b10 	vmov	d0, r4, r5
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	dc10      	bgt.n	8006c1e <__ieee754_sqrt+0x62>
 8006bfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c00:	4330      	orrs	r0, r6
 8006c02:	d0f5      	beq.n	8006bf0 <__ieee754_sqrt+0x34>
 8006c04:	b15d      	cbz	r5, 8006c1e <__ieee754_sqrt+0x62>
 8006c06:	ee10 2a10 	vmov	r2, s0
 8006c0a:	462b      	mov	r3, r5
 8006c0c:	ee10 0a10 	vmov	r0, s0
 8006c10:	f7f9 fb5a 	bl	80002c8 <__aeabi_dsub>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	f7f9 fe38 	bl	800088c <__aeabi_ddiv>
 8006c1c:	e7e6      	b.n	8006bec <__ieee754_sqrt+0x30>
 8006c1e:	1512      	asrs	r2, r2, #20
 8006c20:	d074      	beq.n	8006d0c <__ieee754_sqrt+0x150>
 8006c22:	07d4      	lsls	r4, r2, #31
 8006c24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006c28:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006c30:	bf5e      	ittt	pl
 8006c32:	0fda      	lsrpl	r2, r3, #31
 8006c34:	005b      	lslpl	r3, r3, #1
 8006c36:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006c3a:	2400      	movs	r4, #0
 8006c3c:	0fda      	lsrs	r2, r3, #31
 8006c3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006c42:	107f      	asrs	r7, r7, #1
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	2516      	movs	r5, #22
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006c4e:	1886      	adds	r6, r0, r2
 8006c50:	428e      	cmp	r6, r1
 8006c52:	bfde      	ittt	le
 8006c54:	1b89      	suble	r1, r1, r6
 8006c56:	18b0      	addle	r0, r6, r2
 8006c58:	18a4      	addle	r4, r4, r2
 8006c5a:	0049      	lsls	r1, r1, #1
 8006c5c:	3d01      	subs	r5, #1
 8006c5e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006c62:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006c66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c6a:	d1f0      	bne.n	8006c4e <__ieee754_sqrt+0x92>
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	f04f 0e20 	mov.w	lr, #32
 8006c72:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006c76:	4281      	cmp	r1, r0
 8006c78:	eb06 0c05 	add.w	ip, r6, r5
 8006c7c:	dc02      	bgt.n	8006c84 <__ieee754_sqrt+0xc8>
 8006c7e:	d113      	bne.n	8006ca8 <__ieee754_sqrt+0xec>
 8006c80:	459c      	cmp	ip, r3
 8006c82:	d811      	bhi.n	8006ca8 <__ieee754_sqrt+0xec>
 8006c84:	f1bc 0f00 	cmp.w	ip, #0
 8006c88:	eb0c 0506 	add.w	r5, ip, r6
 8006c8c:	da43      	bge.n	8006d16 <__ieee754_sqrt+0x15a>
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	db41      	blt.n	8006d16 <__ieee754_sqrt+0x15a>
 8006c92:	f100 0801 	add.w	r8, r0, #1
 8006c96:	1a09      	subs	r1, r1, r0
 8006c98:	459c      	cmp	ip, r3
 8006c9a:	bf88      	it	hi
 8006c9c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006ca0:	eba3 030c 	sub.w	r3, r3, ip
 8006ca4:	4432      	add	r2, r6
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006cac:	f1be 0e01 	subs.w	lr, lr, #1
 8006cb0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cb8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006cbc:	d1db      	bne.n	8006c76 <__ieee754_sqrt+0xba>
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	d006      	beq.n	8006cd0 <__ieee754_sqrt+0x114>
 8006cc2:	1c50      	adds	r0, r2, #1
 8006cc4:	bf13      	iteet	ne
 8006cc6:	3201      	addne	r2, #1
 8006cc8:	3401      	addeq	r4, #1
 8006cca:	4672      	moveq	r2, lr
 8006ccc:	f022 0201 	bicne.w	r2, r2, #1
 8006cd0:	1063      	asrs	r3, r4, #1
 8006cd2:	0852      	lsrs	r2, r2, #1
 8006cd4:	07e1      	lsls	r1, r4, #31
 8006cd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006cda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006cde:	bf48      	it	mi
 8006ce0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006ce4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006ce8:	4614      	mov	r4, r2
 8006cea:	e781      	b.n	8006bf0 <__ieee754_sqrt+0x34>
 8006cec:	0ad9      	lsrs	r1, r3, #11
 8006cee:	3815      	subs	r0, #21
 8006cf0:	055b      	lsls	r3, r3, #21
 8006cf2:	2900      	cmp	r1, #0
 8006cf4:	d0fa      	beq.n	8006cec <__ieee754_sqrt+0x130>
 8006cf6:	02cd      	lsls	r5, r1, #11
 8006cf8:	d50a      	bpl.n	8006d10 <__ieee754_sqrt+0x154>
 8006cfa:	f1c2 0420 	rsb	r4, r2, #32
 8006cfe:	fa23 f404 	lsr.w	r4, r3, r4
 8006d02:	1e55      	subs	r5, r2, #1
 8006d04:	4093      	lsls	r3, r2
 8006d06:	4321      	orrs	r1, r4
 8006d08:	1b42      	subs	r2, r0, r5
 8006d0a:	e78a      	b.n	8006c22 <__ieee754_sqrt+0x66>
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	e7f0      	b.n	8006cf2 <__ieee754_sqrt+0x136>
 8006d10:	0049      	lsls	r1, r1, #1
 8006d12:	3201      	adds	r2, #1
 8006d14:	e7ef      	b.n	8006cf6 <__ieee754_sqrt+0x13a>
 8006d16:	4680      	mov	r8, r0
 8006d18:	e7bd      	b.n	8006c96 <__ieee754_sqrt+0xda>
 8006d1a:	bf00      	nop
 8006d1c:	7ff00000 	.word	0x7ff00000

08006d20 <with_errno>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4604      	mov	r4, r0
 8006d24:	460d      	mov	r5, r1
 8006d26:	4616      	mov	r6, r2
 8006d28:	f7fe fc6a 	bl	8005600 <__errno>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	6006      	str	r6, [r0, #0]
 8006d30:	4620      	mov	r0, r4
 8006d32:	bd70      	pop	{r4, r5, r6, pc}

08006d34 <xflow>:
 8006d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d36:	4614      	mov	r4, r2
 8006d38:	461d      	mov	r5, r3
 8006d3a:	b108      	cbz	r0, 8006d40 <xflow+0xc>
 8006d3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	e9cd 2300 	strd	r2, r3, [sp]
 8006d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7f9 fc74 	bl	8000638 <__aeabi_dmul>
 8006d50:	2222      	movs	r2, #34	; 0x22
 8006d52:	b003      	add	sp, #12
 8006d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d58:	f7ff bfe2 	b.w	8006d20 <with_errno>

08006d5c <__math_uflow>:
 8006d5c:	b508      	push	{r3, lr}
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d64:	f7ff ffe6 	bl	8006d34 <xflow>
 8006d68:	ec41 0b10 	vmov	d0, r0, r1
 8006d6c:	bd08      	pop	{r3, pc}

08006d6e <__math_oflow>:
 8006d6e:	b508      	push	{r3, lr}
 8006d70:	2200      	movs	r2, #0
 8006d72:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006d76:	f7ff ffdd 	bl	8006d34 <xflow>
 8006d7a:	ec41 0b10 	vmov	d0, r0, r1
 8006d7e:	bd08      	pop	{r3, pc}

08006d80 <fabs>:
 8006d80:	ec51 0b10 	vmov	r0, r1, d0
 8006d84:	ee10 2a10 	vmov	r2, s0
 8006d88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d8c:	ec43 2b10 	vmov	d0, r2, r3
 8006d90:	4770      	bx	lr

08006d92 <finite>:
 8006d92:	b082      	sub	sp, #8
 8006d94:	ed8d 0b00 	vstr	d0, [sp]
 8006d98:	9801      	ldr	r0, [sp, #4]
 8006d9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006d9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006da2:	0fc0      	lsrs	r0, r0, #31
 8006da4:	b002      	add	sp, #8
 8006da6:	4770      	bx	lr

08006da8 <scalbn>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	ec55 4b10 	vmov	r4, r5, d0
 8006dae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006db2:	4606      	mov	r6, r0
 8006db4:	462b      	mov	r3, r5
 8006db6:	b99a      	cbnz	r2, 8006de0 <scalbn+0x38>
 8006db8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006dbc:	4323      	orrs	r3, r4
 8006dbe:	d036      	beq.n	8006e2e <scalbn+0x86>
 8006dc0:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <scalbn+0x100>)
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	ee10 0a10 	vmov	r0, s0
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f7f9 fc35 	bl	8000638 <__aeabi_dmul>
 8006dce:	4b37      	ldr	r3, [pc, #220]	; (8006eac <scalbn+0x104>)
 8006dd0:	429e      	cmp	r6, r3
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	da10      	bge.n	8006dfa <scalbn+0x52>
 8006dd8:	a32b      	add	r3, pc, #172	; (adr r3, 8006e88 <scalbn+0xe0>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	e03a      	b.n	8006e56 <scalbn+0xae>
 8006de0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006de4:	428a      	cmp	r2, r1
 8006de6:	d10c      	bne.n	8006e02 <scalbn+0x5a>
 8006de8:	ee10 2a10 	vmov	r2, s0
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	f7f9 fa6c 	bl	80002cc <__adddf3>
 8006df4:	4604      	mov	r4, r0
 8006df6:	460d      	mov	r5, r1
 8006df8:	e019      	b.n	8006e2e <scalbn+0x86>
 8006dfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006dfe:	460b      	mov	r3, r1
 8006e00:	3a36      	subs	r2, #54	; 0x36
 8006e02:	4432      	add	r2, r6
 8006e04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e08:	428a      	cmp	r2, r1
 8006e0a:	dd08      	ble.n	8006e1e <scalbn+0x76>
 8006e0c:	2d00      	cmp	r5, #0
 8006e0e:	a120      	add	r1, pc, #128	; (adr r1, 8006e90 <scalbn+0xe8>)
 8006e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e14:	da1c      	bge.n	8006e50 <scalbn+0xa8>
 8006e16:	a120      	add	r1, pc, #128	; (adr r1, 8006e98 <scalbn+0xf0>)
 8006e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e1c:	e018      	b.n	8006e50 <scalbn+0xa8>
 8006e1e:	2a00      	cmp	r2, #0
 8006e20:	dd08      	ble.n	8006e34 <scalbn+0x8c>
 8006e22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e2e:	ec45 4b10 	vmov	d0, r4, r5
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006e38:	da19      	bge.n	8006e6e <scalbn+0xc6>
 8006e3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006e3e:	429e      	cmp	r6, r3
 8006e40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006e44:	dd0a      	ble.n	8006e5c <scalbn+0xb4>
 8006e46:	a112      	add	r1, pc, #72	; (adr r1, 8006e90 <scalbn+0xe8>)
 8006e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e2      	bne.n	8006e16 <scalbn+0x6e>
 8006e50:	a30f      	add	r3, pc, #60	; (adr r3, 8006e90 <scalbn+0xe8>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fbef 	bl	8000638 <__aeabi_dmul>
 8006e5a:	e7cb      	b.n	8006df4 <scalbn+0x4c>
 8006e5c:	a10a      	add	r1, pc, #40	; (adr r1, 8006e88 <scalbn+0xe0>)
 8006e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0b8      	beq.n	8006dd8 <scalbn+0x30>
 8006e66:	a10e      	add	r1, pc, #56	; (adr r1, 8006ea0 <scalbn+0xf8>)
 8006e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e6c:	e7b4      	b.n	8006dd8 <scalbn+0x30>
 8006e6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e72:	3236      	adds	r2, #54	; 0x36
 8006e74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <scalbn+0x108>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	e7e8      	b.n	8006e56 <scalbn+0xae>
 8006e84:	f3af 8000 	nop.w
 8006e88:	c2f8f359 	.word	0xc2f8f359
 8006e8c:	01a56e1f 	.word	0x01a56e1f
 8006e90:	8800759c 	.word	0x8800759c
 8006e94:	7e37e43c 	.word	0x7e37e43c
 8006e98:	8800759c 	.word	0x8800759c
 8006e9c:	fe37e43c 	.word	0xfe37e43c
 8006ea0:	c2f8f359 	.word	0xc2f8f359
 8006ea4:	81a56e1f 	.word	0x81a56e1f
 8006ea8:	43500000 	.word	0x43500000
 8006eac:	ffff3cb0 	.word	0xffff3cb0
 8006eb0:	3c900000 	.word	0x3c900000

08006eb4 <_init>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr

08006ec0 <_fini>:
 8006ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec2:	bf00      	nop
 8006ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec6:	bc08      	pop	{r3}
 8006ec8:	469e      	mov	lr, r3
 8006eca:	4770      	bx	lr
