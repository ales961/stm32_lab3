
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006a80  08006a80  00016a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c98  08006c98  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ca0  08006ca0  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ca0  08006ca0  00016ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08006ca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000258  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc89  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002875  00000000  00000000  0002fda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  000334c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d5c  00000000  00000000  00034248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b3a  00000000  00000000  00058fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b1a  00000000  00000000  0006aade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001445f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c4  00000000  00000000  00144648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a64 	.word	0x08006a64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08006a64 	.word	0x08006a64

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 8000f86:	200c      	movs	r0, #12
 8000f88:	f004 f93e 	bl	8005208 <malloc>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 f938 	bl	8005208 <malloc>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f896 	bl	80010d8 <bufferClear>
    return buffer;
 8000fac:	68fb      	ldr	r3, [r7, #12]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	889a      	ldrh	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	88db      	ldrh	r3, [r3, #6]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d21f      	bcs.n	800100e <bufferPush+0x58>
        disableInt();
 8000fce:	f000 f8f7 	bl	80011c0 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	88d2      	ldrh	r2, [r2, #6]
 8000fea:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fee:	fb01 f202 	mul.w	r2, r1, r2
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	889b      	ldrh	r3, [r3, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	809a      	strh	r2, [r3, #4]

        enableInt();
 8001006:	f000 f8ef 	bl	80011e8 <enableInt>
        return 1;
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <bufferPush+0x5a>
    } else
        return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8001026:	2300      	movs	r3, #0
 8001028:	82fb      	strh	r3, [r7, #22]
 800102a:	e00f      	b.n	800104c <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 800102c:	8afb      	ldrh	r3, [r7, #22]
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ffbd 	bl	8000fb6 <bufferPush>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <bufferPushValues+0x2e>
            return pushed;
 8001042:	8afb      	ldrh	r3, [r7, #22]
 8001044:	e007      	b.n	8001056 <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8001046:	8afb      	ldrh	r3, [r7, #22]
 8001048:	3301      	adds	r3, #1
 800104a:	82fb      	strh	r3, [r7, #22]
 800104c:	8afa      	ldrh	r2, [r7, #22]
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3eb      	bcc.n	800102c <bufferPushValues+0x14>
    }
    return pushed;
 8001054:	8afb      	ldrh	r3, [r7, #22]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <bufferPop+0x14>
        return 0;
 800106e:	2300      	movs	r3, #0
 8001070:	e01e      	b.n	80010b0 <bufferPop+0x52>

    disableInt();
 8001072:	f000 f8a5 	bl	80011c0 <disableInt>

    buffer->size--;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	889b      	ldrh	r3, [r3, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	8852      	ldrh	r2, [r2, #2]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	885b      	ldrh	r3, [r3, #2]
 8001094:	3301      	adds	r3, #1
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	88d2      	ldrh	r2, [r2, #6]
 800109a:	fb93 f1f2 	sdiv	r1, r3, r2
 800109e:	fb01 f202 	mul.w	r2, r1, r2
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	805a      	strh	r2, [r3, #2]

    enableInt();
 80010aa:	f000 f89d 	bl	80011e8 <enableInt>

    return value;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <bufferPeek>:

uint8_t bufferPeek(const Buffer * const buffer) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    return buffer->data[buffer->ptrOut];
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	8852      	ldrh	r2, [r2, #2]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <bufferClear>:

void bufferClear(Buffer * const buffer) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    disableInt();
 80010e0:	f000 f86e 	bl	80011c0 <disableInt>
    buffer->size = 0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	805a      	strh	r2, [r3, #2]
    enableInt();
 80010f6:	f000 f877 	bl	80011e8 <enableInt>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	889b      	ldrh	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf14      	ite	ne
 8001112:	2301      	movne	r3, #1
 8001114:	2300      	moveq	r3, #0
 8001116:	b2db      	uxtb	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	4613      	mov	r3, r2
 8001130:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff ffe5 	bl	8001102 <bufferHasValues>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <bufferPopValues+0x1e>
        return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e01d      	b.n	800117e <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f81f 	bl	8001186 <bufferGetSize>
 8001148:	4603      	mov	r3, r0
 800114a:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	429a      	cmp	r2, r3
 8001152:	d901      	bls.n	8001158 <bufferPopValues+0x34>
        popSize = bufSize;
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	82bb      	strh	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 800115e:	8abb      	ldrh	r3, [r7, #20]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	18d4      	adds	r4, r2, r3
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff ff7a 	bl	800105e <bufferPop>
 800116a:	4603      	mov	r3, r0
 800116c:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 800116e:	8abb      	ldrh	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	82bb      	strh	r3, [r7, #20]
 8001174:	8aba      	ldrh	r2, [r7, #20]
 8001176:	8afb      	ldrh	r3, [r7, #22]
 8001178:	429a      	cmp	r2, r3
 800117a:	d3f0      	bcc.n	800115e <bufferPopValues+0x3a>
    return popSize;
 800117c:	8afb      	ldrh	r3, [r7, #22]
}
 800117e:	4618      	mov	r0, r3
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
    return buffer->size;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	889b      	ldrh	r3, [r3, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	88da      	ldrh	r2, [r3, #6]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	889b      	ldrh	r3, [r3, #4]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b29b      	uxth	r3, r3
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <disableInt>:
uint16_t bufferPeekValues(const Buffer * const buffer, uint8_t **values) {
    *values = buffer->data + buffer->ptrOut;
    return buffer->size;
}

static void disableInt() {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011c6:	f3ef 8310 	mrs	r3, PRIMASK
 80011ca:	607b      	str	r3, [r7, #4]
  return(result);
 80011cc:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <disableInt+0x24>)
 80011d0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80011d2:	b672      	cpsid	i
}
 80011d4:	bf00      	nop
    __disable_irq();
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000108 	.word	0x20000108

080011e8 <enableInt>:

static void enableInt() {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <enableInt+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f383 8810 	msr	PRIMASK, r3
}
 80011fa:	bf00      	nop
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000108 	.word	0x20000108

0800120c <commandCreate>:
struct Command {
    char *name;
    CommandAction action;
};

Command * commandCreate(const char * const name, const CommandAction action) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
    size_t nameLen = strlen(name);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7fe fff4 	bl	8000204 <strlen>
 800121c:	6178      	str	r0, [r7, #20]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fff0 	bl	8005208 <malloc>
 8001228:	4603      	mov	r3, r0
 800122a:	613b      	str	r3, [r7, #16]
    strcpy(nameCopy, name);
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	6938      	ldr	r0, [r7, #16]
 8001230:	f004 f90a 	bl	8005448 <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8001234:	2008      	movs	r0, #8
 8001236:	f003 ffe7 	bl	8005208 <malloc>
 800123a:	4603      	mov	r3, r0
 800123c:	60fb      	str	r3, [r7, #12]
    command->name = nameCopy;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	601a      	str	r2, [r3, #0]
    command->action = action;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	605a      	str	r2, [r3, #4]
    return command;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <commandExecute>:

const char * commandExecute(const Command * const command) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    if (command == NULL || command->action == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <commandExecute+0x16>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <commandExecute+0x1a>
        return NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	e004      	b.n	8001278 <commandExecute+0x24>
    return (*command->action)(NULL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2000      	movs	r0, #0
 8001274:	4798      	blx	r3
 8001276:	4603      	mov	r3, r0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <commandGetName+0x12>
        return NULL;
 800128e:	2300      	movs	r3, #0
 8001290:	e001      	b.n	8001296 <commandGetName+0x16>
    return command->name;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_GPIO_Init+0x84>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <MX_GPIO_Init+0x84>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_GPIO_Init+0x84>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_GPIO_Init+0x84>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a16      	ldr	r2, [pc, #88]	; (8001328 <MX_GPIO_Init+0x84>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_GPIO_Init+0x84>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_GPIO_Init+0x84>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a0f      	ldr	r2, [pc, #60]	; (8001328 <MX_GPIO_Init+0x84>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <MX_GPIO_Init+0x84>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_GPIO_Init+0x84>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <MX_GPIO_Init+0x84>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_GPIO_Init+0x84>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  commands[0] = commandCreate("1", (CommandAction) playA);
 8001330:	493b      	ldr	r1, [pc, #236]	; (8001420 <main+0xf4>)
 8001332:	483c      	ldr	r0, [pc, #240]	; (8001424 <main+0xf8>)
 8001334:	f7ff ff6a 	bl	800120c <commandCreate>
 8001338:	4603      	mov	r3, r0
 800133a:	4a3b      	ldr	r2, [pc, #236]	; (8001428 <main+0xfc>)
 800133c:	6013      	str	r3, [r2, #0]
	  commands[1] = commandCreate("2", (CommandAction) playB);
 800133e:	493b      	ldr	r1, [pc, #236]	; (800142c <main+0x100>)
 8001340:	483b      	ldr	r0, [pc, #236]	; (8001430 <main+0x104>)
 8001342:	f7ff ff63 	bl	800120c <commandCreate>
 8001346:	4603      	mov	r3, r0
 8001348:	4a37      	ldr	r2, [pc, #220]	; (8001428 <main+0xfc>)
 800134a:	6053      	str	r3, [r2, #4]
	  commands[2] = commandCreate("3", (CommandAction) playC);
 800134c:	4939      	ldr	r1, [pc, #228]	; (8001434 <main+0x108>)
 800134e:	483a      	ldr	r0, [pc, #232]	; (8001438 <main+0x10c>)
 8001350:	f7ff ff5c 	bl	800120c <commandCreate>
 8001354:	4603      	mov	r3, r0
 8001356:	4a34      	ldr	r2, [pc, #208]	; (8001428 <main+0xfc>)
 8001358:	6093      	str	r3, [r2, #8]
	  commands[3] = commandCreate("4", (CommandAction) playD);
 800135a:	4938      	ldr	r1, [pc, #224]	; (800143c <main+0x110>)
 800135c:	4838      	ldr	r0, [pc, #224]	; (8001440 <main+0x114>)
 800135e:	f7ff ff55 	bl	800120c <commandCreate>
 8001362:	4603      	mov	r3, r0
 8001364:	4a30      	ldr	r2, [pc, #192]	; (8001428 <main+0xfc>)
 8001366:	60d3      	str	r3, [r2, #12]
	  commands[4] = commandCreate("5", (CommandAction) playE);
 8001368:	4936      	ldr	r1, [pc, #216]	; (8001444 <main+0x118>)
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <main+0x11c>)
 800136c:	f7ff ff4e 	bl	800120c <commandCreate>
 8001370:	4603      	mov	r3, r0
 8001372:	4a2d      	ldr	r2, [pc, #180]	; (8001428 <main+0xfc>)
 8001374:	6113      	str	r3, [r2, #16]
	  commands[5] = commandCreate("6", (CommandAction) playF);
 8001376:	4935      	ldr	r1, [pc, #212]	; (800144c <main+0x120>)
 8001378:	4835      	ldr	r0, [pc, #212]	; (8001450 <main+0x124>)
 800137a:	f7ff ff47 	bl	800120c <commandCreate>
 800137e:	4603      	mov	r3, r0
 8001380:	4a29      	ldr	r2, [pc, #164]	; (8001428 <main+0xfc>)
 8001382:	6153      	str	r3, [r2, #20]
	  commands[6] = commandCreate("7", (CommandAction) playG);
 8001384:	4933      	ldr	r1, [pc, #204]	; (8001454 <main+0x128>)
 8001386:	4834      	ldr	r0, [pc, #208]	; (8001458 <main+0x12c>)
 8001388:	f7ff ff40 	bl	800120c <commandCreate>
 800138c:	4603      	mov	r3, r0
 800138e:	4a26      	ldr	r2, [pc, #152]	; (8001428 <main+0xfc>)
 8001390:	6193      	str	r3, [r2, #24]
	  commands[7] = commandCreate("+", (CommandAction) upOctave);
 8001392:	4932      	ldr	r1, [pc, #200]	; (800145c <main+0x130>)
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <main+0x134>)
 8001396:	f7ff ff39 	bl	800120c <commandCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a22      	ldr	r2, [pc, #136]	; (8001428 <main+0xfc>)
 800139e:	61d3      	str	r3, [r2, #28]
	  commands[8] = commandCreate("-", (CommandAction) downOctave);
 80013a0:	4930      	ldr	r1, [pc, #192]	; (8001464 <main+0x138>)
 80013a2:	4831      	ldr	r0, [pc, #196]	; (8001468 <main+0x13c>)
 80013a4:	f7ff ff32 	bl	800120c <commandCreate>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <main+0xfc>)
 80013ac:	6213      	str	r3, [r2, #32]
	  commands[9] = commandCreate("A", (CommandAction) upDuration);
 80013ae:	492f      	ldr	r1, [pc, #188]	; (800146c <main+0x140>)
 80013b0:	482f      	ldr	r0, [pc, #188]	; (8001470 <main+0x144>)
 80013b2:	f7ff ff2b 	bl	800120c <commandCreate>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <main+0xfc>)
 80013ba:	6253      	str	r3, [r2, #36]	; 0x24
	  commands[10] = commandCreate("a", (CommandAction) downDuration);
 80013bc:	492d      	ldr	r1, [pc, #180]	; (8001474 <main+0x148>)
 80013be:	482e      	ldr	r0, [pc, #184]	; (8001478 <main+0x14c>)
 80013c0:	f7ff ff24 	bl	800120c <commandCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a18      	ldr	r2, [pc, #96]	; (8001428 <main+0xfc>)
 80013c8:	6293      	str	r3, [r2, #40]	; 0x28
	  commands[11] = commandCreate("\r", (CommandAction) playAll);
 80013ca:	492c      	ldr	r1, [pc, #176]	; (800147c <main+0x150>)
 80013cc:	482c      	ldr	r0, [pc, #176]	; (8001480 <main+0x154>)
 80013ce:	f7ff ff1d 	bl	800120c <commandCreate>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <main+0xfc>)
 80013d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d8:	f000 feda 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013dc:	f000 f856 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e0:	f7ff ff60 	bl	80012a4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80013e4:	f000 fb88 	bl	8001af8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80013e8:	f000 fa28 	bl	800183c <MX_TIM1_Init>
  MX_TIM6_Init();
 80013ec:	f000 fac6 	bl	800197c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 80013f0:	f000 fc24 	bl	8001c3c <uartInit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013f4:	2100      	movs	r1, #0
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <main+0x158>)
 80013f8:	f001 fff6 	bl	80033e8 <HAL_TIM_PWM_Start>

  menuInit(commands, sizeof(commands));
 80013fc:	2130      	movs	r1, #48	; 0x30
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <main+0xfc>)
 8001400:	f000 f90c 	bl	800161c <menuInit>
  sendMessage("Started\n");
 8001404:	4820      	ldr	r0, [pc, #128]	; (8001488 <main+0x15c>)
 8001406:	f000 f8a1 	bl	800154c <sendMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uartPolling();
 800140a:	f000 fc2b 	bl	8001c64 <uartPolling>

	  if (uartHasNext()) {
 800140e:	f000 fc09 	bl	8001c24 <uartHasNext>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f8      	beq.n	800140a <main+0xde>
		  receiveAndSendChar();
 8001418:	f000 f8aa 	bl	8001570 <receiveAndSendChar>
	  uartPolling();
 800141c:	e7f5      	b.n	800140a <main+0xde>
 800141e:	bf00      	nop
 8001420:	08001ec5 	.word	0x08001ec5
 8001424:	08006a80 	.word	0x08006a80
 8001428:	20000190 	.word	0x20000190
 800142c:	08001ed5 	.word	0x08001ed5
 8001430:	08006a84 	.word	0x08006a84
 8001434:	08001ee5 	.word	0x08001ee5
 8001438:	08006a88 	.word	0x08006a88
 800143c:	08001ef5 	.word	0x08001ef5
 8001440:	08006a8c 	.word	0x08006a8c
 8001444:	08001f05 	.word	0x08001f05
 8001448:	08006a90 	.word	0x08006a90
 800144c:	08001f15 	.word	0x08001f15
 8001450:	08006a94 	.word	0x08006a94
 8001454:	08001f25 	.word	0x08001f25
 8001458:	08006a98 	.word	0x08006a98
 800145c:	08001f4d 	.word	0x08001f4d
 8001460:	08006a9c 	.word	0x08006a9c
 8001464:	08001fa1 	.word	0x08001fa1
 8001468:	08006aa0 	.word	0x08006aa0
 800146c:	08001ff9 	.word	0x08001ff9
 8001470:	08006aa4 	.word	0x08006aa4
 8001474:	08002069 	.word	0x08002069
 8001478:	08006aa8 	.word	0x08006aa8
 800147c:	08001f35 	.word	0x08001f35
 8001480:	08006aac 	.word	0x08006aac
 8001484:	200001d0 	.word	0x200001d0
 8001488:	08006ab0 	.word	0x08006ab0

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b094      	sub	sp, #80	; 0x50
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	2230      	movs	r2, #48	; 0x30
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f003 febc 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <SystemClock_Config+0xb8>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a22      	ldr	r2, [pc, #136]	; (8001544 <SystemClock_Config+0xb8>)
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <SystemClock_Config+0xb8>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <SystemClock_Config+0xbc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <SystemClock_Config+0xbc>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <SystemClock_Config+0xbc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f4:	2310      	movs	r3, #16
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fa07 	bl	8002914 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800150c:	f000 f880 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fc6a 	bl	8002e04 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001536:	f000 f86b 	bl	8001610 <Error_Handler>
  }
}
 800153a:	bf00      	nop
 800153c:	3750      	adds	r7, #80	; 0x50
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <sendMessage>:

/* USER CODE BEGIN 4 */
static void sendMessage(const char * msg) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7fe fe55 	bl	8000204 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	b29b      	uxth	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fb43 	bl	8001bec <uartTransmit>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <receiveAndSendChar>:

static void receiveAndSendChar() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <receiveAndSendChar+0x68>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <receiveAndSendChar+0x6c>)
 800157e:	4413      	add	r3, r2
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fb76 	bl	8001c74 <uartReceive>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d020      	beq.n	80015d0 <receiveAndSendChar+0x60>
        uint8_t received = uartBuf[uartBufLast];
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <receiveAndSendChar+0x68>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <receiveAndSendChar+0x6c>)
 8001596:	5c9b      	ldrb	r3, [r3, r2]
 8001598:	70fb      	strb	r3, [r7, #3]
        uartBufLast++;
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <receiveAndSendChar+0x68>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <receiveAndSendChar+0x68>)
 80015a4:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80015a6:	1cfb      	adds	r3, r7, #3
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fb1e 	bl	8001bec <uartTransmit>

        uartBuf[uartBufLast] = '\0';
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <receiveAndSendChar+0x68>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <receiveAndSendChar+0x6c>)
 80015b8:	2100      	movs	r1, #0
 80015ba:	5499      	strb	r1, [r3, r2]
        const char *commandResult = menuExecuteCommand((char *) uartBuf);
 80015bc:	4807      	ldr	r0, [pc, #28]	; (80015dc <receiveAndSendChar+0x6c>)
 80015be:	f000 f861 	bl	8001684 <menuExecuteCommand>
 80015c2:	6078      	str	r0, [r7, #4]
        sendMessage("\n");
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <receiveAndSendChar+0x70>)
 80015c6:	f7ff ffc1 	bl	800154c <sendMessage>
        sendCommandResult(commandResult);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f80a 	bl	80015e4 <sendCommandResult>
    }
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000018c 	.word	0x2000018c
 80015dc:	2000010c 	.word	0x2000010c
 80015e0:	08006abc 	.word	0x08006abc

080015e4 <sendCommandResult>:

static void sendCommandResult(const char * commandResult) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe fe09 	bl	8000204 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 faf7 	bl	8001bec <uartTransmit>
    uartBufLast = 0;
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <sendCommandResult+0x28>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000018c 	.word	0x2000018c

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <menuInit>:
#include "command.h"

Command **menuCommands = NULL;
uint16_t menuSize;

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <menuInit+0x60>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d121      	bne.n	8001674 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4618      	mov	r0, r3
 8001636:	f003 fde7 	bl	8005208 <malloc>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <menuInit+0x60>)
 8001640:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	81fb      	strh	r3, [r7, #14]
 8001646:	e00d      	b.n	8001664 <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001648:	89fb      	ldrh	r3, [r7, #14]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	441a      	add	r2, r3
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <menuInit+0x60>)
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	3301      	adds	r3, #1
 8001662:	81fb      	strh	r3, [r7, #14]
 8001664:	89fa      	ldrh	r2, [r7, #14]
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3ed      	bcc.n	8001648 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <menuInit+0x64>)
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	8013      	strh	r3, [r2, #0]
 8001672:	e000      	b.n	8001676 <menuInit+0x5a>
        return;
 8001674:	bf00      	nop
}
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200001c0 	.word	0x200001c0
 8001680:	200001c4 	.word	0x200001c4

08001684 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandName) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    for (uint16_t i = 0; i < menuSize; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	81fb      	strh	r3, [r7, #14]
 8001690:	e01f      	b.n	80016d2 <menuExecuteCommand+0x4e>
        const Command * const command = menuCommands[i];
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <menuExecuteCommand+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60bb      	str	r3, [r7, #8]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <menuExecuteCommand+0x64>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fde7 	bl	8001280 <commandGetName>
 80016b2:	4603      	mov	r3, r0
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd9a 	bl	80001f0 <strcmp>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d104      	bne.n	80016cc <menuExecuteCommand+0x48>
            return commandExecute(command);
 80016c2:	68b8      	ldr	r0, [r7, #8]
 80016c4:	f7ff fdc6 	bl	8001254 <commandExecute>
 80016c8:	4603      	mov	r3, r0
 80016ca:	e008      	b.n	80016de <menuExecuteCommand+0x5a>
    for (uint16_t i = 0; i < menuSize; i++) {
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	3301      	adds	r3, #1
 80016d0:	81fb      	strh	r3, [r7, #14]
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <menuExecuteCommand+0x68>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	89fa      	ldrh	r2, [r7, #14]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3da      	bcc.n	8001692 <menuExecuteCommand+0xe>
        }
    }
    return "Command not found\n";
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <menuExecuteCommand+0x6c>)
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200001c0 	.word	0x200001c0
 80016ec:	200001c4 	.word	0x200001c4
 80016f0:	08006ac0 	.word	0x08006ac0

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_MspInit+0x4c>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_MspInit+0x4c>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x4c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 fd50 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <USART6_IRQHandler+0x10>)
 800179e:	f002 fdd5 	bl	800434c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000268 	.word	0x20000268

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f003 fcea 	bl	80051b4 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20030000 	.word	0x20030000
 800180c:	00000400 	.word	0x00000400
 8001810:	200001c8 	.word	0x200001c8
 8001814:	20000348 	.word	0x20000348

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b096      	sub	sp, #88	; 0x58
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2220      	movs	r2, #32
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fccf 	bl	8005218 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <MX_TIM1_Init+0x138>)
 800187c:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <MX_TIM1_Init+0x13c>)
 800187e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001880:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <MX_TIM1_Init+0x138>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <MX_TIM1_Init+0x138>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <MX_TIM1_Init+0x138>)
 800188e:	220a      	movs	r2, #10
 8001890:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b38      	ldr	r3, [pc, #224]	; (8001974 <MX_TIM1_Init+0x138>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <MX_TIM1_Init+0x138>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <MX_TIM1_Init+0x138>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018a4:	4833      	ldr	r0, [pc, #204]	; (8001974 <MX_TIM1_Init+0x138>)
 80018a6:	f001 fc8d 	bl	80031c4 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018b0:	f7ff feae 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018be:	4619      	mov	r1, r3
 80018c0:	482c      	ldr	r0, [pc, #176]	; (8001974 <MX_TIM1_Init+0x138>)
 80018c2:	f001 ff1b 	bl	80036fc <HAL_TIM_ConfigClockSource>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018cc:	f7ff fea0 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018d0:	4828      	ldr	r0, [pc, #160]	; (8001974 <MX_TIM1_Init+0x138>)
 80018d2:	f001 fd2f 	bl	8003334 <HAL_TIM_PWM_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018dc:	f7ff fe98 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ec:	4619      	mov	r1, r3
 80018ee:	4821      	ldr	r0, [pc, #132]	; (8001974 <MX_TIM1_Init+0x138>)
 80018f0:	f002 fadc 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80018fa:	f7ff fe89 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fe:	2360      	movs	r3, #96	; 0x60
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	2200      	movs	r2, #0
 8001920:	4619      	mov	r1, r3
 8001922:	4814      	ldr	r0, [pc, #80]	; (8001974 <MX_TIM1_Init+0x138>)
 8001924:	f001 fe28 	bl	8003578 <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800192e:	f7ff fe6f 	bl	8001610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM1_Init+0x138>)
 8001956:	f002 fb25 	bl	8003fa4 <HAL_TIMEx_ConfigBreakDeadTime>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001960:	f7ff fe56 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM1_Init+0x138>)
 8001966:	f000 f877 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 800196a:	bf00      	nop
 800196c:	3758      	adds	r7, #88	; 0x58
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200001d0 	.word	0x200001d0
 8001978:	40010000 	.word	0x40010000

0800197c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_TIM6_Init+0x64>)
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_TIM6_Init+0x68>)
 800198e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_TIM6_Init+0x64>)
 8001992:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001996:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_TIM6_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019ae:	f001 fc09 	bl	80031c4 <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019b8:	f7ff fe2a 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	4619      	mov	r1, r3
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM6_Init+0x64>)
 80019ca:	f002 fa6f 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019d4:	f7ff fe1c 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000218 	.word	0x20000218
 80019e4:	40001000 	.word	0x40001000

080019e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_TIM_Base_MspInit+0x64>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10e      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_TIM_Base_MspInit+0x68>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_TIM_Base_MspInit+0x68>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_TIM_Base_MspInit+0x68>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a16:	e012      	b.n	8001a3e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_TIM_Base_MspInit+0x6c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10d      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_TIM_Base_MspInit+0x68>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_TIM_Base_MspInit+0x68>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_TIM_Base_MspInit+0x68>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40001000 	.word	0x40001000

08001a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <HAL_TIM_MspPostInit+0x68>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11e      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_TIM_MspPostInit+0x6c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_TIM_MspPostInit+0x6c>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_TIM_MspPostInit+0x6c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_TIM_MspPostInit+0x70>)
 8001ab4:	f000 fd82 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40021000 	.word	0x40021000

08001acc <TIM6_START>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
HAL_StatusTypeDef TIM6_START() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	return HAL_TIM_Base_Start(&htim6);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <TIM6_START+0x10>)
 8001ad2:	f001 fbc7 	bl	8003264 <HAL_TIM_Base_Start>
 8001ad6:	4603      	mov	r3, r0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000218 	.word	0x20000218

08001ae0 <setPlayAllFlag>:

HAL_StatusTypeDef TIM6_STOP() {
	return HAL_TIM_Base_Stop(&htim6);
}

void setPlayAllFlag() {
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	playAllFlag = 1;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <setPlayAllFlag+0x14>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
};
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	200001cc 	.word	0x200001cc

08001af8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_USART6_UART_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART6_UART_Init+0x4c>)
 8001b30:	f002 fa8a 	bl	8004048 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f7ff fd69 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000268 	.word	0x20000268
 8001b48:	40011400 	.word	0x40011400

08001b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0x94>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d133      	bne.n	8001bd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b78:	f043 0320 	orr.w	r3, r3, #32
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_UART_MspInit+0x9c>)
 8001bc2:	f000 fcfb 	bl	80025bc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2047      	movs	r0, #71	; 0x47
 8001bcc:	f000 fc2d 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bd0:	2047      	movs	r0, #71	; 0x47
 8001bd2:	f000 fc46 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800

08001bec <uartTransmit>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <uartTransmit+0x16>
        return 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e009      	b.n	8001c16 <uartTransmit+0x2a>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <uartTransmit+0x34>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fa04 	bl	8001018 <bufferPushValues>
 8001c10:	4603      	mov	r3, r0
 8001c12:	81fb      	strh	r3, [r7, #14]
    return transmitted;
 8001c14:	89fb      	ldrh	r3, [r7, #14]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000260 	.word	0x20000260

08001c24 <uartHasNext>:

uint8_t uartHasNext() {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <uartHasNext+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fa68 	bl	8001102 <bufferHasValues>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000264 	.word	0x20000264

08001c3c <uartInit>:

void uartInit() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001c40:	2080      	movs	r0, #128	; 0x80
 8001c42:	f7ff f99b 	bl	8000f7c <bufferCreate>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <uartInit+0x20>)
 8001c4a:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001c4c:	2080      	movs	r0, #128	; 0x80
 8001c4e:	f7ff f995 	bl	8000f7c <bufferCreate>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a02      	ldr	r2, [pc, #8]	; (8001c60 <uartInit+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000260 	.word	0x20000260
 8001c60:	20000264 	.word	0x20000264

08001c64 <uartPolling>:

void uartPolling() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    hardwareTransmit();
 8001c68:	f000 f84a 	bl	8001d00 <hardwareTransmit>
    hardwareReceive();
 8001c6c:	f000 f818 	bl	8001ca0 <hardwareReceive>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <uartReceive>:

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <uartReceive+0x28>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fa4b 	bl	8001124 <bufferPopValues>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	81fb      	strh	r3, [r7, #14]
    return received;
 8001c92:	89fb      	ldrh	r3, [r7, #14]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000264 	.word	0x20000264

08001ca0 <hardwareReceive>:

static void hardwareReceive() {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <hardwareReceive+0x5c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fa77 	bl	800119e <bufferGetFreeSize>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <hardwareReceive+0x38>
        uint8_t data = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareReceivePolling(&data, 5)) {
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fa24 	bl	800210c <uartHardwareReceivePolling>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <hardwareReceive+0x38>
            bufferPush(rxBuffer, data);
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <hardwareReceive+0x5c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff f96f 	bl	8000fb6 <bufferPush>
        }
    }
    if (!bufferHasValues(rxBuffer))
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <hardwareReceive+0x5c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa10 	bl	8001102 <bufferHasValues>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d104      	bne.n	8001cf2 <hardwareReceive+0x52>
        bufferClear(rxBuffer);
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <hardwareReceive+0x5c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f9f3 	bl	80010d8 <bufferClear>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000264 	.word	0x20000264

08001d00 <hardwareTransmit>:

static void hardwareTransmit() {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
    if (bufferHasValues(txBuffer)) {
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <hardwareTransmit+0x48>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9f9 	bl	8001102 <bufferHasValues>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d013      	beq.n	8001d3e <hardwareTransmit+0x3e>
        const uint8_t byte = bufferPeek(txBuffer);
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <hardwareTransmit+0x48>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f9cc 	bl	80010b8 <bufferPeek>
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
        if (uartHardwareTransmitPolling(byte, 5))
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2105      	movs	r1, #5
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f9d5 	bl	80020d8 <uartHardwareTransmitPolling>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <hardwareTransmit+0x3e>
            bufferPop(txBuffer);
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <hardwareTransmit+0x48>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f990 	bl	800105e <bufferPop>
    }
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000260 	.word	0x20000260
 8001d4c:	00000000 	.word	0x00000000

08001d50 <getNoteFrequency>:
double notes[7] = {16.352, 18.354, 20.602, 21.827, 24.5, 27.5, 30.868};
char* noteNames[7] = {"A", "B", "C", "D", "E", "F", "G"};

float duration = 1;

double getNoteFrequency(uint8_t noteNumber) {
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	return rint(notes[noteNumber] * pow(2, octave));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <getNoteFrequency+0x70>)
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <getNoteFrequency+0x74>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbea 	bl	8000544 <__aeabi_ui2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	ec43 2b11 	vmov	d1, r2, r3
 8001d78:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8001db8 <getNoteFrequency+0x68>
 8001d7c:	f003 ff58 	bl	8005c30 <pow>
 8001d80:	ec53 2b10 	vmov	r2, r3, d0
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fc56 	bl	8000638 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	ec43 2b17 	vmov	d7, r2, r3
 8001d94:	eeb0 0a47 	vmov.f32	s0, s14
 8001d98:	eef0 0a67 	vmov.f32	s1, s15
 8001d9c:	f003 feba 	bl	8005b14 <rint>
 8001da0:	eeb0 7a40 	vmov.f32	s14, s0
 8001da4:	eef0 7a60 	vmov.f32	s15, s1
}
 8001da8:	eeb0 0a47 	vmov.f32	s0, s14
 8001dac:	eef0 0a67 	vmov.f32	s1, s15
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bdb0      	pop	{r4, r5, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40000000 	.word	0x40000000
 8001dc0:	20000028 	.word	0x20000028
 8001dc4:	200002ac 	.word	0x200002ac

08001dc8 <setVolume>:

void setVolume(uint8_t volume) {
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	if (0 <= volume && volume <= 10) {
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	2b0a      	cmp	r3, #10
 8001dd6:	d802      	bhi.n	8001dde <setVolume+0x16>
		TIM1->CCR1 = volume;
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <setVolume+0x24>)
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	6353      	str	r3, [r2, #52]	; 0x34
	}
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000

08001df0 <setFrequency>:

void setFrequency(uint16_t freq) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	TIM1->PSC = HAL_RCC_GetPCLK2Freq() / (10 * freq) - 1;
 8001dfa:	f001 f9cf 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8001dfe:	4601      	mov	r1, r0
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0e:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <setFrequency+0x2c>)
 8001e10:	3b01      	subs	r3, #1
 8001e12:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010000 	.word	0x40010000

08001e20 <setPlay>:

void setPlay(uint8_t noteNumber) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	setFrequency((uint8_t) getNoteFrequency(noteNumber));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff8f 	bl	8001d50 <getNoteFrequency>
 8001e32:	ec53 2b10 	vmov	r2, r3, d0
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fead 	bl	8000b98 <__aeabi_d2uiz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ffd3 	bl	8001df0 <setFrequency>
	setVolume(10);
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f7ff ffbc 	bl	8001dc8 <setVolume>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <playNote>:

char buf[128];
char* playNote(uint8_t noteNumber) {
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	setPlay(noteNumber);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ffdb 	bl	8001e20 <setPlay>
	TIM6_START();
 8001e6a:	f7ff fe2f 	bl	8001acc <TIM6_START>
	sprintf(buf, "note %s, %s, duration %d", noteNames[noteNumber], octaveNames[octave], duration);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <playNote+0x54>)
 8001e72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <playNote+0x58>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <playNote+0x5c>)
 8001e7e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <playNote+0x60>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb7e 	bl	8000588 <__aeabi_f2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	e9cd 2300 	strd	r2, r3, [sp]
 8001e94:	462b      	mov	r3, r5
 8001e96:	4622      	mov	r2, r4
 8001e98:	4908      	ldr	r1, [pc, #32]	; (8001ebc <playNote+0x64>)
 8001e9a:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <playNote+0x68>)
 8001e9c:	f003 fab4 	bl	8005408 <siprintf>
	return buf;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <playNote+0x68>)
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000060 	.word	0x20000060
 8001eb0:	200002ac 	.word	0x200002ac
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	2000007c 	.word	0x2000007c
 8001ebc:	08006b90 	.word	0x08006b90
 8001ec0:	200002b0 	.word	0x200002b0

08001ec4 <playA>:

char* playA() {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	return playNote(0);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff ffc5 	bl	8001e58 <playNote>
 8001ece:	4603      	mov	r3, r0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <playB>:
char* playB() {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	return playNote(1);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7ff ffbd 	bl	8001e58 <playNote>
 8001ede:	4603      	mov	r3, r0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <playC>:
char* playC() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	return playNote(2);
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7ff ffb5 	bl	8001e58 <playNote>
 8001eee:	4603      	mov	r3, r0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <playD>:
char* playD() {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	return playNote(3);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f7ff ffad 	bl	8001e58 <playNote>
 8001efe:	4603      	mov	r3, r0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <playE>:
char* playE() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	return playNote(4);
 8001f08:	2004      	movs	r0, #4
 8001f0a:	f7ff ffa5 	bl	8001e58 <playNote>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <playF>:
char* playF() {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	return playNote(5);
 8001f18:	2005      	movs	r0, #5
 8001f1a:	f7ff ff9d 	bl	8001e58 <playNote>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <playG>:
char* playG() {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	return playNote(6);
 8001f28:	2006      	movs	r0, #6
 8001f2a:	f7ff ff95 	bl	8001e58 <playNote>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <playAll>:

char* playAll() {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	setPlayAllFlag();
 8001f38:	f7ff fdd2 	bl	8001ae0 <setPlayAllFlag>
	setPlay(0);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff ff6f 	bl	8001e20 <setPlay>
	TIM6_START();
 8001f42:	f7ff fdc3 	bl	8001acc <TIM6_START>
}
 8001f46:	bf00      	nop
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <upOctave>:

char* upOctave() {
 8001f4c:	b598      	push	{r3, r4, r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	if (octave < 8) {
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <upOctave+0x44>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b07      	cmp	r3, #7
 8001f56:	d816      	bhi.n	8001f86 <upOctave+0x3a>
		octave++;
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <upOctave+0x44>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <upOctave+0x44>)
 8001f62:	701a      	strb	r2, [r3, #0]
		return strcat(octaveNames[octave], "\n");
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <upOctave+0x44>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <upOctave+0x48>)
 8001f6c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7fe f947 	bl	8000204 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4423      	add	r3, r4
 8001f7a:	4907      	ldr	r1, [pc, #28]	; (8001f98 <upOctave+0x4c>)
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	460b      	mov	r3, r1
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	8013      	strh	r3, [r2, #0]
 8001f84:	e000      	b.n	8001f88 <upOctave+0x3c>
	}
	return "Octave is maximum\n";
 8001f86:	4c05      	ldr	r4, [pc, #20]	; (8001f9c <upOctave+0x50>)
}
 8001f88:	4623      	mov	r3, r4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd98      	pop	{r3, r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200002ac 	.word	0x200002ac
 8001f94:	20000004 	.word	0x20000004
 8001f98:	08006bac 	.word	0x08006bac
 8001f9c:	08006bb0 	.word	0x08006bb0

08001fa0 <downOctave>:

char* downOctave() {
 8001fa0:	b598      	push	{r3, r4, r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	if (octave > 0) {
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <downOctave+0x44>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <downOctave+0x3a>
		octave--;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <downOctave+0x44>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <downOctave+0x44>)
 8001fb6:	701a      	strb	r2, [r3, #0]
		return strcat(octaveNames[octave], "\n");
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <downOctave+0x44>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <downOctave+0x48>)
 8001fc0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe f91d 	bl	8000204 <strlen>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4423      	add	r3, r4
 8001fce:	4907      	ldr	r1, [pc, #28]	; (8001fec <downOctave+0x4c>)
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	8013      	strh	r3, [r2, #0]
 8001fd8:	e000      	b.n	8001fdc <downOctave+0x3c>
	}
	return "Octave is minimum\n";
 8001fda:	4c05      	ldr	r4, [pc, #20]	; (8001ff0 <downOctave+0x50>)
}
 8001fdc:	4623      	mov	r3, r4
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd98      	pop	{r3, r4, r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200002ac 	.word	0x200002ac
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	08006bac 	.word	0x08006bac
 8001ff0:	08006bc4 	.word	0x08006bc4
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <upDuration>:

char* upDuration() {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	if (duration < 5) {
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <upDuration+0x60>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	d519      	bpl.n	8002044 <upDuration+0x4c>
		TIM6->CNT += 100;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <upDuration+0x64>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	4a11      	ldr	r2, [pc, #68]	; (800205c <upDuration+0x64>)
 8002016:	3364      	adds	r3, #100	; 0x64
 8002018:	6253      	str	r3, [r2, #36]	; 0x24
		duration += 0.1;
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <upDuration+0x60>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fab2 	bl	8000588 <__aeabi_f2d>
 8002024:	a30a      	add	r3, pc, #40	; (adr r3, 8002050 <upDuration+0x58>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe f94f 	bl	80002cc <__adddf3>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fdcf 	bl	8000bd8 <__aeabi_d2f>
 800203a:	4603      	mov	r3, r0
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <upDuration+0x60>)
 800203e:	6013      	str	r3, [r2, #0]
		return "\n";
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <upDuration+0x68>)
 8002042:	e000      	b.n	8002046 <upDuration+0x4e>
	}
	return "Duration is maximum\n";
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <upDuration+0x6c>)
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	f3af 8000 	nop.w
 8002050:	9999999a 	.word	0x9999999a
 8002054:	3fb99999 	.word	0x3fb99999
 8002058:	2000007c 	.word	0x2000007c
 800205c:	40001000 	.word	0x40001000
 8002060:	08006bac 	.word	0x08006bac
 8002064:	08006bd8 	.word	0x08006bd8

08002068 <downDuration>:

char* downDuration() {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	if (duration > 0.1) {
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <downDuration+0x60>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa89 	bl	8000588 <__aeabi_f2d>
 8002076:	a312      	add	r3, pc, #72	; (adr r3, 80020c0 <downDuration+0x58>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fd6c 	bl	8000b58 <__aeabi_dcmpgt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <downDuration+0x52>
		TIM6->CNT -= 100;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <downDuration+0x64>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <downDuration+0x64>)
 800208c:	3b64      	subs	r3, #100	; 0x64
 800208e:	6253      	str	r3, [r2, #36]	; 0x24
		duration -= 0.1;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <downDuration+0x60>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa77 	bl	8000588 <__aeabi_f2d>
 800209a:	a309      	add	r3, pc, #36	; (adr r3, 80020c0 <downDuration+0x58>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe f912 	bl	80002c8 <__aeabi_dsub>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fd94 	bl	8000bd8 <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <downDuration+0x60>)
 80020b4:	6013      	str	r3, [r2, #0]
		return "\n";
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <downDuration+0x68>)
 80020b8:	e000      	b.n	80020bc <downDuration+0x54>
	}
	return "Duration is minimum\n";
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <downDuration+0x6c>)
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	9999999a 	.word	0x9999999a
 80020c4:	3fb99999 	.word	0x3fb99999
 80020c8:	2000007c 	.word	0x2000007c
 80020cc:	40001000 	.word	0x40001000
 80020d0:	08006bac 	.word	0x08006bac
 80020d4:	08006bf0 	.word	0x08006bf0

080020d8 <uartHardwareTransmitPolling>:
#include "usart.h"

uint8_t usartHardwareTransmitBuffer;
uint8_t usartHardwareReceiveBuffer;

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	460a      	mov	r2, r1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	4613      	mov	r3, r2
 80020e6:	80bb      	strh	r3, [r7, #4]
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
 80020e8:	88bb      	ldrh	r3, [r7, #4]
 80020ea:	1df9      	adds	r1, r7, #7
 80020ec:	2201      	movs	r2, #1
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <uartHardwareTransmitPolling+0x30>)
 80020f0:	f001 fff7 	bl	80040e2 <HAL_UART_Transmit>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000268 	.word	0x20000268

0800210c <uartHardwareReceivePolling>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	2201      	movs	r2, #1
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4806      	ldr	r0, [pc, #24]	; (8002138 <uartHardwareReceivePolling+0x2c>)
 8002120:	f002 f871 	bl	8004206 <HAL_UART_Receive>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000268 	.word	0x20000268

0800213c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002142:	490e      	ldr	r1, [pc, #56]	; (800217c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002158:	4c0b      	ldr	r4, [pc, #44]	; (8002188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002166:	f7ff fb57 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f003 f829 	bl	80051c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216e:	f7ff f8dd 	bl	800132c <main>
  bx  lr    
 8002172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800217c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002180:	08006ca8 	.word	0x08006ca8
  ldr r2, =_sbss
 8002184:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002188:	20000344 	.word	0x20000344

0800218c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC_IRQHandler>
	...

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_Init+0x40>)
 800219a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_Init+0x40>)
 80021a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x40>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 f92b 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fa96 	bl	80016f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f943 	bl	800247e <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 f90b 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000000 	.word	0x20000000
 800222c:	20000084 	.word	0x20000084
 8002230:	20000080 	.word	0x20000080

08002234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x20>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_IncTick+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_IncTick+0x24>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000084 	.word	0x20000084
 8002258:	20000330 	.word	0x20000330

0800225c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_GetTick+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000330 	.word	0x20000330

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff feda 	bl	800225c <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e052      	b.n	800256e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0216 	bic.w	r2, r2, #22
 80024d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <HAL_DMA_Abort+0x62>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0208 	bic.w	r2, r2, #8
 8002506:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002518:	e013      	b.n	8002542 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251a:	f7ff fe9f 	bl	800225c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b05      	cmp	r3, #5
 8002526:	d90c      	bls.n	8002542 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e015      	b.n	800256e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e4      	bne.n	800251a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	223f      	movs	r2, #63	; 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d004      	beq.n	8002594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e00c      	b.n	80025ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	e177      	b.n	80028c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 8166 	bne.w	80028c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d005      	beq.n	800260e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	2b02      	cmp	r3, #2
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b03      	cmp	r3, #3
 800267a:	d017      	beq.n	80026ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d123      	bne.n	8002700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	08da      	lsrs	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	220f      	movs	r2, #15
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	08da      	lsrs	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3208      	adds	r2, #8
 80026fa:	69b9      	ldr	r1, [r7, #24]
 80026fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0203 	and.w	r2, r3, #3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80c0 	beq.w	80028c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_GPIO_Init+0x324>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a65      	ldr	r2, [pc, #404]	; (80028e0 <HAL_GPIO_Init+0x324>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_GPIO_Init+0x324>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800275e:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <HAL_GPIO_Init+0x328>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_GPIO_Init+0x32c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d037      	beq.n	80027fa <HAL_GPIO_Init+0x23e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <HAL_GPIO_Init+0x330>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d031      	beq.n	80027f6 <HAL_GPIO_Init+0x23a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <HAL_GPIO_Init+0x236>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_GPIO_Init+0x338>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x232>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a54      	ldr	r2, [pc, #336]	; (80028f8 <HAL_GPIO_Init+0x33c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x22e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a53      	ldr	r2, [pc, #332]	; (80028fc <HAL_GPIO_Init+0x340>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x22a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x344>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_GPIO_Init+0x348>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x222>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_GPIO_Init+0x34c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_GPIO_Init+0x350>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027d2:	2309      	movs	r3, #9
 80027d4:	e012      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027d6:	230a      	movs	r3, #10
 80027d8:	e010      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027da:	2308      	movs	r3, #8
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027de:	2307      	movs	r3, #7
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <HAL_GPIO_Init+0x328>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_GPIO_Init+0x354>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_GPIO_Init+0x354>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_GPIO_Init+0x354>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_GPIO_Init+0x354>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae84 	bls.w	80025d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40022000 	.word	0x40022000
 800290c:	40022400 	.word	0x40022400
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e267      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d075      	beq.n	8002a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002932:	4b88      	ldr	r3, [pc, #544]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00c      	beq.n	8002958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b85      	ldr	r3, [pc, #532]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002946:	2b08      	cmp	r3, #8
 8002948:	d112      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002956:	d10b      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	4b7e      	ldr	r3, [pc, #504]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05b      	beq.n	8002a1c <HAL_RCC_OscConfig+0x108>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d157      	bne.n	8002a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e242      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x74>
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a75      	ldr	r2, [pc, #468]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xb0>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x98>
 8002992:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6f      	ldr	r2, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a6c      	ldr	r2, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xb0>
 80029ac:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a68      	ldr	r2, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff fc46 	bl	800225c <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d4:	f7ff fc42 	bl	800225c <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e207      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xc0>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fc32 	bl	800225c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029fc:	f7ff fc2e 	bl	800225c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1f3      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b51      	ldr	r3, [pc, #324]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0xe8>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d063      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d11c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_RCC_OscConfig+0x152>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d001      	beq.n	8002a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e1c7      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4937      	ldr	r1, [pc, #220]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	e03a      	b.n	8002af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCC_OscConfig+0x244>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7ff fbe7 	bl	800225c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a92:	f7ff fbe3 	bl	800225c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e1a8      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4925      	ldr	r1, [pc, #148]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e015      	b.n	8002af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_RCC_OscConfig+0x244>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7ff fbc6 	bl	800225c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad4:	f7ff fbc2 	bl	800225c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e187      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d036      	beq.n	8002b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_RCC_OscConfig+0x248>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0c:	f7ff fba6 	bl	800225c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b14:	f7ff fba2 	bl	800225c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e167      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x240>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x200>
 8002b32:	e01b      	b.n	8002b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_OscConfig+0x248>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff fb8f 	bl	800225c <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	e00e      	b.n	8002b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b42:	f7ff fb8b 	bl	800225c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d907      	bls.n	8002b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e150      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	42470000 	.word	0x42470000
 8002b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1ea      	bne.n	8002b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8097 	beq.w	8002ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7e:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b7d      	ldr	r3, [pc, #500]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a7c      	ldr	r2, [pc, #496]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b7a      	ldr	r3, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d118      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb6:	4b74      	ldr	r3, [pc, #464]	; (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a73      	ldr	r2, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc2:	f7ff fb4b 	bl	800225c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7ff fb47 	bl	800225c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e10c      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x474>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2ea>
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	4a63      	ldr	r2, [pc, #396]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x324>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x30c>
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a5e      	ldr	r2, [pc, #376]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a5b      	ldr	r2, [pc, #364]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0x324>
 8002c20:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a54      	ldr	r2, [pc, #336]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7ff fb0c 	bl	800225c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7ff fb08 	bl	800225c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e0cb      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ee      	beq.n	8002c48 <HAL_RCC_OscConfig+0x334>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7ff faf6 	bl	800225c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c74:	f7ff faf2 	bl	800225c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0b5      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9c:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4a38      	ldr	r2, [pc, #224]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a1 	beq.w	8002df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cb2:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d05c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d141      	bne.n	8002d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <HAL_RCC_OscConfig+0x478>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7ff fac6 	bl	800225c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff fac2 	bl	800225c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e087      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	491b      	ldr	r1, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x478>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7ff fa9b 	bl	800225c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7ff fa97 	bl	800225c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e05c      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x416>
 8002d48:	e054      	b.n	8002df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_RCC_OscConfig+0x478>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff fa84 	bl	800225c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d58:	f7ff fa80 	bl	800225c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e045      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x444>
 8002d76:	e03d      	b.n	8002df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e038      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x4ec>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d121      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d11a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d111      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7ff f9b2 	bl	800225c <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7ff f9ae 	bl	800225c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5ccb      	ldrb	r3, [r1, r3]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f912 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	08006c08 	.word	0x08006c08
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000080 	.word	0x20000080

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd4:	b090      	sub	sp, #64	; 0x40
 8002fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
 8002fdc:	2300      	movs	r3, #0
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe8:	4b59      	ldr	r3, [pc, #356]	; (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d00d      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x40>
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	f200 80a1 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x16c>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x3a>
 8003002:	e09b      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_GetSysClockFreq+0x184>)
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003008:	e09b      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_GetSysClockFreq+0x188>)
 800300c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300e:	e098      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003010:	4b4f      	ldr	r3, [pc, #316]	; (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301a:	4b4d      	ldr	r3, [pc, #308]	; (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d028      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	2200      	movs	r2, #0
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	627a      	str	r2, [r7, #36]	; 0x24
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003038:	2100      	movs	r1, #0
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_GetSysClockFreq+0x188>)
 800303c:	fb03 f201 	mul.w	r2, r3, r1
 8003040:	2300      	movs	r3, #0
 8003042:	fb00 f303 	mul.w	r3, r0, r3
 8003046:	4413      	add	r3, r2
 8003048:	4a43      	ldr	r2, [pc, #268]	; (8003158 <HAL_RCC_GetSysClockFreq+0x188>)
 800304a:	fba0 1202 	umull	r1, r2, r0, r2
 800304e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003050:	460a      	mov	r2, r1
 8003052:	62ba      	str	r2, [r7, #40]	; 0x28
 8003054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003056:	4413      	add	r3, r2
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305c:	2200      	movs	r2, #0
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	61fa      	str	r2, [r7, #28]
 8003062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800306a:	f7fd fe05 	bl	8000c78 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4613      	mov	r3, r2
 8003074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003076:	e053      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	2200      	movs	r2, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	617a      	str	r2, [r7, #20]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800308a:	f04f 0b00 	mov.w	fp, #0
 800308e:	4652      	mov	r2, sl
 8003090:	465b      	mov	r3, fp
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	0159      	lsls	r1, r3, #5
 800309c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a0:	0150      	lsls	r0, r2, #5
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	ebb2 080a 	subs.w	r8, r2, sl
 80030aa:	eb63 090b 	sbc.w	r9, r3, fp
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030c2:	ebb2 0408 	subs.w	r4, r2, r8
 80030c6:	eb63 0509 	sbc.w	r5, r3, r9
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	00eb      	lsls	r3, r5, #3
 80030d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d8:	00e2      	lsls	r2, r4, #3
 80030da:	4614      	mov	r4, r2
 80030dc:	461d      	mov	r5, r3
 80030de:	eb14 030a 	adds.w	r3, r4, sl
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	eb45 030b 	adc.w	r3, r5, fp
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f6:	4629      	mov	r1, r5
 80030f8:	028b      	lsls	r3, r1, #10
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003100:	4621      	mov	r1, r4
 8003102:	028a      	lsls	r2, r1, #10
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	2200      	movs	r2, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	60fa      	str	r2, [r7, #12]
 8003110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003114:	f7fd fdb0 	bl	8000c78 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetSysClockFreq+0x184>)
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003144:	4618      	mov	r0, r3
 8003146:	3740      	adds	r7, #64	; 0x40
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	017d7840 	.word	0x017d7840

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003178:	f7ff fff0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4903      	ldr	r1, [pc, #12]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800
 8003198:	08006c18 	.word	0x08006c18

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a0:	f7ff ffdc 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0b5b      	lsrs	r3, r3, #13
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08006c18 	.word	0x08006c18

080031c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e041      	b.n	800325a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe fbfc 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f000 fb42 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d001      	beq.n	800327c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e046      	b.n	800330a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_TIM_Base_Start+0xb4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d022      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d01d      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_TIM_Base_Start+0xb8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d018      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_TIM_Base_Start+0xbc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d013      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIM_Base_Start+0xc0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIM_Base_Start+0xc4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIM_Base_Start+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_Base_Start+0x70>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_TIM_Base_Start+0xcc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d010      	beq.n	8003308 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	e007      	b.n	8003308 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40010400 	.word	0x40010400
 800332c:	40014000 	.word	0x40014000
 8003330:	40001800 	.word	0x40001800

08003334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e041      	b.n	80033ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f839 	bl	80033d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 fa8a 	bl	800388c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <HAL_TIM_PWM_Start+0x24>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e022      	b.n	8003452 <HAL_TIM_PWM_Start+0x6a>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b04      	cmp	r3, #4
 8003410:	d109      	bne.n	8003426 <HAL_TIM_PWM_Start+0x3e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e015      	b.n	8003452 <HAL_TIM_PWM_Start+0x6a>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d109      	bne.n	8003440 <HAL_TIM_PWM_Start+0x58>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e008      	b.n	8003452 <HAL_TIM_PWM_Start+0x6a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07c      	b.n	8003554 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_TIM_PWM_Start+0x82>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	e013      	b.n	8003492 <HAL_TIM_PWM_Start+0xaa>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d104      	bne.n	800347a <HAL_TIM_PWM_Start+0x92>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003478:	e00b      	b.n	8003492 <HAL_TIM_PWM_Start+0xaa>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d104      	bne.n	800348a <HAL_TIM_PWM_Start+0xa2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003488:	e003      	b.n	8003492 <HAL_TIM_PWM_Start+0xaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2201      	movs	r2, #1
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fce0 	bl	8003e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_TIM_PWM_Start+0x174>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_TIM_PWM_Start+0xcc>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <HAL_TIM_PWM_Start+0x178>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_PWM_Start+0xd0>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_TIM_PWM_Start+0xd2>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_TIM_PWM_Start+0x174>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d01d      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_TIM_PWM_Start+0x17c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_TIM_PWM_Start+0x180>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1c      	ldr	r2, [pc, #112]	; (800356c <HAL_TIM_PWM_Start+0x184>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a16      	ldr	r2, [pc, #88]	; (8003560 <HAL_TIM_PWM_Start+0x178>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_TIM_PWM_Start+0x188>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIM_PWM_Start+0x136>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a16      	ldr	r2, [pc, #88]	; (8003574 <HAL_TIM_PWM_Start+0x18c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d111      	bne.n	8003542 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b06      	cmp	r3, #6
 800352e:	d010      	beq.n	8003552 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	e007      	b.n	8003552 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40010000 	.word	0x40010000
 8003560:	40010400 	.word	0x40010400
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800

08003578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003584:	2300      	movs	r3, #0
 8003586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003592:	2302      	movs	r3, #2
 8003594:	e0ae      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	f200 809f 	bhi.w	80036e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080036e5 	.word	0x080036e5
 80035b4:	080036e5 	.word	0x080036e5
 80035b8:	080036e5 	.word	0x080036e5
 80035bc:	08003621 	.word	0x08003621
 80035c0:	080036e5 	.word	0x080036e5
 80035c4:	080036e5 	.word	0x080036e5
 80035c8:	080036e5 	.word	0x080036e5
 80035cc:	08003663 	.word	0x08003663
 80035d0:	080036e5 	.word	0x080036e5
 80035d4:	080036e5 	.word	0x080036e5
 80035d8:	080036e5 	.word	0x080036e5
 80035dc:	080036a3 	.word	0x080036a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f9f0 	bl	80039cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0208 	orr.w	r2, r2, #8
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0204 	bic.w	r2, r2, #4
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	619a      	str	r2, [r3, #24]
      break;
 800361e:	e064      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa40 	bl	8003aac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6999      	ldr	r1, [r3, #24]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	021a      	lsls	r2, r3, #8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]
      break;
 8003660:	e043      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa95 	bl	8003b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0208 	orr.w	r2, r2, #8
 800367c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0204 	bic.w	r2, r2, #4
 800368c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69d9      	ldr	r1, [r3, #28]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	61da      	str	r2, [r3, #28]
      break;
 80036a0:	e023      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fae9 	bl	8003c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69d9      	ldr	r1, [r3, #28]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	021a      	lsls	r2, r3, #8
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	61da      	str	r2, [r3, #28]
      break;
 80036e2:	e002      	b.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
      break;
 80036e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIM_ConfigClockSource+0x1c>
 8003714:	2302      	movs	r3, #2
 8003716:	e0b4      	b.n	8003882 <HAL_TIM_ConfigClockSource+0x186>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003750:	d03e      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003756:	f200 8087 	bhi.w	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375e:	f000 8086 	beq.w	800386e <HAL_TIM_ConfigClockSource+0x172>
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d87f      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b70      	cmp	r3, #112	; 0x70
 800376a:	d01a      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0xa6>
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d87b      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d050      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x11a>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d877      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b50      	cmp	r3, #80	; 0x50
 800377a:	d03c      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xfa>
 800377c:	2b50      	cmp	r3, #80	; 0x50
 800377e:	d873      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d058      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x13a>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d86f      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d064      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x15a>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d86b      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d060      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x15a>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d867      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05c      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x15a>
 800379c:	2b10      	cmp	r3, #16
 800379e:	d05a      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	e062      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f000 fb35 	bl	8003e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]
      break;
 80037ce:	e04f      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f000 fb1e 	bl	8003e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f2:	609a      	str	r2, [r3, #8]
      break;
 80037f4:	e03c      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 fa92 	bl	8003d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2150      	movs	r1, #80	; 0x50
 800380e:	4618      	mov	r0, r3
 8003810:	f000 faeb 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003814:	e02c      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	461a      	mov	r2, r3
 8003824:	f000 fab1 	bl	8003d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2160      	movs	r1, #96	; 0x60
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fadb 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003834:	e01c      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	461a      	mov	r2, r3
 8003844:	f000 fa72 	bl	8003d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2140      	movs	r1, #64	; 0x40
 800384e:	4618      	mov	r0, r3
 8003850:	f000 facb 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003854:	e00c      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f000 fac2 	bl	8003dea <TIM_ITRx_SetConfig>
      break;
 8003866:	e003      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      break;
 800386c:	e000      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800386e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a40      	ldr	r2, [pc, #256]	; (80039a0 <TIM_Base_SetConfig+0x114>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d00f      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <TIM_Base_SetConfig+0x118>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00b      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3c      	ldr	r2, [pc, #240]	; (80039a8 <TIM_Base_SetConfig+0x11c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d007      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3b      	ldr	r2, [pc, #236]	; (80039ac <TIM_Base_SetConfig+0x120>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d003      	beq.n	80038cc <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <TIM_Base_SetConfig+0x124>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d108      	bne.n	80038de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <TIM_Base_SetConfig+0x114>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d02b      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ec:	d027      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <TIM_Base_SetConfig+0x118>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d023      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <TIM_Base_SetConfig+0x11c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01f      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2a      	ldr	r2, [pc, #168]	; (80039ac <TIM_Base_SetConfig+0x120>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01b      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <TIM_Base_SetConfig+0x124>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d017      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <TIM_Base_SetConfig+0x128>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a27      	ldr	r2, [pc, #156]	; (80039b8 <TIM_Base_SetConfig+0x12c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00f      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a26      	ldr	r2, [pc, #152]	; (80039bc <TIM_Base_SetConfig+0x130>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00b      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a25      	ldr	r2, [pc, #148]	; (80039c0 <TIM_Base_SetConfig+0x134>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <TIM_Base_SetConfig+0x138>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a23      	ldr	r2, [pc, #140]	; (80039c8 <TIM_Base_SetConfig+0x13c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d108      	bne.n	8003950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <TIM_Base_SetConfig+0x114>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_Base_SetConfig+0xf8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <TIM_Base_SetConfig+0x124>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d103      	bne.n	800398c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	615a      	str	r2, [r3, #20]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40010400 	.word	0x40010400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800
 80039c0:	40001800 	.word	0x40001800
 80039c4:	40001c00 	.word	0x40001c00
 80039c8:	40002000 	.word	0x40002000

080039cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0201 	bic.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 0302 	bic.w	r3, r3, #2
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <TIM_OC1_SetConfig+0xd8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_OC1_SetConfig+0x64>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <TIM_OC1_SetConfig+0xdc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10c      	bne.n	8003a4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0308 	bic.w	r3, r3, #8
 8003a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <TIM_OC1_SetConfig+0xd8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_OC1_SetConfig+0x8e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <TIM_OC1_SetConfig+0xdc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d111      	bne.n	8003a7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40010400 	.word	0x40010400

08003aac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0210 	bic.w	r2, r3, #16
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	021b      	lsls	r3, r3, #8
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0320 	bic.w	r3, r3, #32
 8003af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <TIM_OC2_SetConfig+0xe4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC2_SetConfig+0x68>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <TIM_OC2_SetConfig+0xe8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10d      	bne.n	8003b30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_OC2_SetConfig+0xe4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_OC2_SetConfig+0x94>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <TIM_OC2_SetConfig+0xe8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d113      	bne.n	8003b68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40010400 	.word	0x40010400

08003b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM_OC3_SetConfig+0xe0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_OC3_SetConfig+0x66>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <TIM_OC3_SetConfig+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10d      	bne.n	8003c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <TIM_OC3_SetConfig+0xe0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_OC3_SetConfig+0x92>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <TIM_OC3_SetConfig+0xe4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d113      	bne.n	8003c52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400

08003c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	031b      	lsls	r3, r3, #12
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <TIM_OC4_SetConfig+0xa4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC4_SetConfig+0x68>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <TIM_OC4_SetConfig+0xa8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d109      	bne.n	8003cfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010400 	.word	0x40010400

08003d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f023 0201 	bic.w	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 030a 	bic.w	r3, r3, #10
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0210 	bic.w	r2, r3, #16
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f043 0307 	orr.w	r3, r3, #7
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	021a      	lsls	r2, r3, #8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e05a      	b.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d01d      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d10c      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40001800 	.word	0x40001800

08003fa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e03d      	b.n	800403c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e03f      	b.n	80040da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fd6c 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	; 0x24
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fe1d 	bl	8004ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08a      	sub	sp, #40	; 0x28
 80040e6:	af02      	add	r7, sp, #8
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d17c      	bne.n	80041fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_UART_Transmit+0x2c>
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e075      	b.n	80041fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UART_Transmit+0x3e>
 800411c:	2302      	movs	r3, #2
 800411e:	e06e      	b.n	80041fe <HAL_UART_Transmit+0x11c>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2221      	movs	r2, #33	; 0x21
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004136:	f7fe f891 	bl	800225c <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	88fa      	ldrh	r2, [r7, #6]
 8004146:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d108      	bne.n	8004164 <HAL_UART_Transmit+0x82>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	e003      	b.n	800416c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004174:	e02a      	b.n	80041cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fb9b 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e036      	b.n	80041fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	3302      	adds	r3, #2
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	e007      	b.n	80041be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1cf      	bne.n	8004176 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2200      	movs	r2, #0
 80041de:	2140      	movs	r1, #64	; 0x40
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fb6b 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e006      	b.n	80041fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	; 0x28
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	f040 808c 	bne.w	8004340 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_UART_Receive+0x2e>
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e084      	b.n	8004342 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_UART_Receive+0x40>
 8004242:	2302      	movs	r3, #2
 8004244:	e07d      	b.n	8004342 <HAL_UART_Receive+0x13c>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2222      	movs	r2, #34	; 0x22
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004262:	f7fd fffb 	bl	800225c <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d108      	bne.n	8004290 <HAL_UART_Receive+0x8a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e003      	b.n	8004298 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80042a0:	e043      	b.n	800432a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	2120      	movs	r1, #32
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fb05 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e042      	b.n	8004342 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	3302      	adds	r3, #2
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	e01f      	b.n	800431c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e4:	d007      	beq.n	80042f6 <HAL_UART_Receive+0xf0>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_UART_Receive+0xfe>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e008      	b.n	8004316 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004310:	b2da      	uxtb	r2, r3
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3301      	adds	r3, #1
 800431a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1b6      	bne.n	80042a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0ba      	sub	sp, #232	; 0xe8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800438a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fbd3 	bl	8004b56 <UART_Receive_IT>
      return;
 80043b0:	e256      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80de 	beq.w	8004578 <HAL_UART_IRQHandler+0x22c>
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80d1 	beq.w	8004578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
 8004406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800441e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d011      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d105      	bne.n	8004466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 81ed 	beq.w	8004856 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fb5e 	bl	8004b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_UART_IRQHandler+0x17a>
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04f      	beq.n	8004566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa66 	bl	8004998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b40      	cmp	r3, #64	; 0x40
 80044d8:	d141      	bne.n	800455e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3314      	adds	r3, #20
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1d9      	bne.n	80044da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	2b00      	cmp	r3, #0
 800452c:	d013      	beq.n	8004556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	4a7d      	ldr	r2, [pc, #500]	; (8004728 <HAL_UART_IRQHandler+0x3dc>)
 8004534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe f81b 	bl	8002576 <HAL_DMA_Abort_IT>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d016      	beq.n	8004574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	e00e      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f99a 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	e00a      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f996 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	e006      	b.n	8004574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f992 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004572:	e170      	b.n	8004856 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004574:	bf00      	nop
    return;
 8004576:	e16e      	b.n	8004856 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 814a 	bne.w	8004816 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8143 	beq.w	8004816 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 813c 	beq.w	8004816 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	f040 80b4 	bne.w	800472c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 8140 	beq.w	800485a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045e2:	429a      	cmp	r2, r3
 80045e4:	f080 8139 	bcs.w	800485a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	f000 8088 	beq.w	800470e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1d9      	bne.n	80045fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800465a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800466e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e1      	bne.n	800464a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3314      	adds	r3, #20
 80046a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d6:	e853 3f00 	ldrex	r3, [r3]
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	330c      	adds	r3, #12
 80046ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e3      	bne.n	80046cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd fec4 	bl	8002496 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004716:	b29b      	uxth	r3, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	b29b      	uxth	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f8c0 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004724:	e099      	b.n	800485a <HAL_UART_IRQHandler+0x50e>
 8004726:	bf00      	nop
 8004728:	08004a5f 	.word	0x08004a5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004734:	b29b      	uxth	r3, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 808b 	beq.w	800485e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8086 	beq.w	800485e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004776:	647a      	str	r2, [r7, #68]	; 0x44
 8004778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800477c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e3      	bne.n	8004752 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	623b      	str	r3, [r7, #32]
   return(result);
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ae:	633a      	str	r2, [r7, #48]	; 0x30
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e3      	bne.n	800478a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0310 	bic.w	r3, r3, #16
 80047e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047f4:	61fa      	str	r2, [r7, #28]
 80047f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	69b9      	ldr	r1, [r7, #24]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	617b      	str	r3, [r7, #20]
   return(result);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e3      	bne.n	80047d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f848 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004814:	e023      	b.n	800485e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_UART_IRQHandler+0x4ea>
 8004822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f929 	bl	8004a86 <UART_Transmit_IT>
    return;
 8004834:	e014      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00e      	beq.n	8004860 <HAL_UART_IRQHandler+0x514>
 8004842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f969 	bl	8004b26 <UART_EndTransmit_IT>
    return;
 8004854:	e004      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
    return;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
      return;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_UART_IRQHandler+0x514>
      return;
 800485e:	bf00      	nop
  }
}
 8004860:	37e8      	adds	r7, #232	; 0xe8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop

08004868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b090      	sub	sp, #64	; 0x40
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	e050      	b.n	8004970 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d04c      	beq.n	8004970 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x30>
 80048dc:	f7fd fcbe 	bl	800225c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d241      	bcs.n	8004970 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800490c:	637a      	str	r2, [r7, #52]	; 0x34
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e5      	bne.n	80048ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	63bb      	str	r3, [r7, #56]	; 0x38
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004940:	623a      	str	r2, [r7, #32]
 8004942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69f9      	ldr	r1, [r7, #28]
 8004946:	6a3a      	ldr	r2, [r7, #32]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	61bb      	str	r3, [r7, #24]
   return(result);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e00f      	b.n	8004990 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	429a      	cmp	r2, r3
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	429a      	cmp	r2, r3
 800498c:	d09f      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3740      	adds	r7, #64	; 0x40
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b095      	sub	sp, #84	; 0x54
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c0:	643a      	str	r2, [r7, #64]	; 0x40
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a30:	61ba      	str	r2, [r7, #24]
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6979      	ldr	r1, [r7, #20]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a52:	bf00      	nop
 8004a54:	3754      	adds	r7, #84	; 0x54
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ff09 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b21      	cmp	r3, #33	; 0x21
 8004a98:	d13e      	bne.n	8004b18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d114      	bne.n	8004ace <UART_Transmit_IT+0x48>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]
 8004acc:	e008      	b.n	8004ae0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6211      	str	r1, [r2, #32]
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4619      	mov	r1, r3
 8004aee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fe8e 	bl	8004868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08c      	sub	sp, #48	; 0x30
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b22      	cmp	r3, #34	; 0x22
 8004b68:	f040 80ab 	bne.w	8004cc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d117      	bne.n	8004ba6 <UART_Receive_IT+0x50>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d113      	bne.n	8004ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba4:	e026      	b.n	8004bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb8:	d007      	beq.n	8004bca <UART_Receive_IT+0x74>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <UART_Receive_IT+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e008      	b.n	8004bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d15a      	bne.n	8004cbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0220 	bic.w	r2, r2, #32
 8004c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d135      	bne.n	8004cb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	623a      	str	r2, [r7, #32]
 8004c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d10a      	bne.n	8004ca6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fdf9 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
 8004cb2:	e002      	b.n	8004cba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fde1 	bl	800487c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e002      	b.n	8004cc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	; 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b0c0      	sub	sp, #256	; 0x100
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d24:	f021 010c 	bic.w	r1, r1, #12
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d32:	430b      	orrs	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	6999      	ldr	r1, [r3, #24]
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	ea40 0301 	orr.w	r3, r0, r1
 8004d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d005      	beq.n	8004d6c <UART_SetConfig+0xa0>
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b8d      	ldr	r3, [pc, #564]	; (8004f9c <UART_SetConfig+0x2d0>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d104      	bne.n	8004d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe fa16 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8004d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d74:	e003      	b.n	8004d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d76:	f7fe f9fd 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	f040 810c 	bne.w	8004fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	1891      	adds	r1, r2, r2
 8004da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004da6:	415b      	adcs	r3, r3
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dae:	4621      	mov	r1, r4
 8004db0:	eb12 0801 	adds.w	r8, r2, r1
 8004db4:	4629      	mov	r1, r5
 8004db6:	eb43 0901 	adc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ddc:	462b      	mov	r3, r5
 8004dde:	eb49 0303 	adc.w	r3, r9, r3
 8004de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	18db      	adds	r3, r3, r3
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004e00:	4613      	mov	r3, r2
 8004e02:	eb42 0303 	adc.w	r3, r2, r3
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e10:	f7fb ff32 	bl	8000c78 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011c      	lsls	r4, r3, #4
 8004e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	1891      	adds	r1, r2, r2
 8004e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e44:	4641      	mov	r1, r8
 8004e46:	eb12 0a01 	adds.w	sl, r2, r1
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e64:	4692      	mov	sl, r2
 8004e66:	469b      	mov	fp, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e72:	464b      	mov	r3, r9
 8004e74:	eb4b 0303 	adc.w	r3, fp, r3
 8004e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	643b      	str	r3, [r7, #64]	; 0x40
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ea6:	f7fb fee7 	bl	8000c78 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2264      	movs	r2, #100	; 0x64
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	1acb      	subs	r3, r1, r3
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed4:	441c      	add	r4, r3
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef8:	4641      	mov	r1, r8
 8004efa:	1851      	adds	r1, r2, r1
 8004efc:	6339      	str	r1, [r7, #48]	; 0x30
 8004efe:	4649      	mov	r1, r9
 8004f00:	414b      	adcs	r3, r1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f10:	4659      	mov	r1, fp
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4642      	mov	r2, r8
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	460a      	mov	r2, r1
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f62:	f7fb fe89 	bl	8000c78 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4422      	add	r2, r4
 8004f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f94:	e105      	b.n	80051a2 <UART_SetConfig+0x4d6>
 8004f96:	bf00      	nop
 8004f98:	40011000 	.word	0x40011000
 8004f9c:	40011400 	.word	0x40011400
 8004fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	1891      	adds	r1, r2, r2
 8004fbc:	6239      	str	r1, [r7, #32]
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0501 	adc.w	r5, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fec:	464b      	mov	r3, r9
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005012:	4629      	mov	r1, r5
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4621      	mov	r1, r4
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005024:	f7fb fe28 	bl	8000c78 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <UART_SetConfig+0x4e4>)
 800502e:	fba3 2302 	umull	r2, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	011c      	lsls	r4, r3, #4
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	1891      	adds	r1, r2, r2
 800504e:	61b9      	str	r1, [r7, #24]
 8005050:	415b      	adcs	r3, r3
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005058:	4641      	mov	r1, r8
 800505a:	1851      	adds	r1, r2, r1
 800505c:	6139      	str	r1, [r7, #16]
 800505e:	4649      	mov	r1, r9
 8005060:	414b      	adcs	r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	00cb      	lsls	r3, r1, #3
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507a:	4651      	mov	r1, sl
 800507c:	00ca      	lsls	r2, r1, #3
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	4603      	mov	r3, r0
 8005084:	4642      	mov	r2, r8
 8005086:	189b      	adds	r3, r3, r2
 8005088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050b0:	4649      	mov	r1, r9
 80050b2:	008b      	lsls	r3, r1, #2
 80050b4:	4641      	mov	r1, r8
 80050b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ba:	4641      	mov	r1, r8
 80050bc:	008a      	lsls	r2, r1, #2
 80050be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050c2:	f7fb fdd9 	bl	8000c78 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050cc:	fba3 1302 	umull	r1, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2164      	movs	r1, #100	; 0x64
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	3332      	adds	r3, #50	; 0x32
 80050de:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ea:	441c      	add	r4, r3
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f0:	2200      	movs	r2, #0
 80050f2:	673b      	str	r3, [r7, #112]	; 0x70
 80050f4:	677a      	str	r2, [r7, #116]	; 0x74
 80050f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050fa:	4642      	mov	r2, r8
 80050fc:	464b      	mov	r3, r9
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	415b      	adcs	r3, r3
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510a:	4641      	mov	r1, r8
 800510c:	1851      	adds	r1, r2, r1
 800510e:	6039      	str	r1, [r7, #0]
 8005110:	4649      	mov	r1, r9
 8005112:	414b      	adcs	r3, r1
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005122:	4659      	mov	r1, fp
 8005124:	00cb      	lsls	r3, r1, #3
 8005126:	4651      	mov	r1, sl
 8005128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800512c:	4651      	mov	r1, sl
 800512e:	00ca      	lsls	r2, r1, #3
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	4603      	mov	r3, r0
 8005136:	4642      	mov	r2, r8
 8005138:	189b      	adds	r3, r3, r2
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
 800513c:	464b      	mov	r3, r9
 800513e:	460a      	mov	r2, r1
 8005140:	eb42 0303 	adc.w	r3, r2, r3
 8005144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	663b      	str	r3, [r7, #96]	; 0x60
 8005150:	667a      	str	r2, [r7, #100]	; 0x64
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800515e:	4649      	mov	r1, r9
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	4641      	mov	r1, r8
 8005164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005168:	4641      	mov	r1, r8
 800516a:	008a      	lsls	r2, r1, #2
 800516c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005170:	f7fb fd82 	bl	8000c78 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <UART_SetConfig+0x4e4>)
 800517a:	fba3 1302 	umull	r1, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2164      	movs	r1, #100	; 0x64
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	3332      	adds	r3, #50	; 0x32
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <UART_SetConfig+0x4e4>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4422      	add	r2, r4
 80051a0:	609a      	str	r2, [r3, #8]
}
 80051a2:	bf00      	nop
 80051a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051a8:	46bd      	mov	sp, r7
 80051aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ae:	bf00      	nop
 80051b0:	51eb851f 	.word	0x51eb851f

080051b4 <__errno>:
 80051b4:	4b01      	ldr	r3, [pc, #4]	; (80051bc <__errno+0x8>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000088 	.word	0x20000088

080051c0 <__libc_init_array>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	4d0d      	ldr	r5, [pc, #52]	; (80051f8 <__libc_init_array+0x38>)
 80051c4:	4c0d      	ldr	r4, [pc, #52]	; (80051fc <__libc_init_array+0x3c>)
 80051c6:	1b64      	subs	r4, r4, r5
 80051c8:	10a4      	asrs	r4, r4, #2
 80051ca:	2600      	movs	r6, #0
 80051cc:	42a6      	cmp	r6, r4
 80051ce:	d109      	bne.n	80051e4 <__libc_init_array+0x24>
 80051d0:	4d0b      	ldr	r5, [pc, #44]	; (8005200 <__libc_init_array+0x40>)
 80051d2:	4c0c      	ldr	r4, [pc, #48]	; (8005204 <__libc_init_array+0x44>)
 80051d4:	f001 fc46 	bl	8006a64 <_init>
 80051d8:	1b64      	subs	r4, r4, r5
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	2600      	movs	r6, #0
 80051de:	42a6      	cmp	r6, r4
 80051e0:	d105      	bne.n	80051ee <__libc_init_array+0x2e>
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e8:	4798      	blx	r3
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7ee      	b.n	80051cc <__libc_init_array+0xc>
 80051ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f2:	4798      	blx	r3
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7f2      	b.n	80051de <__libc_init_array+0x1e>
 80051f8:	08006ca0 	.word	0x08006ca0
 80051fc:	08006ca0 	.word	0x08006ca0
 8005200:	08006ca0 	.word	0x08006ca0
 8005204:	08006ca4 	.word	0x08006ca4

08005208 <malloc>:
 8005208:	4b02      	ldr	r3, [pc, #8]	; (8005214 <malloc+0xc>)
 800520a:	4601      	mov	r1, r0
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f000 b877 	b.w	8005300 <_malloc_r>
 8005212:	bf00      	nop
 8005214:	20000088 	.word	0x20000088

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <_free_r>:
 8005228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800522a:	2900      	cmp	r1, #0
 800522c:	d044      	beq.n	80052b8 <_free_r+0x90>
 800522e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005232:	9001      	str	r0, [sp, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f1a1 0404 	sub.w	r4, r1, #4
 800523a:	bfb8      	it	lt
 800523c:	18e4      	addlt	r4, r4, r3
 800523e:	f000 f90b 	bl	8005458 <__malloc_lock>
 8005242:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <_free_r+0x94>)
 8005244:	9801      	ldr	r0, [sp, #4]
 8005246:	6813      	ldr	r3, [r2, #0]
 8005248:	b933      	cbnz	r3, 8005258 <_free_r+0x30>
 800524a:	6063      	str	r3, [r4, #4]
 800524c:	6014      	str	r4, [r2, #0]
 800524e:	b003      	add	sp, #12
 8005250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005254:	f000 b906 	b.w	8005464 <__malloc_unlock>
 8005258:	42a3      	cmp	r3, r4
 800525a:	d908      	bls.n	800526e <_free_r+0x46>
 800525c:	6825      	ldr	r5, [r4, #0]
 800525e:	1961      	adds	r1, r4, r5
 8005260:	428b      	cmp	r3, r1
 8005262:	bf01      	itttt	eq
 8005264:	6819      	ldreq	r1, [r3, #0]
 8005266:	685b      	ldreq	r3, [r3, #4]
 8005268:	1949      	addeq	r1, r1, r5
 800526a:	6021      	streq	r1, [r4, #0]
 800526c:	e7ed      	b.n	800524a <_free_r+0x22>
 800526e:	461a      	mov	r2, r3
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	b10b      	cbz	r3, 8005278 <_free_r+0x50>
 8005274:	42a3      	cmp	r3, r4
 8005276:	d9fa      	bls.n	800526e <_free_r+0x46>
 8005278:	6811      	ldr	r1, [r2, #0]
 800527a:	1855      	adds	r5, r2, r1
 800527c:	42a5      	cmp	r5, r4
 800527e:	d10b      	bne.n	8005298 <_free_r+0x70>
 8005280:	6824      	ldr	r4, [r4, #0]
 8005282:	4421      	add	r1, r4
 8005284:	1854      	adds	r4, r2, r1
 8005286:	42a3      	cmp	r3, r4
 8005288:	6011      	str	r1, [r2, #0]
 800528a:	d1e0      	bne.n	800524e <_free_r+0x26>
 800528c:	681c      	ldr	r4, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	6053      	str	r3, [r2, #4]
 8005292:	4421      	add	r1, r4
 8005294:	6011      	str	r1, [r2, #0]
 8005296:	e7da      	b.n	800524e <_free_r+0x26>
 8005298:	d902      	bls.n	80052a0 <_free_r+0x78>
 800529a:	230c      	movs	r3, #12
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	e7d6      	b.n	800524e <_free_r+0x26>
 80052a0:	6825      	ldr	r5, [r4, #0]
 80052a2:	1961      	adds	r1, r4, r5
 80052a4:	428b      	cmp	r3, r1
 80052a6:	bf04      	itt	eq
 80052a8:	6819      	ldreq	r1, [r3, #0]
 80052aa:	685b      	ldreq	r3, [r3, #4]
 80052ac:	6063      	str	r3, [r4, #4]
 80052ae:	bf04      	itt	eq
 80052b0:	1949      	addeq	r1, r1, r5
 80052b2:	6021      	streq	r1, [r4, #0]
 80052b4:	6054      	str	r4, [r2, #4]
 80052b6:	e7ca      	b.n	800524e <_free_r+0x26>
 80052b8:	b003      	add	sp, #12
 80052ba:	bd30      	pop	{r4, r5, pc}
 80052bc:	20000334 	.word	0x20000334

080052c0 <sbrk_aligned>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	4e0e      	ldr	r6, [pc, #56]	; (80052fc <sbrk_aligned+0x3c>)
 80052c4:	460c      	mov	r4, r1
 80052c6:	6831      	ldr	r1, [r6, #0]
 80052c8:	4605      	mov	r5, r0
 80052ca:	b911      	cbnz	r1, 80052d2 <sbrk_aligned+0x12>
 80052cc:	f000 f88c 	bl	80053e8 <_sbrk_r>
 80052d0:	6030      	str	r0, [r6, #0]
 80052d2:	4621      	mov	r1, r4
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 f887 	bl	80053e8 <_sbrk_r>
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	d00a      	beq.n	80052f4 <sbrk_aligned+0x34>
 80052de:	1cc4      	adds	r4, r0, #3
 80052e0:	f024 0403 	bic.w	r4, r4, #3
 80052e4:	42a0      	cmp	r0, r4
 80052e6:	d007      	beq.n	80052f8 <sbrk_aligned+0x38>
 80052e8:	1a21      	subs	r1, r4, r0
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 f87c 	bl	80053e8 <_sbrk_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	d101      	bne.n	80052f8 <sbrk_aligned+0x38>
 80052f4:	f04f 34ff 	mov.w	r4, #4294967295
 80052f8:	4620      	mov	r0, r4
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	20000338 	.word	0x20000338

08005300 <_malloc_r>:
 8005300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005304:	1ccd      	adds	r5, r1, #3
 8005306:	f025 0503 	bic.w	r5, r5, #3
 800530a:	3508      	adds	r5, #8
 800530c:	2d0c      	cmp	r5, #12
 800530e:	bf38      	it	cc
 8005310:	250c      	movcc	r5, #12
 8005312:	2d00      	cmp	r5, #0
 8005314:	4607      	mov	r7, r0
 8005316:	db01      	blt.n	800531c <_malloc_r+0x1c>
 8005318:	42a9      	cmp	r1, r5
 800531a:	d905      	bls.n	8005328 <_malloc_r+0x28>
 800531c:	230c      	movs	r3, #12
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	2600      	movs	r6, #0
 8005322:	4630      	mov	r0, r6
 8005324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005328:	4e2e      	ldr	r6, [pc, #184]	; (80053e4 <_malloc_r+0xe4>)
 800532a:	f000 f895 	bl	8005458 <__malloc_lock>
 800532e:	6833      	ldr	r3, [r6, #0]
 8005330:	461c      	mov	r4, r3
 8005332:	bb34      	cbnz	r4, 8005382 <_malloc_r+0x82>
 8005334:	4629      	mov	r1, r5
 8005336:	4638      	mov	r0, r7
 8005338:	f7ff ffc2 	bl	80052c0 <sbrk_aligned>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	4604      	mov	r4, r0
 8005340:	d14d      	bne.n	80053de <_malloc_r+0xde>
 8005342:	6834      	ldr	r4, [r6, #0]
 8005344:	4626      	mov	r6, r4
 8005346:	2e00      	cmp	r6, #0
 8005348:	d140      	bne.n	80053cc <_malloc_r+0xcc>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	4631      	mov	r1, r6
 800534e:	4638      	mov	r0, r7
 8005350:	eb04 0803 	add.w	r8, r4, r3
 8005354:	f000 f848 	bl	80053e8 <_sbrk_r>
 8005358:	4580      	cmp	r8, r0
 800535a:	d13a      	bne.n	80053d2 <_malloc_r+0xd2>
 800535c:	6821      	ldr	r1, [r4, #0]
 800535e:	3503      	adds	r5, #3
 8005360:	1a6d      	subs	r5, r5, r1
 8005362:	f025 0503 	bic.w	r5, r5, #3
 8005366:	3508      	adds	r5, #8
 8005368:	2d0c      	cmp	r5, #12
 800536a:	bf38      	it	cc
 800536c:	250c      	movcc	r5, #12
 800536e:	4629      	mov	r1, r5
 8005370:	4638      	mov	r0, r7
 8005372:	f7ff ffa5 	bl	80052c0 <sbrk_aligned>
 8005376:	3001      	adds	r0, #1
 8005378:	d02b      	beq.n	80053d2 <_malloc_r+0xd2>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	442b      	add	r3, r5
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	e00e      	b.n	80053a0 <_malloc_r+0xa0>
 8005382:	6822      	ldr	r2, [r4, #0]
 8005384:	1b52      	subs	r2, r2, r5
 8005386:	d41e      	bmi.n	80053c6 <_malloc_r+0xc6>
 8005388:	2a0b      	cmp	r2, #11
 800538a:	d916      	bls.n	80053ba <_malloc_r+0xba>
 800538c:	1961      	adds	r1, r4, r5
 800538e:	42a3      	cmp	r3, r4
 8005390:	6025      	str	r5, [r4, #0]
 8005392:	bf18      	it	ne
 8005394:	6059      	strne	r1, [r3, #4]
 8005396:	6863      	ldr	r3, [r4, #4]
 8005398:	bf08      	it	eq
 800539a:	6031      	streq	r1, [r6, #0]
 800539c:	5162      	str	r2, [r4, r5]
 800539e:	604b      	str	r3, [r1, #4]
 80053a0:	4638      	mov	r0, r7
 80053a2:	f104 060b 	add.w	r6, r4, #11
 80053a6:	f000 f85d 	bl	8005464 <__malloc_unlock>
 80053aa:	f026 0607 	bic.w	r6, r6, #7
 80053ae:	1d23      	adds	r3, r4, #4
 80053b0:	1af2      	subs	r2, r6, r3
 80053b2:	d0b6      	beq.n	8005322 <_malloc_r+0x22>
 80053b4:	1b9b      	subs	r3, r3, r6
 80053b6:	50a3      	str	r3, [r4, r2]
 80053b8:	e7b3      	b.n	8005322 <_malloc_r+0x22>
 80053ba:	6862      	ldr	r2, [r4, #4]
 80053bc:	42a3      	cmp	r3, r4
 80053be:	bf0c      	ite	eq
 80053c0:	6032      	streq	r2, [r6, #0]
 80053c2:	605a      	strne	r2, [r3, #4]
 80053c4:	e7ec      	b.n	80053a0 <_malloc_r+0xa0>
 80053c6:	4623      	mov	r3, r4
 80053c8:	6864      	ldr	r4, [r4, #4]
 80053ca:	e7b2      	b.n	8005332 <_malloc_r+0x32>
 80053cc:	4634      	mov	r4, r6
 80053ce:	6876      	ldr	r6, [r6, #4]
 80053d0:	e7b9      	b.n	8005346 <_malloc_r+0x46>
 80053d2:	230c      	movs	r3, #12
 80053d4:	603b      	str	r3, [r7, #0]
 80053d6:	4638      	mov	r0, r7
 80053d8:	f000 f844 	bl	8005464 <__malloc_unlock>
 80053dc:	e7a1      	b.n	8005322 <_malloc_r+0x22>
 80053de:	6025      	str	r5, [r4, #0]
 80053e0:	e7de      	b.n	80053a0 <_malloc_r+0xa0>
 80053e2:	bf00      	nop
 80053e4:	20000334 	.word	0x20000334

080053e8 <_sbrk_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d06      	ldr	r5, [pc, #24]	; (8005404 <_sbrk_r+0x1c>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fc f9da 	bl	80017ac <_sbrk>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_sbrk_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_sbrk_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	2000033c 	.word	0x2000033c

08005408 <siprintf>:
 8005408:	b40e      	push	{r1, r2, r3}
 800540a:	b500      	push	{lr}
 800540c:	b09c      	sub	sp, #112	; 0x70
 800540e:	ab1d      	add	r3, sp, #116	; 0x74
 8005410:	9002      	str	r0, [sp, #8]
 8005412:	9006      	str	r0, [sp, #24]
 8005414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005418:	4809      	ldr	r0, [pc, #36]	; (8005440 <siprintf+0x38>)
 800541a:	9107      	str	r1, [sp, #28]
 800541c:	9104      	str	r1, [sp, #16]
 800541e:	4909      	ldr	r1, [pc, #36]	; (8005444 <siprintf+0x3c>)
 8005420:	f853 2b04 	ldr.w	r2, [r3], #4
 8005424:	9105      	str	r1, [sp, #20]
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	a902      	add	r1, sp, #8
 800542c:	f000 f87c 	bl	8005528 <_svfiprintf_r>
 8005430:	9b02      	ldr	r3, [sp, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	b01c      	add	sp, #112	; 0x70
 8005438:	f85d eb04 	ldr.w	lr, [sp], #4
 800543c:	b003      	add	sp, #12
 800543e:	4770      	bx	lr
 8005440:	20000088 	.word	0x20000088
 8005444:	ffff0208 	.word	0xffff0208

08005448 <strcpy>:
 8005448:	4603      	mov	r3, r0
 800544a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800544e:	f803 2b01 	strb.w	r2, [r3], #1
 8005452:	2a00      	cmp	r2, #0
 8005454:	d1f9      	bne.n	800544a <strcpy+0x2>
 8005456:	4770      	bx	lr

08005458 <__malloc_lock>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__malloc_lock+0x8>)
 800545a:	f000 baf9 	b.w	8005a50 <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	20000340 	.word	0x20000340

08005464 <__malloc_unlock>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__malloc_unlock+0x8>)
 8005466:	f000 baf4 	b.w	8005a52 <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	20000340 	.word	0x20000340

08005470 <__ssputs_r>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	688e      	ldr	r6, [r1, #8]
 8005476:	429e      	cmp	r6, r3
 8005478:	4682      	mov	sl, r0
 800547a:	460c      	mov	r4, r1
 800547c:	4690      	mov	r8, r2
 800547e:	461f      	mov	r7, r3
 8005480:	d838      	bhi.n	80054f4 <__ssputs_r+0x84>
 8005482:	898a      	ldrh	r2, [r1, #12]
 8005484:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005488:	d032      	beq.n	80054f0 <__ssputs_r+0x80>
 800548a:	6825      	ldr	r5, [r4, #0]
 800548c:	6909      	ldr	r1, [r1, #16]
 800548e:	eba5 0901 	sub.w	r9, r5, r1
 8005492:	6965      	ldr	r5, [r4, #20]
 8005494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005498:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800549c:	3301      	adds	r3, #1
 800549e:	444b      	add	r3, r9
 80054a0:	106d      	asrs	r5, r5, #1
 80054a2:	429d      	cmp	r5, r3
 80054a4:	bf38      	it	cc
 80054a6:	461d      	movcc	r5, r3
 80054a8:	0553      	lsls	r3, r2, #21
 80054aa:	d531      	bpl.n	8005510 <__ssputs_r+0xa0>
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7ff ff27 	bl	8005300 <_malloc_r>
 80054b2:	4606      	mov	r6, r0
 80054b4:	b950      	cbnz	r0, 80054cc <__ssputs_r+0x5c>
 80054b6:	230c      	movs	r3, #12
 80054b8:	f8ca 3000 	str.w	r3, [sl]
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c2:	81a3      	strh	r3, [r4, #12]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	6921      	ldr	r1, [r4, #16]
 80054ce:	464a      	mov	r2, r9
 80054d0:	f000 fac0 	bl	8005a54 <memcpy>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	6126      	str	r6, [r4, #16]
 80054e2:	6165      	str	r5, [r4, #20]
 80054e4:	444e      	add	r6, r9
 80054e6:	eba5 0509 	sub.w	r5, r5, r9
 80054ea:	6026      	str	r6, [r4, #0]
 80054ec:	60a5      	str	r5, [r4, #8]
 80054ee:	463e      	mov	r6, r7
 80054f0:	42be      	cmp	r6, r7
 80054f2:	d900      	bls.n	80054f6 <__ssputs_r+0x86>
 80054f4:	463e      	mov	r6, r7
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	4632      	mov	r2, r6
 80054fa:	4641      	mov	r1, r8
 80054fc:	f000 fab8 	bl	8005a70 <memmove>
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	1b9b      	subs	r3, r3, r6
 8005504:	60a3      	str	r3, [r4, #8]
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	4433      	add	r3, r6
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	2000      	movs	r0, #0
 800550e:	e7db      	b.n	80054c8 <__ssputs_r+0x58>
 8005510:	462a      	mov	r2, r5
 8005512:	f000 fac7 	bl	8005aa4 <_realloc_r>
 8005516:	4606      	mov	r6, r0
 8005518:	2800      	cmp	r0, #0
 800551a:	d1e1      	bne.n	80054e0 <__ssputs_r+0x70>
 800551c:	6921      	ldr	r1, [r4, #16]
 800551e:	4650      	mov	r0, sl
 8005520:	f7ff fe82 	bl	8005228 <_free_r>
 8005524:	e7c7      	b.n	80054b6 <__ssputs_r+0x46>
	...

08005528 <_svfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	4698      	mov	r8, r3
 800552e:	898b      	ldrh	r3, [r1, #12]
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	b09d      	sub	sp, #116	; 0x74
 8005534:	4607      	mov	r7, r0
 8005536:	460d      	mov	r5, r1
 8005538:	4614      	mov	r4, r2
 800553a:	d50e      	bpl.n	800555a <_svfiprintf_r+0x32>
 800553c:	690b      	ldr	r3, [r1, #16]
 800553e:	b963      	cbnz	r3, 800555a <_svfiprintf_r+0x32>
 8005540:	2140      	movs	r1, #64	; 0x40
 8005542:	f7ff fedd 	bl	8005300 <_malloc_r>
 8005546:	6028      	str	r0, [r5, #0]
 8005548:	6128      	str	r0, [r5, #16]
 800554a:	b920      	cbnz	r0, 8005556 <_svfiprintf_r+0x2e>
 800554c:	230c      	movs	r3, #12
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	e0d1      	b.n	80056fa <_svfiprintf_r+0x1d2>
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	616b      	str	r3, [r5, #20]
 800555a:	2300      	movs	r3, #0
 800555c:	9309      	str	r3, [sp, #36]	; 0x24
 800555e:	2320      	movs	r3, #32
 8005560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005564:	f8cd 800c 	str.w	r8, [sp, #12]
 8005568:	2330      	movs	r3, #48	; 0x30
 800556a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005714 <_svfiprintf_r+0x1ec>
 800556e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005572:	f04f 0901 	mov.w	r9, #1
 8005576:	4623      	mov	r3, r4
 8005578:	469a      	mov	sl, r3
 800557a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800557e:	b10a      	cbz	r2, 8005584 <_svfiprintf_r+0x5c>
 8005580:	2a25      	cmp	r2, #37	; 0x25
 8005582:	d1f9      	bne.n	8005578 <_svfiprintf_r+0x50>
 8005584:	ebba 0b04 	subs.w	fp, sl, r4
 8005588:	d00b      	beq.n	80055a2 <_svfiprintf_r+0x7a>
 800558a:	465b      	mov	r3, fp
 800558c:	4622      	mov	r2, r4
 800558e:	4629      	mov	r1, r5
 8005590:	4638      	mov	r0, r7
 8005592:	f7ff ff6d 	bl	8005470 <__ssputs_r>
 8005596:	3001      	adds	r0, #1
 8005598:	f000 80aa 	beq.w	80056f0 <_svfiprintf_r+0x1c8>
 800559c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559e:	445a      	add	r2, fp
 80055a0:	9209      	str	r2, [sp, #36]	; 0x24
 80055a2:	f89a 3000 	ldrb.w	r3, [sl]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80a2 	beq.w	80056f0 <_svfiprintf_r+0x1c8>
 80055ac:	2300      	movs	r3, #0
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b6:	f10a 0a01 	add.w	sl, sl, #1
 80055ba:	9304      	str	r3, [sp, #16]
 80055bc:	9307      	str	r3, [sp, #28]
 80055be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c2:	931a      	str	r3, [sp, #104]	; 0x68
 80055c4:	4654      	mov	r4, sl
 80055c6:	2205      	movs	r2, #5
 80055c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055cc:	4851      	ldr	r0, [pc, #324]	; (8005714 <_svfiprintf_r+0x1ec>)
 80055ce:	f7fa fe27 	bl	8000220 <memchr>
 80055d2:	9a04      	ldr	r2, [sp, #16]
 80055d4:	b9d8      	cbnz	r0, 800560e <_svfiprintf_r+0xe6>
 80055d6:	06d0      	lsls	r0, r2, #27
 80055d8:	bf44      	itt	mi
 80055da:	2320      	movmi	r3, #32
 80055dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e0:	0711      	lsls	r1, r2, #28
 80055e2:	bf44      	itt	mi
 80055e4:	232b      	movmi	r3, #43	; 0x2b
 80055e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ea:	f89a 3000 	ldrb.w	r3, [sl]
 80055ee:	2b2a      	cmp	r3, #42	; 0x2a
 80055f0:	d015      	beq.n	800561e <_svfiprintf_r+0xf6>
 80055f2:	9a07      	ldr	r2, [sp, #28]
 80055f4:	4654      	mov	r4, sl
 80055f6:	2000      	movs	r0, #0
 80055f8:	f04f 0c0a 	mov.w	ip, #10
 80055fc:	4621      	mov	r1, r4
 80055fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005602:	3b30      	subs	r3, #48	; 0x30
 8005604:	2b09      	cmp	r3, #9
 8005606:	d94e      	bls.n	80056a6 <_svfiprintf_r+0x17e>
 8005608:	b1b0      	cbz	r0, 8005638 <_svfiprintf_r+0x110>
 800560a:	9207      	str	r2, [sp, #28]
 800560c:	e014      	b.n	8005638 <_svfiprintf_r+0x110>
 800560e:	eba0 0308 	sub.w	r3, r0, r8
 8005612:	fa09 f303 	lsl.w	r3, r9, r3
 8005616:	4313      	orrs	r3, r2
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	46a2      	mov	sl, r4
 800561c:	e7d2      	b.n	80055c4 <_svfiprintf_r+0x9c>
 800561e:	9b03      	ldr	r3, [sp, #12]
 8005620:	1d19      	adds	r1, r3, #4
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	9103      	str	r1, [sp, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	bfbb      	ittet	lt
 800562a:	425b      	neglt	r3, r3
 800562c:	f042 0202 	orrlt.w	r2, r2, #2
 8005630:	9307      	strge	r3, [sp, #28]
 8005632:	9307      	strlt	r3, [sp, #28]
 8005634:	bfb8      	it	lt
 8005636:	9204      	strlt	r2, [sp, #16]
 8005638:	7823      	ldrb	r3, [r4, #0]
 800563a:	2b2e      	cmp	r3, #46	; 0x2e
 800563c:	d10c      	bne.n	8005658 <_svfiprintf_r+0x130>
 800563e:	7863      	ldrb	r3, [r4, #1]
 8005640:	2b2a      	cmp	r3, #42	; 0x2a
 8005642:	d135      	bne.n	80056b0 <_svfiprintf_r+0x188>
 8005644:	9b03      	ldr	r3, [sp, #12]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	9203      	str	r2, [sp, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	bfb8      	it	lt
 8005650:	f04f 33ff 	movlt.w	r3, #4294967295
 8005654:	3402      	adds	r4, #2
 8005656:	9305      	str	r3, [sp, #20]
 8005658:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005724 <_svfiprintf_r+0x1fc>
 800565c:	7821      	ldrb	r1, [r4, #0]
 800565e:	2203      	movs	r2, #3
 8005660:	4650      	mov	r0, sl
 8005662:	f7fa fddd 	bl	8000220 <memchr>
 8005666:	b140      	cbz	r0, 800567a <_svfiprintf_r+0x152>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	eba0 000a 	sub.w	r0, r0, sl
 800566e:	fa03 f000 	lsl.w	r0, r3, r0
 8005672:	9b04      	ldr	r3, [sp, #16]
 8005674:	4303      	orrs	r3, r0
 8005676:	3401      	adds	r4, #1
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567e:	4826      	ldr	r0, [pc, #152]	; (8005718 <_svfiprintf_r+0x1f0>)
 8005680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005684:	2206      	movs	r2, #6
 8005686:	f7fa fdcb 	bl	8000220 <memchr>
 800568a:	2800      	cmp	r0, #0
 800568c:	d038      	beq.n	8005700 <_svfiprintf_r+0x1d8>
 800568e:	4b23      	ldr	r3, [pc, #140]	; (800571c <_svfiprintf_r+0x1f4>)
 8005690:	bb1b      	cbnz	r3, 80056da <_svfiprintf_r+0x1b2>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	3307      	adds	r3, #7
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	3308      	adds	r3, #8
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a0:	4433      	add	r3, r6
 80056a2:	9309      	str	r3, [sp, #36]	; 0x24
 80056a4:	e767      	b.n	8005576 <_svfiprintf_r+0x4e>
 80056a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056aa:	460c      	mov	r4, r1
 80056ac:	2001      	movs	r0, #1
 80056ae:	e7a5      	b.n	80055fc <_svfiprintf_r+0xd4>
 80056b0:	2300      	movs	r3, #0
 80056b2:	3401      	adds	r4, #1
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f04f 0c0a 	mov.w	ip, #10
 80056bc:	4620      	mov	r0, r4
 80056be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c2:	3a30      	subs	r2, #48	; 0x30
 80056c4:	2a09      	cmp	r2, #9
 80056c6:	d903      	bls.n	80056d0 <_svfiprintf_r+0x1a8>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0c5      	beq.n	8005658 <_svfiprintf_r+0x130>
 80056cc:	9105      	str	r1, [sp, #20]
 80056ce:	e7c3      	b.n	8005658 <_svfiprintf_r+0x130>
 80056d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d4:	4604      	mov	r4, r0
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7f0      	b.n	80056bc <_svfiprintf_r+0x194>
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	462a      	mov	r2, r5
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <_svfiprintf_r+0x1f8>)
 80056e2:	a904      	add	r1, sp, #16
 80056e4:	4638      	mov	r0, r7
 80056e6:	f3af 8000 	nop.w
 80056ea:	1c42      	adds	r2, r0, #1
 80056ec:	4606      	mov	r6, r0
 80056ee:	d1d6      	bne.n	800569e <_svfiprintf_r+0x176>
 80056f0:	89ab      	ldrh	r3, [r5, #12]
 80056f2:	065b      	lsls	r3, r3, #25
 80056f4:	f53f af2c 	bmi.w	8005550 <_svfiprintf_r+0x28>
 80056f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056fa:	b01d      	add	sp, #116	; 0x74
 80056fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005700:	ab03      	add	r3, sp, #12
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	462a      	mov	r2, r5
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <_svfiprintf_r+0x1f8>)
 8005708:	a904      	add	r1, sp, #16
 800570a:	4638      	mov	r0, r7
 800570c:	f000 f87a 	bl	8005804 <_printf_i>
 8005710:	e7eb      	b.n	80056ea <_svfiprintf_r+0x1c2>
 8005712:	bf00      	nop
 8005714:	08006c20 	.word	0x08006c20
 8005718:	08006c2a 	.word	0x08006c2a
 800571c:	00000000 	.word	0x00000000
 8005720:	08005471 	.word	0x08005471
 8005724:	08006c26 	.word	0x08006c26

08005728 <_printf_common>:
 8005728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	4616      	mov	r6, r2
 800572e:	4699      	mov	r9, r3
 8005730:	688a      	ldr	r2, [r1, #8]
 8005732:	690b      	ldr	r3, [r1, #16]
 8005734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005738:	4293      	cmp	r3, r2
 800573a:	bfb8      	it	lt
 800573c:	4613      	movlt	r3, r2
 800573e:	6033      	str	r3, [r6, #0]
 8005740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005744:	4607      	mov	r7, r0
 8005746:	460c      	mov	r4, r1
 8005748:	b10a      	cbz	r2, 800574e <_printf_common+0x26>
 800574a:	3301      	adds	r3, #1
 800574c:	6033      	str	r3, [r6, #0]
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	0699      	lsls	r1, r3, #26
 8005752:	bf42      	ittt	mi
 8005754:	6833      	ldrmi	r3, [r6, #0]
 8005756:	3302      	addmi	r3, #2
 8005758:	6033      	strmi	r3, [r6, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	f015 0506 	ands.w	r5, r5, #6
 8005760:	d106      	bne.n	8005770 <_printf_common+0x48>
 8005762:	f104 0a19 	add.w	sl, r4, #25
 8005766:	68e3      	ldr	r3, [r4, #12]
 8005768:	6832      	ldr	r2, [r6, #0]
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	42ab      	cmp	r3, r5
 800576e:	dc26      	bgt.n	80057be <_printf_common+0x96>
 8005770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005774:	1e13      	subs	r3, r2, #0
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	bf18      	it	ne
 800577a:	2301      	movne	r3, #1
 800577c:	0692      	lsls	r2, r2, #26
 800577e:	d42b      	bmi.n	80057d8 <_printf_common+0xb0>
 8005780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005784:	4649      	mov	r1, r9
 8005786:	4638      	mov	r0, r7
 8005788:	47c0      	blx	r8
 800578a:	3001      	adds	r0, #1
 800578c:	d01e      	beq.n	80057cc <_printf_common+0xa4>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	68e5      	ldr	r5, [r4, #12]
 8005792:	6832      	ldr	r2, [r6, #0]
 8005794:	f003 0306 	and.w	r3, r3, #6
 8005798:	2b04      	cmp	r3, #4
 800579a:	bf08      	it	eq
 800579c:	1aad      	subeq	r5, r5, r2
 800579e:	68a3      	ldr	r3, [r4, #8]
 80057a0:	6922      	ldr	r2, [r4, #16]
 80057a2:	bf0c      	ite	eq
 80057a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a8:	2500      	movne	r5, #0
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bfc4      	itt	gt
 80057ae:	1a9b      	subgt	r3, r3, r2
 80057b0:	18ed      	addgt	r5, r5, r3
 80057b2:	2600      	movs	r6, #0
 80057b4:	341a      	adds	r4, #26
 80057b6:	42b5      	cmp	r5, r6
 80057b8:	d11a      	bne.n	80057f0 <_printf_common+0xc8>
 80057ba:	2000      	movs	r0, #0
 80057bc:	e008      	b.n	80057d0 <_printf_common+0xa8>
 80057be:	2301      	movs	r3, #1
 80057c0:	4652      	mov	r2, sl
 80057c2:	4649      	mov	r1, r9
 80057c4:	4638      	mov	r0, r7
 80057c6:	47c0      	blx	r8
 80057c8:	3001      	adds	r0, #1
 80057ca:	d103      	bne.n	80057d4 <_printf_common+0xac>
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295
 80057d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d4:	3501      	adds	r5, #1
 80057d6:	e7c6      	b.n	8005766 <_printf_common+0x3e>
 80057d8:	18e1      	adds	r1, r4, r3
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	2030      	movs	r0, #48	; 0x30
 80057de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057e2:	4422      	add	r2, r4
 80057e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057ec:	3302      	adds	r3, #2
 80057ee:	e7c7      	b.n	8005780 <_printf_common+0x58>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4622      	mov	r2, r4
 80057f4:	4649      	mov	r1, r9
 80057f6:	4638      	mov	r0, r7
 80057f8:	47c0      	blx	r8
 80057fa:	3001      	adds	r0, #1
 80057fc:	d0e6      	beq.n	80057cc <_printf_common+0xa4>
 80057fe:	3601      	adds	r6, #1
 8005800:	e7d9      	b.n	80057b6 <_printf_common+0x8e>
	...

08005804 <_printf_i>:
 8005804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	7e0f      	ldrb	r7, [r1, #24]
 800580a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800580c:	2f78      	cmp	r7, #120	; 0x78
 800580e:	4691      	mov	r9, r2
 8005810:	4680      	mov	r8, r0
 8005812:	460c      	mov	r4, r1
 8005814:	469a      	mov	sl, r3
 8005816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800581a:	d807      	bhi.n	800582c <_printf_i+0x28>
 800581c:	2f62      	cmp	r7, #98	; 0x62
 800581e:	d80a      	bhi.n	8005836 <_printf_i+0x32>
 8005820:	2f00      	cmp	r7, #0
 8005822:	f000 80d8 	beq.w	80059d6 <_printf_i+0x1d2>
 8005826:	2f58      	cmp	r7, #88	; 0x58
 8005828:	f000 80a3 	beq.w	8005972 <_printf_i+0x16e>
 800582c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005834:	e03a      	b.n	80058ac <_printf_i+0xa8>
 8005836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800583a:	2b15      	cmp	r3, #21
 800583c:	d8f6      	bhi.n	800582c <_printf_i+0x28>
 800583e:	a101      	add	r1, pc, #4	; (adr r1, 8005844 <_printf_i+0x40>)
 8005840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005844:	0800589d 	.word	0x0800589d
 8005848:	080058b1 	.word	0x080058b1
 800584c:	0800582d 	.word	0x0800582d
 8005850:	0800582d 	.word	0x0800582d
 8005854:	0800582d 	.word	0x0800582d
 8005858:	0800582d 	.word	0x0800582d
 800585c:	080058b1 	.word	0x080058b1
 8005860:	0800582d 	.word	0x0800582d
 8005864:	0800582d 	.word	0x0800582d
 8005868:	0800582d 	.word	0x0800582d
 800586c:	0800582d 	.word	0x0800582d
 8005870:	080059bd 	.word	0x080059bd
 8005874:	080058e1 	.word	0x080058e1
 8005878:	0800599f 	.word	0x0800599f
 800587c:	0800582d 	.word	0x0800582d
 8005880:	0800582d 	.word	0x0800582d
 8005884:	080059df 	.word	0x080059df
 8005888:	0800582d 	.word	0x0800582d
 800588c:	080058e1 	.word	0x080058e1
 8005890:	0800582d 	.word	0x0800582d
 8005894:	0800582d 	.word	0x0800582d
 8005898:	080059a7 	.word	0x080059a7
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	1d1a      	adds	r2, r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	602a      	str	r2, [r5, #0]
 80058a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ac:	2301      	movs	r3, #1
 80058ae:	e0a3      	b.n	80059f8 <_printf_i+0x1f4>
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	6829      	ldr	r1, [r5, #0]
 80058b4:	0606      	lsls	r6, r0, #24
 80058b6:	f101 0304 	add.w	r3, r1, #4
 80058ba:	d50a      	bpl.n	80058d2 <_printf_i+0xce>
 80058bc:	680e      	ldr	r6, [r1, #0]
 80058be:	602b      	str	r3, [r5, #0]
 80058c0:	2e00      	cmp	r6, #0
 80058c2:	da03      	bge.n	80058cc <_printf_i+0xc8>
 80058c4:	232d      	movs	r3, #45	; 0x2d
 80058c6:	4276      	negs	r6, r6
 80058c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058cc:	485e      	ldr	r0, [pc, #376]	; (8005a48 <_printf_i+0x244>)
 80058ce:	230a      	movs	r3, #10
 80058d0:	e019      	b.n	8005906 <_printf_i+0x102>
 80058d2:	680e      	ldr	r6, [r1, #0]
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058da:	bf18      	it	ne
 80058dc:	b236      	sxthne	r6, r6
 80058de:	e7ef      	b.n	80058c0 <_printf_i+0xbc>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	1d19      	adds	r1, r3, #4
 80058e6:	6029      	str	r1, [r5, #0]
 80058e8:	0601      	lsls	r1, r0, #24
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0xec>
 80058ec:	681e      	ldr	r6, [r3, #0]
 80058ee:	e002      	b.n	80058f6 <_printf_i+0xf2>
 80058f0:	0646      	lsls	r6, r0, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0xe8>
 80058f4:	881e      	ldrh	r6, [r3, #0]
 80058f6:	4854      	ldr	r0, [pc, #336]	; (8005a48 <_printf_i+0x244>)
 80058f8:	2f6f      	cmp	r7, #111	; 0x6f
 80058fa:	bf0c      	ite	eq
 80058fc:	2308      	moveq	r3, #8
 80058fe:	230a      	movne	r3, #10
 8005900:	2100      	movs	r1, #0
 8005902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005906:	6865      	ldr	r5, [r4, #4]
 8005908:	60a5      	str	r5, [r4, #8]
 800590a:	2d00      	cmp	r5, #0
 800590c:	bfa2      	ittt	ge
 800590e:	6821      	ldrge	r1, [r4, #0]
 8005910:	f021 0104 	bicge.w	r1, r1, #4
 8005914:	6021      	strge	r1, [r4, #0]
 8005916:	b90e      	cbnz	r6, 800591c <_printf_i+0x118>
 8005918:	2d00      	cmp	r5, #0
 800591a:	d04d      	beq.n	80059b8 <_printf_i+0x1b4>
 800591c:	4615      	mov	r5, r2
 800591e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005922:	fb03 6711 	mls	r7, r3, r1, r6
 8005926:	5dc7      	ldrb	r7, [r0, r7]
 8005928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800592c:	4637      	mov	r7, r6
 800592e:	42bb      	cmp	r3, r7
 8005930:	460e      	mov	r6, r1
 8005932:	d9f4      	bls.n	800591e <_printf_i+0x11a>
 8005934:	2b08      	cmp	r3, #8
 8005936:	d10b      	bne.n	8005950 <_printf_i+0x14c>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	07de      	lsls	r6, r3, #31
 800593c:	d508      	bpl.n	8005950 <_printf_i+0x14c>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	6861      	ldr	r1, [r4, #4]
 8005942:	4299      	cmp	r1, r3
 8005944:	bfde      	ittt	le
 8005946:	2330      	movle	r3, #48	; 0x30
 8005948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800594c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005950:	1b52      	subs	r2, r2, r5
 8005952:	6122      	str	r2, [r4, #16]
 8005954:	f8cd a000 	str.w	sl, [sp]
 8005958:	464b      	mov	r3, r9
 800595a:	aa03      	add	r2, sp, #12
 800595c:	4621      	mov	r1, r4
 800595e:	4640      	mov	r0, r8
 8005960:	f7ff fee2 	bl	8005728 <_printf_common>
 8005964:	3001      	adds	r0, #1
 8005966:	d14c      	bne.n	8005a02 <_printf_i+0x1fe>
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	b004      	add	sp, #16
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	4835      	ldr	r0, [pc, #212]	; (8005a48 <_printf_i+0x244>)
 8005974:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005978:	6829      	ldr	r1, [r5, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005980:	6029      	str	r1, [r5, #0]
 8005982:	061d      	lsls	r5, r3, #24
 8005984:	d514      	bpl.n	80059b0 <_printf_i+0x1ac>
 8005986:	07df      	lsls	r7, r3, #31
 8005988:	bf44      	itt	mi
 800598a:	f043 0320 	orrmi.w	r3, r3, #32
 800598e:	6023      	strmi	r3, [r4, #0]
 8005990:	b91e      	cbnz	r6, 800599a <_printf_i+0x196>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f023 0320 	bic.w	r3, r3, #32
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	2310      	movs	r3, #16
 800599c:	e7b0      	b.n	8005900 <_printf_i+0xfc>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	2378      	movs	r3, #120	; 0x78
 80059a8:	4828      	ldr	r0, [pc, #160]	; (8005a4c <_printf_i+0x248>)
 80059aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059ae:	e7e3      	b.n	8005978 <_printf_i+0x174>
 80059b0:	0659      	lsls	r1, r3, #25
 80059b2:	bf48      	it	mi
 80059b4:	b2b6      	uxthmi	r6, r6
 80059b6:	e7e6      	b.n	8005986 <_printf_i+0x182>
 80059b8:	4615      	mov	r5, r2
 80059ba:	e7bb      	b.n	8005934 <_printf_i+0x130>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6826      	ldr	r6, [r4, #0]
 80059c0:	6961      	ldr	r1, [r4, #20]
 80059c2:	1d18      	adds	r0, r3, #4
 80059c4:	6028      	str	r0, [r5, #0]
 80059c6:	0635      	lsls	r5, r6, #24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	d501      	bpl.n	80059d0 <_printf_i+0x1cc>
 80059cc:	6019      	str	r1, [r3, #0]
 80059ce:	e002      	b.n	80059d6 <_printf_i+0x1d2>
 80059d0:	0670      	lsls	r0, r6, #25
 80059d2:	d5fb      	bpl.n	80059cc <_printf_i+0x1c8>
 80059d4:	8019      	strh	r1, [r3, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	4615      	mov	r5, r2
 80059dc:	e7ba      	b.n	8005954 <_printf_i+0x150>
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	681d      	ldr	r5, [r3, #0]
 80059e6:	6862      	ldr	r2, [r4, #4]
 80059e8:	2100      	movs	r1, #0
 80059ea:	4628      	mov	r0, r5
 80059ec:	f7fa fc18 	bl	8000220 <memchr>
 80059f0:	b108      	cbz	r0, 80059f6 <_printf_i+0x1f2>
 80059f2:	1b40      	subs	r0, r0, r5
 80059f4:	6060      	str	r0, [r4, #4]
 80059f6:	6863      	ldr	r3, [r4, #4]
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	2300      	movs	r3, #0
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a00:	e7a8      	b.n	8005954 <_printf_i+0x150>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	462a      	mov	r2, r5
 8005a06:	4649      	mov	r1, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	47d0      	blx	sl
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d0ab      	beq.n	8005968 <_printf_i+0x164>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	079b      	lsls	r3, r3, #30
 8005a14:	d413      	bmi.n	8005a3e <_printf_i+0x23a>
 8005a16:	68e0      	ldr	r0, [r4, #12]
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	4298      	cmp	r0, r3
 8005a1c:	bfb8      	it	lt
 8005a1e:	4618      	movlt	r0, r3
 8005a20:	e7a4      	b.n	800596c <_printf_i+0x168>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4632      	mov	r2, r6
 8005a26:	4649      	mov	r1, r9
 8005a28:	4640      	mov	r0, r8
 8005a2a:	47d0      	blx	sl
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d09b      	beq.n	8005968 <_printf_i+0x164>
 8005a30:	3501      	adds	r5, #1
 8005a32:	68e3      	ldr	r3, [r4, #12]
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	1a5b      	subs	r3, r3, r1
 8005a38:	42ab      	cmp	r3, r5
 8005a3a:	dcf2      	bgt.n	8005a22 <_printf_i+0x21e>
 8005a3c:	e7eb      	b.n	8005a16 <_printf_i+0x212>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	f104 0619 	add.w	r6, r4, #25
 8005a44:	e7f5      	b.n	8005a32 <_printf_i+0x22e>
 8005a46:	bf00      	nop
 8005a48:	08006c31 	.word	0x08006c31
 8005a4c:	08006c42 	.word	0x08006c42

08005a50 <__retarget_lock_acquire_recursive>:
 8005a50:	4770      	bx	lr

08005a52 <__retarget_lock_release_recursive>:
 8005a52:	4770      	bx	lr

08005a54 <memcpy>:
 8005a54:	440a      	add	r2, r1
 8005a56:	4291      	cmp	r1, r2
 8005a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a5c:	d100      	bne.n	8005a60 <memcpy+0xc>
 8005a5e:	4770      	bx	lr
 8005a60:	b510      	push	{r4, lr}
 8005a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	d1f9      	bne.n	8005a62 <memcpy+0xe>
 8005a6e:	bd10      	pop	{r4, pc}

08005a70 <memmove>:
 8005a70:	4288      	cmp	r0, r1
 8005a72:	b510      	push	{r4, lr}
 8005a74:	eb01 0402 	add.w	r4, r1, r2
 8005a78:	d902      	bls.n	8005a80 <memmove+0x10>
 8005a7a:	4284      	cmp	r4, r0
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	d807      	bhi.n	8005a90 <memmove+0x20>
 8005a80:	1e43      	subs	r3, r0, #1
 8005a82:	42a1      	cmp	r1, r4
 8005a84:	d008      	beq.n	8005a98 <memmove+0x28>
 8005a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a8e:	e7f8      	b.n	8005a82 <memmove+0x12>
 8005a90:	4402      	add	r2, r0
 8005a92:	4601      	mov	r1, r0
 8005a94:	428a      	cmp	r2, r1
 8005a96:	d100      	bne.n	8005a9a <memmove+0x2a>
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aa2:	e7f7      	b.n	8005a94 <memmove+0x24>

08005aa4 <_realloc_r>:
 8005aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	4614      	mov	r4, r2
 8005aac:	460e      	mov	r6, r1
 8005aae:	b921      	cbnz	r1, 8005aba <_realloc_r+0x16>
 8005ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	f7ff bc23 	b.w	8005300 <_malloc_r>
 8005aba:	b92a      	cbnz	r2, 8005ac8 <_realloc_r+0x24>
 8005abc:	f7ff fbb4 	bl	8005228 <_free_r>
 8005ac0:	4625      	mov	r5, r4
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac8:	f000 f81b 	bl	8005b02 <_malloc_usable_size_r>
 8005acc:	4284      	cmp	r4, r0
 8005ace:	4607      	mov	r7, r0
 8005ad0:	d802      	bhi.n	8005ad8 <_realloc_r+0x34>
 8005ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ad6:	d812      	bhi.n	8005afe <_realloc_r+0x5a>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4640      	mov	r0, r8
 8005adc:	f7ff fc10 	bl	8005300 <_malloc_r>
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d0ed      	beq.n	8005ac2 <_realloc_r+0x1e>
 8005ae6:	42bc      	cmp	r4, r7
 8005ae8:	4622      	mov	r2, r4
 8005aea:	4631      	mov	r1, r6
 8005aec:	bf28      	it	cs
 8005aee:	463a      	movcs	r2, r7
 8005af0:	f7ff ffb0 	bl	8005a54 <memcpy>
 8005af4:	4631      	mov	r1, r6
 8005af6:	4640      	mov	r0, r8
 8005af8:	f7ff fb96 	bl	8005228 <_free_r>
 8005afc:	e7e1      	b.n	8005ac2 <_realloc_r+0x1e>
 8005afe:	4635      	mov	r5, r6
 8005b00:	e7df      	b.n	8005ac2 <_realloc_r+0x1e>

08005b02 <_malloc_usable_size_r>:
 8005b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b06:	1f18      	subs	r0, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfbc      	itt	lt
 8005b0c:	580b      	ldrlt	r3, [r1, r0]
 8005b0e:	18c0      	addlt	r0, r0, r3
 8005b10:	4770      	bx	lr
	...

08005b14 <rint>:
 8005b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b16:	ec51 0b10 	vmov	r0, r1, d0
 8005b1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b1e:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 8005b22:	2d13      	cmp	r5, #19
 8005b24:	ee10 3a10 	vmov	r3, s0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8005b2e:	dc5b      	bgt.n	8005be8 <rint+0xd4>
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da2d      	bge.n	8005b90 <rint+0x7c>
 8005b34:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005b38:	4302      	orrs	r2, r0
 8005b3a:	d025      	beq.n	8005b88 <rint+0x74>
 8005b3c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005b40:	4302      	orrs	r2, r0
 8005b42:	4253      	negs	r3, r2
 8005b44:	4313      	orrs	r3, r2
 8005b46:	0b1b      	lsrs	r3, r3, #12
 8005b48:	0c4a      	lsrs	r2, r1, #17
 8005b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b4e:	0452      	lsls	r2, r2, #17
 8005b50:	ea43 0102 	orr.w	r1, r3, r2
 8005b54:	460b      	mov	r3, r1
 8005b56:	4934      	ldr	r1, [pc, #208]	; (8005c28 <rint+0x114>)
 8005b58:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8005b5c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8005b60:	4602      	mov	r2, r0
 8005b62:	4639      	mov	r1, r7
 8005b64:	4630      	mov	r0, r6
 8005b66:	f7fa fbb1 	bl	80002cc <__adddf3>
 8005b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8005b6e:	463b      	mov	r3, r7
 8005b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b74:	4632      	mov	r2, r6
 8005b76:	f7fa fba7 	bl	80002c8 <__aeabi_dsub>
 8005b7a:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8005b7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b82:	ea43 0704 	orr.w	r7, r3, r4
 8005b86:	4639      	mov	r1, r7
 8005b88:	ec41 0b10 	vmov	d0, r0, r1
 8005b8c:	b003      	add	sp, #12
 8005b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b90:	4a26      	ldr	r2, [pc, #152]	; (8005c2c <rint+0x118>)
 8005b92:	412a      	asrs	r2, r5
 8005b94:	ea01 0702 	and.w	r7, r1, r2
 8005b98:	4307      	orrs	r7, r0
 8005b9a:	d0f5      	beq.n	8005b88 <rint+0x74>
 8005b9c:	0851      	lsrs	r1, r2, #1
 8005b9e:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d00c      	beq.n	8005bc0 <rint+0xac>
 8005ba6:	ea24 0201 	bic.w	r2, r4, r1
 8005baa:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8005bae:	2d13      	cmp	r5, #19
 8005bb0:	fa44 f505 	asr.w	r5, r4, r5
 8005bb4:	bf0c      	ite	eq
 8005bb6:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8005bba:	2300      	movne	r3, #0
 8005bbc:	ea42 0405 	orr.w	r4, r2, r5
 8005bc0:	4919      	ldr	r1, [pc, #100]	; (8005c28 <rint+0x114>)
 8005bc2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4623      	mov	r3, r4
 8005bca:	e9d6 4500 	ldrd	r4, r5, [r6]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fb7b 	bl	80002cc <__adddf3>
 8005bd6:	e9cd 0100 	strd	r0, r1, [sp]
 8005bda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f7fa fb71 	bl	80002c8 <__aeabi_dsub>
 8005be6:	e7cf      	b.n	8005b88 <rint+0x74>
 8005be8:	2d33      	cmp	r5, #51	; 0x33
 8005bea:	dd08      	ble.n	8005bfe <rint+0xea>
 8005bec:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005bf0:	d1ca      	bne.n	8005b88 <rint+0x74>
 8005bf2:	ee10 2a10 	vmov	r2, s0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	f7fa fb68 	bl	80002cc <__adddf3>
 8005bfc:	e7c4      	b.n	8005b88 <rint+0x74>
 8005bfe:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005c02:	f04f 35ff 	mov.w	r5, #4294967295
 8005c06:	40d5      	lsrs	r5, r2
 8005c08:	4228      	tst	r0, r5
 8005c0a:	d0bd      	beq.n	8005b88 <rint+0x74>
 8005c0c:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 8005c10:	ea4f 0155 	mov.w	r1, r5, lsr #1
 8005c14:	bf1f      	itttt	ne
 8005c16:	ea23 0101 	bicne.w	r1, r3, r1
 8005c1a:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 8005c1e:	fa43 f202 	asrne.w	r2, r3, r2
 8005c22:	ea41 0302 	orrne.w	r3, r1, r2
 8005c26:	e7cb      	b.n	8005bc0 <rint+0xac>
 8005c28:	08006c58 	.word	0x08006c58
 8005c2c:	000fffff 	.word	0x000fffff

08005c30 <pow>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	ed2d 8b02 	vpush	{d8}
 8005c36:	eeb0 8a40 	vmov.f32	s16, s0
 8005c3a:	eef0 8a60 	vmov.f32	s17, s1
 8005c3e:	ec55 4b11 	vmov	r4, r5, d1
 8005c42:	f000 f865 	bl	8005d10 <__ieee754_pow>
 8005c46:	4622      	mov	r2, r4
 8005c48:	462b      	mov	r3, r5
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	ec57 6b10 	vmov	r6, r7, d0
 8005c52:	f7fa ff8b 	bl	8000b6c <__aeabi_dcmpun>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d13b      	bne.n	8005cd2 <pow+0xa2>
 8005c5a:	ec51 0b18 	vmov	r0, r1, d8
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2300      	movs	r3, #0
 8005c62:	f7fa ff51 	bl	8000b08 <__aeabi_dcmpeq>
 8005c66:	b1b8      	cbz	r0, 8005c98 <pow+0x68>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa ff4a 	bl	8000b08 <__aeabi_dcmpeq>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d146      	bne.n	8005d06 <pow+0xd6>
 8005c78:	ec45 4b10 	vmov	d0, r4, r5
 8005c7c:	f000 fe61 	bl	8006942 <finite>
 8005c80:	b338      	cbz	r0, 8005cd2 <pow+0xa2>
 8005c82:	2200      	movs	r2, #0
 8005c84:	2300      	movs	r3, #0
 8005c86:	4620      	mov	r0, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	f7fa ff47 	bl	8000b1c <__aeabi_dcmplt>
 8005c8e:	b300      	cbz	r0, 8005cd2 <pow+0xa2>
 8005c90:	f7ff fa90 	bl	80051b4 <__errno>
 8005c94:	2322      	movs	r3, #34	; 0x22
 8005c96:	e01b      	b.n	8005cd0 <pow+0xa0>
 8005c98:	ec47 6b10 	vmov	d0, r6, r7
 8005c9c:	f000 fe51 	bl	8006942 <finite>
 8005ca0:	b9e0      	cbnz	r0, 8005cdc <pow+0xac>
 8005ca2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ca6:	eef0 0a68 	vmov.f32	s1, s17
 8005caa:	f000 fe4a 	bl	8006942 <finite>
 8005cae:	b1a8      	cbz	r0, 8005cdc <pow+0xac>
 8005cb0:	ec45 4b10 	vmov	d0, r4, r5
 8005cb4:	f000 fe45 	bl	8006942 <finite>
 8005cb8:	b180      	cbz	r0, 8005cdc <pow+0xac>
 8005cba:	4632      	mov	r2, r6
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa ff53 	bl	8000b6c <__aeabi_dcmpun>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d0e2      	beq.n	8005c90 <pow+0x60>
 8005cca:	f7ff fa73 	bl	80051b4 <__errno>
 8005cce:	2321      	movs	r3, #33	; 0x21
 8005cd0:	6003      	str	r3, [r0, #0]
 8005cd2:	ecbd 8b02 	vpop	{d8}
 8005cd6:	ec47 6b10 	vmov	d0, r6, r7
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa ff10 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d0f2      	beq.n	8005cd2 <pow+0xa2>
 8005cec:	eeb0 0a48 	vmov.f32	s0, s16
 8005cf0:	eef0 0a68 	vmov.f32	s1, s17
 8005cf4:	f000 fe25 	bl	8006942 <finite>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d0ea      	beq.n	8005cd2 <pow+0xa2>
 8005cfc:	ec45 4b10 	vmov	d0, r4, r5
 8005d00:	f000 fe1f 	bl	8006942 <finite>
 8005d04:	e7c3      	b.n	8005c8e <pow+0x5e>
 8005d06:	4f01      	ldr	r7, [pc, #4]	; (8005d0c <pow+0xdc>)
 8005d08:	2600      	movs	r6, #0
 8005d0a:	e7e2      	b.n	8005cd2 <pow+0xa2>
 8005d0c:	3ff00000 	.word	0x3ff00000

08005d10 <__ieee754_pow>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	ed2d 8b06 	vpush	{d8-d10}
 8005d18:	b089      	sub	sp, #36	; 0x24
 8005d1a:	ed8d 1b00 	vstr	d1, [sp]
 8005d1e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005d22:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005d26:	ea58 0102 	orrs.w	r1, r8, r2
 8005d2a:	ec57 6b10 	vmov	r6, r7, d0
 8005d2e:	d115      	bne.n	8005d5c <__ieee754_pow+0x4c>
 8005d30:	19b3      	adds	r3, r6, r6
 8005d32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005d36:	4152      	adcs	r2, r2
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	4b89      	ldr	r3, [pc, #548]	; (8005f60 <__ieee754_pow+0x250>)
 8005d3c:	4193      	sbcs	r3, r2
 8005d3e:	f080 84d2 	bcs.w	80066e6 <__ieee754_pow+0x9d6>
 8005d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d46:	4630      	mov	r0, r6
 8005d48:	4639      	mov	r1, r7
 8005d4a:	f7fa fabf 	bl	80002cc <__adddf3>
 8005d4e:	ec41 0b10 	vmov	d0, r0, r1
 8005d52:	b009      	add	sp, #36	; 0x24
 8005d54:	ecbd 8b06 	vpop	{d8-d10}
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	4b81      	ldr	r3, [pc, #516]	; (8005f64 <__ieee754_pow+0x254>)
 8005d5e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005d62:	429c      	cmp	r4, r3
 8005d64:	ee10 aa10 	vmov	sl, s0
 8005d68:	463d      	mov	r5, r7
 8005d6a:	dc06      	bgt.n	8005d7a <__ieee754_pow+0x6a>
 8005d6c:	d101      	bne.n	8005d72 <__ieee754_pow+0x62>
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	d1e7      	bne.n	8005d42 <__ieee754_pow+0x32>
 8005d72:	4598      	cmp	r8, r3
 8005d74:	dc01      	bgt.n	8005d7a <__ieee754_pow+0x6a>
 8005d76:	d10f      	bne.n	8005d98 <__ieee754_pow+0x88>
 8005d78:	b172      	cbz	r2, 8005d98 <__ieee754_pow+0x88>
 8005d7a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005d7e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005d82:	ea55 050a 	orrs.w	r5, r5, sl
 8005d86:	d1dc      	bne.n	8005d42 <__ieee754_pow+0x32>
 8005d88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d8c:	18db      	adds	r3, r3, r3
 8005d8e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005d92:	4152      	adcs	r2, r2
 8005d94:	429d      	cmp	r5, r3
 8005d96:	e7d0      	b.n	8005d3a <__ieee754_pow+0x2a>
 8005d98:	2d00      	cmp	r5, #0
 8005d9a:	da3b      	bge.n	8005e14 <__ieee754_pow+0x104>
 8005d9c:	4b72      	ldr	r3, [pc, #456]	; (8005f68 <__ieee754_pow+0x258>)
 8005d9e:	4598      	cmp	r8, r3
 8005da0:	dc51      	bgt.n	8005e46 <__ieee754_pow+0x136>
 8005da2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005da6:	4598      	cmp	r8, r3
 8005da8:	f340 84ac 	ble.w	8006704 <__ieee754_pow+0x9f4>
 8005dac:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005db0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005db4:	2b14      	cmp	r3, #20
 8005db6:	dd0f      	ble.n	8005dd8 <__ieee754_pow+0xc8>
 8005db8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005dbc:	fa22 f103 	lsr.w	r1, r2, r3
 8005dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	f040 849d 	bne.w	8006704 <__ieee754_pow+0x9f4>
 8005dca:	f001 0101 	and.w	r1, r1, #1
 8005dce:	f1c1 0302 	rsb	r3, r1, #2
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	b182      	cbz	r2, 8005df8 <__ieee754_pow+0xe8>
 8005dd6:	e05f      	b.n	8005e98 <__ieee754_pow+0x188>
 8005dd8:	2a00      	cmp	r2, #0
 8005dda:	d15b      	bne.n	8005e94 <__ieee754_pow+0x184>
 8005ddc:	f1c3 0314 	rsb	r3, r3, #20
 8005de0:	fa48 f103 	asr.w	r1, r8, r3
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	4543      	cmp	r3, r8
 8005dea:	f040 8488 	bne.w	80066fe <__ieee754_pow+0x9ee>
 8005dee:	f001 0101 	and.w	r1, r1, #1
 8005df2:	f1c1 0302 	rsb	r3, r1, #2
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	4b5c      	ldr	r3, [pc, #368]	; (8005f6c <__ieee754_pow+0x25c>)
 8005dfa:	4598      	cmp	r8, r3
 8005dfc:	d132      	bne.n	8005e64 <__ieee754_pow+0x154>
 8005dfe:	f1b9 0f00 	cmp.w	r9, #0
 8005e02:	f280 8478 	bge.w	80066f6 <__ieee754_pow+0x9e6>
 8005e06:	4959      	ldr	r1, [pc, #356]	; (8005f6c <__ieee754_pow+0x25c>)
 8005e08:	4632      	mov	r2, r6
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f7fa fd3d 	bl	800088c <__aeabi_ddiv>
 8005e12:	e79c      	b.n	8005d4e <__ieee754_pow+0x3e>
 8005e14:	2300      	movs	r3, #0
 8005e16:	9304      	str	r3, [sp, #16]
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d13d      	bne.n	8005e98 <__ieee754_pow+0x188>
 8005e1c:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <__ieee754_pow+0x254>)
 8005e1e:	4598      	cmp	r8, r3
 8005e20:	d1ea      	bne.n	8005df8 <__ieee754_pow+0xe8>
 8005e22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005e26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005e2a:	ea53 030a 	orrs.w	r3, r3, sl
 8005e2e:	f000 845a 	beq.w	80066e6 <__ieee754_pow+0x9d6>
 8005e32:	4b4f      	ldr	r3, [pc, #316]	; (8005f70 <__ieee754_pow+0x260>)
 8005e34:	429c      	cmp	r4, r3
 8005e36:	dd08      	ble.n	8005e4a <__ieee754_pow+0x13a>
 8005e38:	f1b9 0f00 	cmp.w	r9, #0
 8005e3c:	f2c0 8457 	blt.w	80066ee <__ieee754_pow+0x9de>
 8005e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e44:	e783      	b.n	8005d4e <__ieee754_pow+0x3e>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e7e5      	b.n	8005e16 <__ieee754_pow+0x106>
 8005e4a:	f1b9 0f00 	cmp.w	r9, #0
 8005e4e:	f04f 0000 	mov.w	r0, #0
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	f6bf af7a 	bge.w	8005d4e <__ieee754_pow+0x3e>
 8005e5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005e5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e62:	e774      	b.n	8005d4e <__ieee754_pow+0x3e>
 8005e64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005e68:	d106      	bne.n	8005e78 <__ieee754_pow+0x168>
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	4630      	mov	r0, r6
 8005e70:	4639      	mov	r1, r7
 8005e72:	f7fa fbe1 	bl	8000638 <__aeabi_dmul>
 8005e76:	e76a      	b.n	8005d4e <__ieee754_pow+0x3e>
 8005e78:	4b3e      	ldr	r3, [pc, #248]	; (8005f74 <__ieee754_pow+0x264>)
 8005e7a:	4599      	cmp	r9, r3
 8005e7c:	d10c      	bne.n	8005e98 <__ieee754_pow+0x188>
 8005e7e:	2d00      	cmp	r5, #0
 8005e80:	db0a      	blt.n	8005e98 <__ieee754_pow+0x188>
 8005e82:	ec47 6b10 	vmov	d0, r6, r7
 8005e86:	b009      	add	sp, #36	; 0x24
 8005e88:	ecbd 8b06 	vpop	{d8-d10}
 8005e8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	f000 bc6c 	b.w	800676c <__ieee754_sqrt>
 8005e94:	2300      	movs	r3, #0
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	ec47 6b10 	vmov	d0, r6, r7
 8005e9c:	f000 fd48 	bl	8006930 <fabs>
 8005ea0:	ec51 0b10 	vmov	r0, r1, d0
 8005ea4:	f1ba 0f00 	cmp.w	sl, #0
 8005ea8:	d129      	bne.n	8005efe <__ieee754_pow+0x1ee>
 8005eaa:	b124      	cbz	r4, 8005eb6 <__ieee754_pow+0x1a6>
 8005eac:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <__ieee754_pow+0x25c>)
 8005eae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d123      	bne.n	8005efe <__ieee754_pow+0x1ee>
 8005eb6:	f1b9 0f00 	cmp.w	r9, #0
 8005eba:	da05      	bge.n	8005ec8 <__ieee754_pow+0x1b8>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	492a      	ldr	r1, [pc, #168]	; (8005f6c <__ieee754_pow+0x25c>)
 8005ec4:	f7fa fce2 	bl	800088c <__aeabi_ddiv>
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	f6bf af40 	bge.w	8005d4e <__ieee754_pow+0x3e>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005ed4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ed8:	4323      	orrs	r3, r4
 8005eda:	d108      	bne.n	8005eee <__ieee754_pow+0x1de>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f7fa f9f0 	bl	80002c8 <__aeabi_dsub>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	e78f      	b.n	8005e0e <__ieee754_pow+0xfe>
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	f47f af2c 	bne.w	8005d4e <__ieee754_pow+0x3e>
 8005ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005efa:	4619      	mov	r1, r3
 8005efc:	e727      	b.n	8005d4e <__ieee754_pow+0x3e>
 8005efe:	0feb      	lsrs	r3, r5, #31
 8005f00:	3b01      	subs	r3, #1
 8005f02:	9306      	str	r3, [sp, #24]
 8005f04:	9a06      	ldr	r2, [sp, #24]
 8005f06:	9b04      	ldr	r3, [sp, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d102      	bne.n	8005f12 <__ieee754_pow+0x202>
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	e7e6      	b.n	8005ee0 <__ieee754_pow+0x1d0>
 8005f12:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <__ieee754_pow+0x268>)
 8005f14:	4598      	cmp	r8, r3
 8005f16:	f340 80fb 	ble.w	8006110 <__ieee754_pow+0x400>
 8005f1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f1e:	4598      	cmp	r8, r3
 8005f20:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <__ieee754_pow+0x260>)
 8005f22:	dd0c      	ble.n	8005f3e <__ieee754_pow+0x22e>
 8005f24:	429c      	cmp	r4, r3
 8005f26:	dc0f      	bgt.n	8005f48 <__ieee754_pow+0x238>
 8005f28:	f1b9 0f00 	cmp.w	r9, #0
 8005f2c:	da0f      	bge.n	8005f4e <__ieee754_pow+0x23e>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	b009      	add	sp, #36	; 0x24
 8005f32:	ecbd 8b06 	vpop	{d8-d10}
 8005f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	f000 bcf0 	b.w	800691e <__math_oflow>
 8005f3e:	429c      	cmp	r4, r3
 8005f40:	dbf2      	blt.n	8005f28 <__ieee754_pow+0x218>
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <__ieee754_pow+0x25c>)
 8005f44:	429c      	cmp	r4, r3
 8005f46:	dd19      	ble.n	8005f7c <__ieee754_pow+0x26c>
 8005f48:	f1b9 0f00 	cmp.w	r9, #0
 8005f4c:	dcef      	bgt.n	8005f2e <__ieee754_pow+0x21e>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	b009      	add	sp, #36	; 0x24
 8005f52:	ecbd 8b06 	vpop	{d8-d10}
 8005f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	f000 bcd7 	b.w	800690c <__math_uflow>
 8005f5e:	bf00      	nop
 8005f60:	fff00000 	.word	0xfff00000
 8005f64:	7ff00000 	.word	0x7ff00000
 8005f68:	433fffff 	.word	0x433fffff
 8005f6c:	3ff00000 	.word	0x3ff00000
 8005f70:	3fefffff 	.word	0x3fefffff
 8005f74:	3fe00000 	.word	0x3fe00000
 8005f78:	41e00000 	.word	0x41e00000
 8005f7c:	4b60      	ldr	r3, [pc, #384]	; (8006100 <__ieee754_pow+0x3f0>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f7fa f9a2 	bl	80002c8 <__aeabi_dsub>
 8005f84:	a354      	add	r3, pc, #336	; (adr r3, 80060d8 <__ieee754_pow+0x3c8>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	460d      	mov	r5, r1
 8005f8e:	f7fa fb53 	bl	8000638 <__aeabi_dmul>
 8005f92:	a353      	add	r3, pc, #332	; (adr r3, 80060e0 <__ieee754_pow+0x3d0>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	4606      	mov	r6, r0
 8005f9a:	460f      	mov	r7, r1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	f7fa fb4a 	bl	8000638 <__aeabi_dmul>
 8005fa4:	4b57      	ldr	r3, [pc, #348]	; (8006104 <__ieee754_pow+0x3f4>)
 8005fa6:	4682      	mov	sl, r0
 8005fa8:	468b      	mov	fp, r1
 8005faa:	2200      	movs	r2, #0
 8005fac:	4620      	mov	r0, r4
 8005fae:	4629      	mov	r1, r5
 8005fb0:	f7fa fb42 	bl	8000638 <__aeabi_dmul>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	a14b      	add	r1, pc, #300	; (adr r1, 80060e8 <__ieee754_pow+0x3d8>)
 8005fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fbe:	f7fa f983 	bl	80002c8 <__aeabi_dsub>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f7fa fb37 	bl	8000638 <__aeabi_dmul>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	2000      	movs	r0, #0
 8005fd0:	494d      	ldr	r1, [pc, #308]	; (8006108 <__ieee754_pow+0x3f8>)
 8005fd2:	f7fa f979 	bl	80002c8 <__aeabi_dsub>
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4680      	mov	r8, r0
 8005fda:	4689      	mov	r9, r1
 8005fdc:	462b      	mov	r3, r5
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fb29 	bl	8000638 <__aeabi_dmul>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4640      	mov	r0, r8
 8005fec:	4649      	mov	r1, r9
 8005fee:	f7fa fb23 	bl	8000638 <__aeabi_dmul>
 8005ff2:	a33f      	add	r3, pc, #252	; (adr r3, 80060f0 <__ieee754_pow+0x3e0>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa fb1e 	bl	8000638 <__aeabi_dmul>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4650      	mov	r0, sl
 8006002:	4659      	mov	r1, fp
 8006004:	f7fa f960 	bl	80002c8 <__aeabi_dsub>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4680      	mov	r8, r0
 800600e:	4689      	mov	r9, r1
 8006010:	4630      	mov	r0, r6
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa f95a 	bl	80002cc <__adddf3>
 8006018:	2000      	movs	r0, #0
 800601a:	4632      	mov	r2, r6
 800601c:	463b      	mov	r3, r7
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	f7fa f951 	bl	80002c8 <__aeabi_dsub>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa f94b 	bl	80002c8 <__aeabi_dsub>
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	9a06      	ldr	r2, [sp, #24]
 8006036:	3b01      	subs	r3, #1
 8006038:	4313      	orrs	r3, r2
 800603a:	4682      	mov	sl, r0
 800603c:	468b      	mov	fp, r1
 800603e:	f040 81e7 	bne.w	8006410 <__ieee754_pow+0x700>
 8006042:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80060f8 <__ieee754_pow+0x3e8>
 8006046:	eeb0 8a47 	vmov.f32	s16, s14
 800604a:	eef0 8a67 	vmov.f32	s17, s15
 800604e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006052:	2600      	movs	r6, #0
 8006054:	4632      	mov	r2, r6
 8006056:	463b      	mov	r3, r7
 8006058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800605c:	f7fa f934 	bl	80002c8 <__aeabi_dsub>
 8006060:	4622      	mov	r2, r4
 8006062:	462b      	mov	r3, r5
 8006064:	f7fa fae8 	bl	8000638 <__aeabi_dmul>
 8006068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800606c:	4680      	mov	r8, r0
 800606e:	4689      	mov	r9, r1
 8006070:	4650      	mov	r0, sl
 8006072:	4659      	mov	r1, fp
 8006074:	f7fa fae0 	bl	8000638 <__aeabi_dmul>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4640      	mov	r0, r8
 800607e:	4649      	mov	r1, r9
 8006080:	f7fa f924 	bl	80002cc <__adddf3>
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	4680      	mov	r8, r0
 800608a:	4689      	mov	r9, r1
 800608c:	4620      	mov	r0, r4
 800608e:	4629      	mov	r1, r5
 8006090:	f7fa fad2 	bl	8000638 <__aeabi_dmul>
 8006094:	460b      	mov	r3, r1
 8006096:	4604      	mov	r4, r0
 8006098:	460d      	mov	r5, r1
 800609a:	4602      	mov	r2, r0
 800609c:	4649      	mov	r1, r9
 800609e:	4640      	mov	r0, r8
 80060a0:	f7fa f914 	bl	80002cc <__adddf3>
 80060a4:	4b19      	ldr	r3, [pc, #100]	; (800610c <__ieee754_pow+0x3fc>)
 80060a6:	4299      	cmp	r1, r3
 80060a8:	ec45 4b19 	vmov	d9, r4, r5
 80060ac:	4606      	mov	r6, r0
 80060ae:	460f      	mov	r7, r1
 80060b0:	468b      	mov	fp, r1
 80060b2:	f340 82f1 	ble.w	8006698 <__ieee754_pow+0x988>
 80060b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80060ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80060be:	4303      	orrs	r3, r0
 80060c0:	f000 81e4 	beq.w	800648c <__ieee754_pow+0x77c>
 80060c4:	ec51 0b18 	vmov	r0, r1, d8
 80060c8:	2200      	movs	r2, #0
 80060ca:	2300      	movs	r3, #0
 80060cc:	f7fa fd26 	bl	8000b1c <__aeabi_dcmplt>
 80060d0:	3800      	subs	r0, #0
 80060d2:	bf18      	it	ne
 80060d4:	2001      	movne	r0, #1
 80060d6:	e72b      	b.n	8005f30 <__ieee754_pow+0x220>
 80060d8:	60000000 	.word	0x60000000
 80060dc:	3ff71547 	.word	0x3ff71547
 80060e0:	f85ddf44 	.word	0xf85ddf44
 80060e4:	3e54ae0b 	.word	0x3e54ae0b
 80060e8:	55555555 	.word	0x55555555
 80060ec:	3fd55555 	.word	0x3fd55555
 80060f0:	652b82fe 	.word	0x652b82fe
 80060f4:	3ff71547 	.word	0x3ff71547
 80060f8:	00000000 	.word	0x00000000
 80060fc:	bff00000 	.word	0xbff00000
 8006100:	3ff00000 	.word	0x3ff00000
 8006104:	3fd00000 	.word	0x3fd00000
 8006108:	3fe00000 	.word	0x3fe00000
 800610c:	408fffff 	.word	0x408fffff
 8006110:	4bd5      	ldr	r3, [pc, #852]	; (8006468 <__ieee754_pow+0x758>)
 8006112:	402b      	ands	r3, r5
 8006114:	2200      	movs	r2, #0
 8006116:	b92b      	cbnz	r3, 8006124 <__ieee754_pow+0x414>
 8006118:	4bd4      	ldr	r3, [pc, #848]	; (800646c <__ieee754_pow+0x75c>)
 800611a:	f7fa fa8d 	bl	8000638 <__aeabi_dmul>
 800611e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006122:	460c      	mov	r4, r1
 8006124:	1523      	asrs	r3, r4, #20
 8006126:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800612a:	4413      	add	r3, r2
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	4bd0      	ldr	r3, [pc, #832]	; (8006470 <__ieee754_pow+0x760>)
 8006130:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006134:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006138:	429c      	cmp	r4, r3
 800613a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800613e:	dd08      	ble.n	8006152 <__ieee754_pow+0x442>
 8006140:	4bcc      	ldr	r3, [pc, #816]	; (8006474 <__ieee754_pow+0x764>)
 8006142:	429c      	cmp	r4, r3
 8006144:	f340 8162 	ble.w	800640c <__ieee754_pow+0x6fc>
 8006148:	9b05      	ldr	r3, [sp, #20]
 800614a:	3301      	adds	r3, #1
 800614c:	9305      	str	r3, [sp, #20]
 800614e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006152:	2400      	movs	r4, #0
 8006154:	00e3      	lsls	r3, r4, #3
 8006156:	9307      	str	r3, [sp, #28]
 8006158:	4bc7      	ldr	r3, [pc, #796]	; (8006478 <__ieee754_pow+0x768>)
 800615a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800615e:	ed93 7b00 	vldr	d7, [r3]
 8006162:	4629      	mov	r1, r5
 8006164:	ec53 2b17 	vmov	r2, r3, d7
 8006168:	eeb0 9a47 	vmov.f32	s18, s14
 800616c:	eef0 9a67 	vmov.f32	s19, s15
 8006170:	4682      	mov	sl, r0
 8006172:	f7fa f8a9 	bl	80002c8 <__aeabi_dsub>
 8006176:	4652      	mov	r2, sl
 8006178:	4606      	mov	r6, r0
 800617a:	460f      	mov	r7, r1
 800617c:	462b      	mov	r3, r5
 800617e:	ec51 0b19 	vmov	r0, r1, d9
 8006182:	f7fa f8a3 	bl	80002cc <__adddf3>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	2000      	movs	r0, #0
 800618c:	49bb      	ldr	r1, [pc, #748]	; (800647c <__ieee754_pow+0x76c>)
 800618e:	f7fa fb7d 	bl	800088c <__aeabi_ddiv>
 8006192:	ec41 0b1a 	vmov	d10, r0, r1
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fa fa4b 	bl	8000638 <__aeabi_dmul>
 80061a2:	2300      	movs	r3, #0
 80061a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061a8:	9302      	str	r3, [sp, #8]
 80061aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061ae:	46ab      	mov	fp, r5
 80061b0:	106d      	asrs	r5, r5, #1
 80061b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80061b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80061ba:	ec41 0b18 	vmov	d8, r0, r1
 80061be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80061c2:	2200      	movs	r2, #0
 80061c4:	4640      	mov	r0, r8
 80061c6:	4649      	mov	r1, r9
 80061c8:	4614      	mov	r4, r2
 80061ca:	461d      	mov	r5, r3
 80061cc:	f7fa fa34 	bl	8000638 <__aeabi_dmul>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa f876 	bl	80002c8 <__aeabi_dsub>
 80061dc:	ec53 2b19 	vmov	r2, r3, d9
 80061e0:	4606      	mov	r6, r0
 80061e2:	460f      	mov	r7, r1
 80061e4:	4620      	mov	r0, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	f7fa f86e 	bl	80002c8 <__aeabi_dsub>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4650      	mov	r0, sl
 80061f2:	4659      	mov	r1, fp
 80061f4:	f7fa f868 	bl	80002c8 <__aeabi_dsub>
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	f7fa fa1c 	bl	8000638 <__aeabi_dmul>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4630      	mov	r0, r6
 8006206:	4639      	mov	r1, r7
 8006208:	f7fa f85e 	bl	80002c8 <__aeabi_dsub>
 800620c:	ec53 2b1a 	vmov	r2, r3, d10
 8006210:	f7fa fa12 	bl	8000638 <__aeabi_dmul>
 8006214:	ec53 2b18 	vmov	r2, r3, d8
 8006218:	ec41 0b19 	vmov	d9, r0, r1
 800621c:	ec51 0b18 	vmov	r0, r1, d8
 8006220:	f7fa fa0a 	bl	8000638 <__aeabi_dmul>
 8006224:	a37c      	add	r3, pc, #496	; (adr r3, 8006418 <__ieee754_pow+0x708>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	4604      	mov	r4, r0
 800622c:	460d      	mov	r5, r1
 800622e:	f7fa fa03 	bl	8000638 <__aeabi_dmul>
 8006232:	a37b      	add	r3, pc, #492	; (adr r3, 8006420 <__ieee754_pow+0x710>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f848 	bl	80002cc <__adddf3>
 800623c:	4622      	mov	r2, r4
 800623e:	462b      	mov	r3, r5
 8006240:	f7fa f9fa 	bl	8000638 <__aeabi_dmul>
 8006244:	a378      	add	r3, pc, #480	; (adr r3, 8006428 <__ieee754_pow+0x718>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f83f 	bl	80002cc <__adddf3>
 800624e:	4622      	mov	r2, r4
 8006250:	462b      	mov	r3, r5
 8006252:	f7fa f9f1 	bl	8000638 <__aeabi_dmul>
 8006256:	a376      	add	r3, pc, #472	; (adr r3, 8006430 <__ieee754_pow+0x720>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f836 	bl	80002cc <__adddf3>
 8006260:	4622      	mov	r2, r4
 8006262:	462b      	mov	r3, r5
 8006264:	f7fa f9e8 	bl	8000638 <__aeabi_dmul>
 8006268:	a373      	add	r3, pc, #460	; (adr r3, 8006438 <__ieee754_pow+0x728>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f82d 	bl	80002cc <__adddf3>
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	f7fa f9df 	bl	8000638 <__aeabi_dmul>
 800627a:	a371      	add	r3, pc, #452	; (adr r3, 8006440 <__ieee754_pow+0x730>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7fa f824 	bl	80002cc <__adddf3>
 8006284:	4622      	mov	r2, r4
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	462b      	mov	r3, r5
 800628c:	4620      	mov	r0, r4
 800628e:	4629      	mov	r1, r5
 8006290:	f7fa f9d2 	bl	8000638 <__aeabi_dmul>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa f9cc 	bl	8000638 <__aeabi_dmul>
 80062a0:	4642      	mov	r2, r8
 80062a2:	4604      	mov	r4, r0
 80062a4:	460d      	mov	r5, r1
 80062a6:	464b      	mov	r3, r9
 80062a8:	ec51 0b18 	vmov	r0, r1, d8
 80062ac:	f7fa f80e 	bl	80002cc <__adddf3>
 80062b0:	ec53 2b19 	vmov	r2, r3, d9
 80062b4:	f7fa f9c0 	bl	8000638 <__aeabi_dmul>
 80062b8:	4622      	mov	r2, r4
 80062ba:	462b      	mov	r3, r5
 80062bc:	f7fa f806 	bl	80002cc <__adddf3>
 80062c0:	4642      	mov	r2, r8
 80062c2:	4682      	mov	sl, r0
 80062c4:	468b      	mov	fp, r1
 80062c6:	464b      	mov	r3, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f7fa f9b4 	bl	8000638 <__aeabi_dmul>
 80062d0:	4b6b      	ldr	r3, [pc, #428]	; (8006480 <__ieee754_pow+0x770>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	f7f9 fff8 	bl	80002cc <__adddf3>
 80062dc:	4652      	mov	r2, sl
 80062de:	465b      	mov	r3, fp
 80062e0:	f7f9 fff4 	bl	80002cc <__adddf3>
 80062e4:	2000      	movs	r0, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	460d      	mov	r5, r1
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f7fa f9a1 	bl	8000638 <__aeabi_dmul>
 80062f6:	4b62      	ldr	r3, [pc, #392]	; (8006480 <__ieee754_pow+0x770>)
 80062f8:	4680      	mov	r8, r0
 80062fa:	4689      	mov	r9, r1
 80062fc:	2200      	movs	r2, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7f9 ffe1 	bl	80002c8 <__aeabi_dsub>
 8006306:	4632      	mov	r2, r6
 8006308:	463b      	mov	r3, r7
 800630a:	f7f9 ffdd 	bl	80002c8 <__aeabi_dsub>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4650      	mov	r0, sl
 8006314:	4659      	mov	r1, fp
 8006316:	f7f9 ffd7 	bl	80002c8 <__aeabi_dsub>
 800631a:	ec53 2b18 	vmov	r2, r3, d8
 800631e:	f7fa f98b 	bl	8000638 <__aeabi_dmul>
 8006322:	4622      	mov	r2, r4
 8006324:	4606      	mov	r6, r0
 8006326:	460f      	mov	r7, r1
 8006328:	462b      	mov	r3, r5
 800632a:	ec51 0b19 	vmov	r0, r1, d9
 800632e:	f7fa f983 	bl	8000638 <__aeabi_dmul>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7f9 ffc7 	bl	80002cc <__adddf3>
 800633e:	4606      	mov	r6, r0
 8006340:	460f      	mov	r7, r1
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4640      	mov	r0, r8
 8006348:	4649      	mov	r1, r9
 800634a:	f7f9 ffbf 	bl	80002cc <__adddf3>
 800634e:	a33e      	add	r3, pc, #248	; (adr r3, 8006448 <__ieee754_pow+0x738>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	2000      	movs	r0, #0
 8006356:	4604      	mov	r4, r0
 8006358:	460d      	mov	r5, r1
 800635a:	f7fa f96d 	bl	8000638 <__aeabi_dmul>
 800635e:	4642      	mov	r2, r8
 8006360:	ec41 0b18 	vmov	d8, r0, r1
 8006364:	464b      	mov	r3, r9
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7f9 ffad 	bl	80002c8 <__aeabi_dsub>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7f9 ffa7 	bl	80002c8 <__aeabi_dsub>
 800637a:	a335      	add	r3, pc, #212	; (adr r3, 8006450 <__ieee754_pow+0x740>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f7fa f95a 	bl	8000638 <__aeabi_dmul>
 8006384:	a334      	add	r3, pc, #208	; (adr r3, 8006458 <__ieee754_pow+0x748>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7fa f951 	bl	8000638 <__aeabi_dmul>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7f9 ff95 	bl	80002cc <__adddf3>
 80063a2:	9a07      	ldr	r2, [sp, #28]
 80063a4:	4b37      	ldr	r3, [pc, #220]	; (8006484 <__ieee754_pow+0x774>)
 80063a6:	4413      	add	r3, r2
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7f9 ff8e 	bl	80002cc <__adddf3>
 80063b0:	4682      	mov	sl, r0
 80063b2:	9805      	ldr	r0, [sp, #20]
 80063b4:	468b      	mov	fp, r1
 80063b6:	f7fa f8d5 	bl	8000564 <__aeabi_i2d>
 80063ba:	9a07      	ldr	r2, [sp, #28]
 80063bc:	4b32      	ldr	r3, [pc, #200]	; (8006488 <__ieee754_pow+0x778>)
 80063be:	4413      	add	r3, r2
 80063c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4652      	mov	r2, sl
 80063ca:	465b      	mov	r3, fp
 80063cc:	ec51 0b18 	vmov	r0, r1, d8
 80063d0:	f7f9 ff7c 	bl	80002cc <__adddf3>
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	f7f9 ff78 	bl	80002cc <__adddf3>
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	f7f9 ff74 	bl	80002cc <__adddf3>
 80063e4:	2000      	movs	r0, #0
 80063e6:	4632      	mov	r2, r6
 80063e8:	463b      	mov	r3, r7
 80063ea:	4604      	mov	r4, r0
 80063ec:	460d      	mov	r5, r1
 80063ee:	f7f9 ff6b 	bl	80002c8 <__aeabi_dsub>
 80063f2:	4642      	mov	r2, r8
 80063f4:	464b      	mov	r3, r9
 80063f6:	f7f9 ff67 	bl	80002c8 <__aeabi_dsub>
 80063fa:	ec53 2b18 	vmov	r2, r3, d8
 80063fe:	f7f9 ff63 	bl	80002c8 <__aeabi_dsub>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4650      	mov	r0, sl
 8006408:	4659      	mov	r1, fp
 800640a:	e610      	b.n	800602e <__ieee754_pow+0x31e>
 800640c:	2401      	movs	r4, #1
 800640e:	e6a1      	b.n	8006154 <__ieee754_pow+0x444>
 8006410:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006460 <__ieee754_pow+0x750>
 8006414:	e617      	b.n	8006046 <__ieee754_pow+0x336>
 8006416:	bf00      	nop
 8006418:	4a454eef 	.word	0x4a454eef
 800641c:	3fca7e28 	.word	0x3fca7e28
 8006420:	93c9db65 	.word	0x93c9db65
 8006424:	3fcd864a 	.word	0x3fcd864a
 8006428:	a91d4101 	.word	0xa91d4101
 800642c:	3fd17460 	.word	0x3fd17460
 8006430:	518f264d 	.word	0x518f264d
 8006434:	3fd55555 	.word	0x3fd55555
 8006438:	db6fabff 	.word	0xdb6fabff
 800643c:	3fdb6db6 	.word	0x3fdb6db6
 8006440:	33333303 	.word	0x33333303
 8006444:	3fe33333 	.word	0x3fe33333
 8006448:	e0000000 	.word	0xe0000000
 800644c:	3feec709 	.word	0x3feec709
 8006450:	dc3a03fd 	.word	0xdc3a03fd
 8006454:	3feec709 	.word	0x3feec709
 8006458:	145b01f5 	.word	0x145b01f5
 800645c:	be3e2fe0 	.word	0xbe3e2fe0
 8006460:	00000000 	.word	0x00000000
 8006464:	3ff00000 	.word	0x3ff00000
 8006468:	7ff00000 	.word	0x7ff00000
 800646c:	43400000 	.word	0x43400000
 8006470:	0003988e 	.word	0x0003988e
 8006474:	000bb679 	.word	0x000bb679
 8006478:	08006c68 	.word	0x08006c68
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	40080000 	.word	0x40080000
 8006484:	08006c88 	.word	0x08006c88
 8006488:	08006c78 	.word	0x08006c78
 800648c:	a3b5      	add	r3, pc, #724	; (adr r3, 8006764 <__ieee754_pow+0xa54>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	4640      	mov	r0, r8
 8006494:	4649      	mov	r1, r9
 8006496:	f7f9 ff19 	bl	80002cc <__adddf3>
 800649a:	4622      	mov	r2, r4
 800649c:	ec41 0b1a 	vmov	d10, r0, r1
 80064a0:	462b      	mov	r3, r5
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7f9 ff0f 	bl	80002c8 <__aeabi_dsub>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	ec51 0b1a 	vmov	r0, r1, d10
 80064b2:	f7fa fb51 	bl	8000b58 <__aeabi_dcmpgt>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f47f ae04 	bne.w	80060c4 <__ieee754_pow+0x3b4>
 80064bc:	4aa4      	ldr	r2, [pc, #656]	; (8006750 <__ieee754_pow+0xa40>)
 80064be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064c2:	4293      	cmp	r3, r2
 80064c4:	f340 8108 	ble.w	80066d8 <__ieee754_pow+0x9c8>
 80064c8:	151b      	asrs	r3, r3, #20
 80064ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80064ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80064d2:	fa4a f303 	asr.w	r3, sl, r3
 80064d6:	445b      	add	r3, fp
 80064d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80064dc:	4e9d      	ldr	r6, [pc, #628]	; (8006754 <__ieee754_pow+0xa44>)
 80064de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80064e2:	4116      	asrs	r6, r2
 80064e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80064e8:	2000      	movs	r0, #0
 80064ea:	ea23 0106 	bic.w	r1, r3, r6
 80064ee:	f1c2 0214 	rsb	r2, r2, #20
 80064f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80064f6:	fa4a fa02 	asr.w	sl, sl, r2
 80064fa:	f1bb 0f00 	cmp.w	fp, #0
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4620      	mov	r0, r4
 8006504:	4629      	mov	r1, r5
 8006506:	bfb8      	it	lt
 8006508:	f1ca 0a00 	rsblt	sl, sl, #0
 800650c:	f7f9 fedc 	bl	80002c8 <__aeabi_dsub>
 8006510:	ec41 0b19 	vmov	d9, r0, r1
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	ec51 0b19 	vmov	r0, r1, d9
 800651c:	f7f9 fed6 	bl	80002cc <__adddf3>
 8006520:	a37b      	add	r3, pc, #492	; (adr r3, 8006710 <__ieee754_pow+0xa00>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	2000      	movs	r0, #0
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	f7fa f884 	bl	8000638 <__aeabi_dmul>
 8006530:	ec53 2b19 	vmov	r2, r3, d9
 8006534:	4606      	mov	r6, r0
 8006536:	460f      	mov	r7, r1
 8006538:	4620      	mov	r0, r4
 800653a:	4629      	mov	r1, r5
 800653c:	f7f9 fec4 	bl	80002c8 <__aeabi_dsub>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7f9 febe 	bl	80002c8 <__aeabi_dsub>
 800654c:	a372      	add	r3, pc, #456	; (adr r3, 8006718 <__ieee754_pow+0xa08>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7fa f871 	bl	8000638 <__aeabi_dmul>
 8006556:	a372      	add	r3, pc, #456	; (adr r3, 8006720 <__ieee754_pow+0xa10>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	4620      	mov	r0, r4
 8006562:	4629      	mov	r1, r5
 8006564:	f7fa f868 	bl	8000638 <__aeabi_dmul>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4640      	mov	r0, r8
 800656e:	4649      	mov	r1, r9
 8006570:	f7f9 feac 	bl	80002cc <__adddf3>
 8006574:	4604      	mov	r4, r0
 8006576:	460d      	mov	r5, r1
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4630      	mov	r0, r6
 800657e:	4639      	mov	r1, r7
 8006580:	f7f9 fea4 	bl	80002cc <__adddf3>
 8006584:	4632      	mov	r2, r6
 8006586:	463b      	mov	r3, r7
 8006588:	4680      	mov	r8, r0
 800658a:	4689      	mov	r9, r1
 800658c:	f7f9 fe9c 	bl	80002c8 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	f7f9 fe96 	bl	80002c8 <__aeabi_dsub>
 800659c:	4642      	mov	r2, r8
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	464b      	mov	r3, r9
 80065a4:	4640      	mov	r0, r8
 80065a6:	4649      	mov	r1, r9
 80065a8:	f7fa f846 	bl	8000638 <__aeabi_dmul>
 80065ac:	a35e      	add	r3, pc, #376	; (adr r3, 8006728 <__ieee754_pow+0xa18>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	4604      	mov	r4, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	f7fa f83f 	bl	8000638 <__aeabi_dmul>
 80065ba:	a35d      	add	r3, pc, #372	; (adr r3, 8006730 <__ieee754_pow+0xa20>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7f9 fe82 	bl	80002c8 <__aeabi_dsub>
 80065c4:	4622      	mov	r2, r4
 80065c6:	462b      	mov	r3, r5
 80065c8:	f7fa f836 	bl	8000638 <__aeabi_dmul>
 80065cc:	a35a      	add	r3, pc, #360	; (adr r3, 8006738 <__ieee754_pow+0xa28>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7f9 fe7b 	bl	80002cc <__adddf3>
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	f7fa f82d 	bl	8000638 <__aeabi_dmul>
 80065de:	a358      	add	r3, pc, #352	; (adr r3, 8006740 <__ieee754_pow+0xa30>)
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	f7f9 fe70 	bl	80002c8 <__aeabi_dsub>
 80065e8:	4622      	mov	r2, r4
 80065ea:	462b      	mov	r3, r5
 80065ec:	f7fa f824 	bl	8000638 <__aeabi_dmul>
 80065f0:	a355      	add	r3, pc, #340	; (adr r3, 8006748 <__ieee754_pow+0xa38>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 fe69 	bl	80002cc <__adddf3>
 80065fa:	4622      	mov	r2, r4
 80065fc:	462b      	mov	r3, r5
 80065fe:	f7fa f81b 	bl	8000638 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4640      	mov	r0, r8
 8006608:	4649      	mov	r1, r9
 800660a:	f7f9 fe5d 	bl	80002c8 <__aeabi_dsub>
 800660e:	4604      	mov	r4, r0
 8006610:	460d      	mov	r5, r1
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7fa f80d 	bl	8000638 <__aeabi_dmul>
 800661e:	2200      	movs	r2, #0
 8006620:	ec41 0b19 	vmov	d9, r0, r1
 8006624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7f9 fe4c 	bl	80002c8 <__aeabi_dsub>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	ec51 0b19 	vmov	r0, r1, d9
 8006638:	f7fa f928 	bl	800088c <__aeabi_ddiv>
 800663c:	4632      	mov	r2, r6
 800663e:	4604      	mov	r4, r0
 8006640:	460d      	mov	r5, r1
 8006642:	463b      	mov	r3, r7
 8006644:	4640      	mov	r0, r8
 8006646:	4649      	mov	r1, r9
 8006648:	f7f9 fff6 	bl	8000638 <__aeabi_dmul>
 800664c:	4632      	mov	r2, r6
 800664e:	463b      	mov	r3, r7
 8006650:	f7f9 fe3c 	bl	80002cc <__adddf3>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4620      	mov	r0, r4
 800665a:	4629      	mov	r1, r5
 800665c:	f7f9 fe34 	bl	80002c8 <__aeabi_dsub>
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	f7f9 fe30 	bl	80002c8 <__aeabi_dsub>
 8006668:	460b      	mov	r3, r1
 800666a:	4602      	mov	r2, r0
 800666c:	493a      	ldr	r1, [pc, #232]	; (8006758 <__ieee754_pow+0xa48>)
 800666e:	2000      	movs	r0, #0
 8006670:	f7f9 fe2a 	bl	80002c8 <__aeabi_dsub>
 8006674:	ec41 0b10 	vmov	d0, r0, r1
 8006678:	ee10 3a90 	vmov	r3, s1
 800667c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006684:	da2b      	bge.n	80066de <__ieee754_pow+0x9ce>
 8006686:	4650      	mov	r0, sl
 8006688:	f000 f966 	bl	8006958 <scalbn>
 800668c:	ec51 0b10 	vmov	r0, r1, d0
 8006690:	ec53 2b18 	vmov	r2, r3, d8
 8006694:	f7ff bbed 	b.w	8005e72 <__ieee754_pow+0x162>
 8006698:	4b30      	ldr	r3, [pc, #192]	; (800675c <__ieee754_pow+0xa4c>)
 800669a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800669e:	429e      	cmp	r6, r3
 80066a0:	f77f af0c 	ble.w	80064bc <__ieee754_pow+0x7ac>
 80066a4:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <__ieee754_pow+0xa50>)
 80066a6:	440b      	add	r3, r1
 80066a8:	4303      	orrs	r3, r0
 80066aa:	d009      	beq.n	80066c0 <__ieee754_pow+0x9b0>
 80066ac:	ec51 0b18 	vmov	r0, r1, d8
 80066b0:	2200      	movs	r2, #0
 80066b2:	2300      	movs	r3, #0
 80066b4:	f7fa fa32 	bl	8000b1c <__aeabi_dcmplt>
 80066b8:	3800      	subs	r0, #0
 80066ba:	bf18      	it	ne
 80066bc:	2001      	movne	r0, #1
 80066be:	e447      	b.n	8005f50 <__ieee754_pow+0x240>
 80066c0:	4622      	mov	r2, r4
 80066c2:	462b      	mov	r3, r5
 80066c4:	f7f9 fe00 	bl	80002c8 <__aeabi_dsub>
 80066c8:	4642      	mov	r2, r8
 80066ca:	464b      	mov	r3, r9
 80066cc:	f7fa fa3a 	bl	8000b44 <__aeabi_dcmpge>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f43f aef3 	beq.w	80064bc <__ieee754_pow+0x7ac>
 80066d6:	e7e9      	b.n	80066ac <__ieee754_pow+0x99c>
 80066d8:	f04f 0a00 	mov.w	sl, #0
 80066dc:	e71a      	b.n	8006514 <__ieee754_pow+0x804>
 80066de:	ec51 0b10 	vmov	r0, r1, d0
 80066e2:	4619      	mov	r1, r3
 80066e4:	e7d4      	b.n	8006690 <__ieee754_pow+0x980>
 80066e6:	491c      	ldr	r1, [pc, #112]	; (8006758 <__ieee754_pow+0xa48>)
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7ff bb30 	b.w	8005d4e <__ieee754_pow+0x3e>
 80066ee:	2000      	movs	r0, #0
 80066f0:	2100      	movs	r1, #0
 80066f2:	f7ff bb2c 	b.w	8005d4e <__ieee754_pow+0x3e>
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7ff bb28 	b.w	8005d4e <__ieee754_pow+0x3e>
 80066fe:	9204      	str	r2, [sp, #16]
 8006700:	f7ff bb7a 	b.w	8005df8 <__ieee754_pow+0xe8>
 8006704:	2300      	movs	r3, #0
 8006706:	f7ff bb64 	b.w	8005dd2 <__ieee754_pow+0xc2>
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w
 8006710:	00000000 	.word	0x00000000
 8006714:	3fe62e43 	.word	0x3fe62e43
 8006718:	fefa39ef 	.word	0xfefa39ef
 800671c:	3fe62e42 	.word	0x3fe62e42
 8006720:	0ca86c39 	.word	0x0ca86c39
 8006724:	be205c61 	.word	0xbe205c61
 8006728:	72bea4d0 	.word	0x72bea4d0
 800672c:	3e663769 	.word	0x3e663769
 8006730:	c5d26bf1 	.word	0xc5d26bf1
 8006734:	3ebbbd41 	.word	0x3ebbbd41
 8006738:	af25de2c 	.word	0xaf25de2c
 800673c:	3f11566a 	.word	0x3f11566a
 8006740:	16bebd93 	.word	0x16bebd93
 8006744:	3f66c16c 	.word	0x3f66c16c
 8006748:	5555553e 	.word	0x5555553e
 800674c:	3fc55555 	.word	0x3fc55555
 8006750:	3fe00000 	.word	0x3fe00000
 8006754:	000fffff 	.word	0x000fffff
 8006758:	3ff00000 	.word	0x3ff00000
 800675c:	4090cbff 	.word	0x4090cbff
 8006760:	3f6f3400 	.word	0x3f6f3400
 8006764:	652b82fe 	.word	0x652b82fe
 8006768:	3c971547 	.word	0x3c971547

0800676c <__ieee754_sqrt>:
 800676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006770:	ec55 4b10 	vmov	r4, r5, d0
 8006774:	4e55      	ldr	r6, [pc, #340]	; (80068cc <__ieee754_sqrt+0x160>)
 8006776:	43ae      	bics	r6, r5
 8006778:	ee10 0a10 	vmov	r0, s0
 800677c:	ee10 3a10 	vmov	r3, s0
 8006780:	462a      	mov	r2, r5
 8006782:	4629      	mov	r1, r5
 8006784:	d110      	bne.n	80067a8 <__ieee754_sqrt+0x3c>
 8006786:	ee10 2a10 	vmov	r2, s0
 800678a:	462b      	mov	r3, r5
 800678c:	f7f9 ff54 	bl	8000638 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f7f9 fd98 	bl	80002cc <__adddf3>
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	ec45 4b10 	vmov	d0, r4, r5
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	dc10      	bgt.n	80067ce <__ieee754_sqrt+0x62>
 80067ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80067b0:	4330      	orrs	r0, r6
 80067b2:	d0f5      	beq.n	80067a0 <__ieee754_sqrt+0x34>
 80067b4:	b15d      	cbz	r5, 80067ce <__ieee754_sqrt+0x62>
 80067b6:	ee10 2a10 	vmov	r2, s0
 80067ba:	462b      	mov	r3, r5
 80067bc:	ee10 0a10 	vmov	r0, s0
 80067c0:	f7f9 fd82 	bl	80002c8 <__aeabi_dsub>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	f7fa f860 	bl	800088c <__aeabi_ddiv>
 80067cc:	e7e6      	b.n	800679c <__ieee754_sqrt+0x30>
 80067ce:	1512      	asrs	r2, r2, #20
 80067d0:	d074      	beq.n	80068bc <__ieee754_sqrt+0x150>
 80067d2:	07d4      	lsls	r4, r2, #31
 80067d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80067d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80067dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80067e0:	bf5e      	ittt	pl
 80067e2:	0fda      	lsrpl	r2, r3, #31
 80067e4:	005b      	lslpl	r3, r3, #1
 80067e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80067ea:	2400      	movs	r4, #0
 80067ec:	0fda      	lsrs	r2, r3, #31
 80067ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80067f2:	107f      	asrs	r7, r7, #1
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	2516      	movs	r5, #22
 80067f8:	4620      	mov	r0, r4
 80067fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80067fe:	1886      	adds	r6, r0, r2
 8006800:	428e      	cmp	r6, r1
 8006802:	bfde      	ittt	le
 8006804:	1b89      	suble	r1, r1, r6
 8006806:	18b0      	addle	r0, r6, r2
 8006808:	18a4      	addle	r4, r4, r2
 800680a:	0049      	lsls	r1, r1, #1
 800680c:	3d01      	subs	r5, #1
 800680e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006812:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006816:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800681a:	d1f0      	bne.n	80067fe <__ieee754_sqrt+0x92>
 800681c:	462a      	mov	r2, r5
 800681e:	f04f 0e20 	mov.w	lr, #32
 8006822:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006826:	4281      	cmp	r1, r0
 8006828:	eb06 0c05 	add.w	ip, r6, r5
 800682c:	dc02      	bgt.n	8006834 <__ieee754_sqrt+0xc8>
 800682e:	d113      	bne.n	8006858 <__ieee754_sqrt+0xec>
 8006830:	459c      	cmp	ip, r3
 8006832:	d811      	bhi.n	8006858 <__ieee754_sqrt+0xec>
 8006834:	f1bc 0f00 	cmp.w	ip, #0
 8006838:	eb0c 0506 	add.w	r5, ip, r6
 800683c:	da43      	bge.n	80068c6 <__ieee754_sqrt+0x15a>
 800683e:	2d00      	cmp	r5, #0
 8006840:	db41      	blt.n	80068c6 <__ieee754_sqrt+0x15a>
 8006842:	f100 0801 	add.w	r8, r0, #1
 8006846:	1a09      	subs	r1, r1, r0
 8006848:	459c      	cmp	ip, r3
 800684a:	bf88      	it	hi
 800684c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006850:	eba3 030c 	sub.w	r3, r3, ip
 8006854:	4432      	add	r2, r6
 8006856:	4640      	mov	r0, r8
 8006858:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800685c:	f1be 0e01 	subs.w	lr, lr, #1
 8006860:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006864:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006868:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800686c:	d1db      	bne.n	8006826 <__ieee754_sqrt+0xba>
 800686e:	430b      	orrs	r3, r1
 8006870:	d006      	beq.n	8006880 <__ieee754_sqrt+0x114>
 8006872:	1c50      	adds	r0, r2, #1
 8006874:	bf13      	iteet	ne
 8006876:	3201      	addne	r2, #1
 8006878:	3401      	addeq	r4, #1
 800687a:	4672      	moveq	r2, lr
 800687c:	f022 0201 	bicne.w	r2, r2, #1
 8006880:	1063      	asrs	r3, r4, #1
 8006882:	0852      	lsrs	r2, r2, #1
 8006884:	07e1      	lsls	r1, r4, #31
 8006886:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800688a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800688e:	bf48      	it	mi
 8006890:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006894:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006898:	4614      	mov	r4, r2
 800689a:	e781      	b.n	80067a0 <__ieee754_sqrt+0x34>
 800689c:	0ad9      	lsrs	r1, r3, #11
 800689e:	3815      	subs	r0, #21
 80068a0:	055b      	lsls	r3, r3, #21
 80068a2:	2900      	cmp	r1, #0
 80068a4:	d0fa      	beq.n	800689c <__ieee754_sqrt+0x130>
 80068a6:	02cd      	lsls	r5, r1, #11
 80068a8:	d50a      	bpl.n	80068c0 <__ieee754_sqrt+0x154>
 80068aa:	f1c2 0420 	rsb	r4, r2, #32
 80068ae:	fa23 f404 	lsr.w	r4, r3, r4
 80068b2:	1e55      	subs	r5, r2, #1
 80068b4:	4093      	lsls	r3, r2
 80068b6:	4321      	orrs	r1, r4
 80068b8:	1b42      	subs	r2, r0, r5
 80068ba:	e78a      	b.n	80067d2 <__ieee754_sqrt+0x66>
 80068bc:	4610      	mov	r0, r2
 80068be:	e7f0      	b.n	80068a2 <__ieee754_sqrt+0x136>
 80068c0:	0049      	lsls	r1, r1, #1
 80068c2:	3201      	adds	r2, #1
 80068c4:	e7ef      	b.n	80068a6 <__ieee754_sqrt+0x13a>
 80068c6:	4680      	mov	r8, r0
 80068c8:	e7bd      	b.n	8006846 <__ieee754_sqrt+0xda>
 80068ca:	bf00      	nop
 80068cc:	7ff00000 	.word	0x7ff00000

080068d0 <with_errno>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	460d      	mov	r5, r1
 80068d6:	4616      	mov	r6, r2
 80068d8:	f7fe fc6c 	bl	80051b4 <__errno>
 80068dc:	4629      	mov	r1, r5
 80068de:	6006      	str	r6, [r0, #0]
 80068e0:	4620      	mov	r0, r4
 80068e2:	bd70      	pop	{r4, r5, r6, pc}

080068e4 <xflow>:
 80068e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e6:	4614      	mov	r4, r2
 80068e8:	461d      	mov	r5, r3
 80068ea:	b108      	cbz	r0, 80068f0 <xflow+0xc>
 80068ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	e9cd 2300 	strd	r2, r3, [sp]
 80068f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068f8:	4620      	mov	r0, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7f9 fe9c 	bl	8000638 <__aeabi_dmul>
 8006900:	2222      	movs	r2, #34	; 0x22
 8006902:	b003      	add	sp, #12
 8006904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006908:	f7ff bfe2 	b.w	80068d0 <with_errno>

0800690c <__math_uflow>:
 800690c:	b508      	push	{r3, lr}
 800690e:	2200      	movs	r2, #0
 8006910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006914:	f7ff ffe6 	bl	80068e4 <xflow>
 8006918:	ec41 0b10 	vmov	d0, r0, r1
 800691c:	bd08      	pop	{r3, pc}

0800691e <__math_oflow>:
 800691e:	b508      	push	{r3, lr}
 8006920:	2200      	movs	r2, #0
 8006922:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006926:	f7ff ffdd 	bl	80068e4 <xflow>
 800692a:	ec41 0b10 	vmov	d0, r0, r1
 800692e:	bd08      	pop	{r3, pc}

08006930 <fabs>:
 8006930:	ec51 0b10 	vmov	r0, r1, d0
 8006934:	ee10 2a10 	vmov	r2, s0
 8006938:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800693c:	ec43 2b10 	vmov	d0, r2, r3
 8006940:	4770      	bx	lr

08006942 <finite>:
 8006942:	b082      	sub	sp, #8
 8006944:	ed8d 0b00 	vstr	d0, [sp]
 8006948:	9801      	ldr	r0, [sp, #4]
 800694a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800694e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006952:	0fc0      	lsrs	r0, r0, #31
 8006954:	b002      	add	sp, #8
 8006956:	4770      	bx	lr

08006958 <scalbn>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	ec55 4b10 	vmov	r4, r5, d0
 800695e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006962:	4606      	mov	r6, r0
 8006964:	462b      	mov	r3, r5
 8006966:	b99a      	cbnz	r2, 8006990 <scalbn+0x38>
 8006968:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800696c:	4323      	orrs	r3, r4
 800696e:	d036      	beq.n	80069de <scalbn+0x86>
 8006970:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <scalbn+0x100>)
 8006972:	4629      	mov	r1, r5
 8006974:	ee10 0a10 	vmov	r0, s0
 8006978:	2200      	movs	r2, #0
 800697a:	f7f9 fe5d 	bl	8000638 <__aeabi_dmul>
 800697e:	4b37      	ldr	r3, [pc, #220]	; (8006a5c <scalbn+0x104>)
 8006980:	429e      	cmp	r6, r3
 8006982:	4604      	mov	r4, r0
 8006984:	460d      	mov	r5, r1
 8006986:	da10      	bge.n	80069aa <scalbn+0x52>
 8006988:	a32b      	add	r3, pc, #172	; (adr r3, 8006a38 <scalbn+0xe0>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	e03a      	b.n	8006a06 <scalbn+0xae>
 8006990:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006994:	428a      	cmp	r2, r1
 8006996:	d10c      	bne.n	80069b2 <scalbn+0x5a>
 8006998:	ee10 2a10 	vmov	r2, s0
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fc94 	bl	80002cc <__adddf3>
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	e019      	b.n	80069de <scalbn+0x86>
 80069aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069ae:	460b      	mov	r3, r1
 80069b0:	3a36      	subs	r2, #54	; 0x36
 80069b2:	4432      	add	r2, r6
 80069b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80069b8:	428a      	cmp	r2, r1
 80069ba:	dd08      	ble.n	80069ce <scalbn+0x76>
 80069bc:	2d00      	cmp	r5, #0
 80069be:	a120      	add	r1, pc, #128	; (adr r1, 8006a40 <scalbn+0xe8>)
 80069c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c4:	da1c      	bge.n	8006a00 <scalbn+0xa8>
 80069c6:	a120      	add	r1, pc, #128	; (adr r1, 8006a48 <scalbn+0xf0>)
 80069c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069cc:	e018      	b.n	8006a00 <scalbn+0xa8>
 80069ce:	2a00      	cmp	r2, #0
 80069d0:	dd08      	ble.n	80069e4 <scalbn+0x8c>
 80069d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069de:	ec45 4b10 	vmov	d0, r4, r5
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80069e8:	da19      	bge.n	8006a1e <scalbn+0xc6>
 80069ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80069ee:	429e      	cmp	r6, r3
 80069f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80069f4:	dd0a      	ble.n	8006a0c <scalbn+0xb4>
 80069f6:	a112      	add	r1, pc, #72	; (adr r1, 8006a40 <scalbn+0xe8>)
 80069f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e2      	bne.n	80069c6 <scalbn+0x6e>
 8006a00:	a30f      	add	r3, pc, #60	; (adr r3, 8006a40 <scalbn+0xe8>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fe17 	bl	8000638 <__aeabi_dmul>
 8006a0a:	e7cb      	b.n	80069a4 <scalbn+0x4c>
 8006a0c:	a10a      	add	r1, pc, #40	; (adr r1, 8006a38 <scalbn+0xe0>)
 8006a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0b8      	beq.n	8006988 <scalbn+0x30>
 8006a16:	a10e      	add	r1, pc, #56	; (adr r1, 8006a50 <scalbn+0xf8>)
 8006a18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a1c:	e7b4      	b.n	8006988 <scalbn+0x30>
 8006a1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a22:	3236      	adds	r2, #54	; 0x36
 8006a24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <scalbn+0x108>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	e7e8      	b.n	8006a06 <scalbn+0xae>
 8006a34:	f3af 8000 	nop.w
 8006a38:	c2f8f359 	.word	0xc2f8f359
 8006a3c:	01a56e1f 	.word	0x01a56e1f
 8006a40:	8800759c 	.word	0x8800759c
 8006a44:	7e37e43c 	.word	0x7e37e43c
 8006a48:	8800759c 	.word	0x8800759c
 8006a4c:	fe37e43c 	.word	0xfe37e43c
 8006a50:	c2f8f359 	.word	0xc2f8f359
 8006a54:	81a56e1f 	.word	0x81a56e1f
 8006a58:	43500000 	.word	0x43500000
 8006a5c:	ffff3cb0 	.word	0xffff3cb0
 8006a60:	3c900000 	.word	0x3c900000

08006a64 <_init>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	bf00      	nop
 8006a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a6a:	bc08      	pop	{r3}
 8006a6c:	469e      	mov	lr, r3
 8006a6e:	4770      	bx	lr

08006a70 <_fini>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr
